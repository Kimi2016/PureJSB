
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];

//this.Enum = {};

// UnityEngine.Security
var UnityEngine$Security = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Security",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        LoadAndVerifyAssembly$$Byte$Array$$String: function(a0/*Byte[]*/, a1/*String*/) { 
            return CS.Call(4, 0, 0, true, a0, a1); //Ret: Assembly
        },
        LoadAndVerifyAssembly$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 0, 1, true, a0); //Ret: Assembly
        },
        PrefetchSocketPolicy$$String$$Int32$$Int32: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 0, 2, true, a0, a1, a2); //Ret: Boolean
        },
        PrefetchSocketPolicy$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 0, 3, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 0, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Security);

// UnityEngine.StackTraceUtility
var UnityEngine$StackTraceUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.StackTraceUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        ExtractStackTrace: function() { 
            return CS.Call(4, 1, 0, true); //Ret: String
        },
        ExtractStringFromException: function(a0/*Object*/) { 
            return CS.Call(4, 1, 1, true, a0); //Ret: String
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 1, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$StackTraceUtility);

// UnityEngine.UnityException
var UnityEngine$UnityException = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.UnityException",
    Kind: "Class",
    baseTypeName: "System.SystemException",
    interfaceNames: ["System.Runtime.Serialization.ISerializable", "System.Runtime.InteropServices._Exception"],
    definition: {
        ctor: function() { CS.Call(5, 2, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 2, 1, true, this, a0); },
        ctor$$String$$Exception: function(a0, a1) { CS.Call(5, 2, 2, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$UnityException);

// UnityEngine.MissingComponentException
var UnityEngine$MissingComponentException = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MissingComponentException",
    Kind: "Class",
    baseTypeName: "System.SystemException",
    interfaceNames: ["System.Runtime.Serialization.ISerializable", "System.Runtime.InteropServices._Exception"],
    definition: {
        ctor: function() { CS.Call(5, 3, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 3, 1, true, this, a0); },
        ctor$$String$$Exception: function(a0, a1) { CS.Call(5, 3, 2, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MissingComponentException);

// UnityEngine.UnassignedReferenceException
var UnityEngine$UnassignedReferenceException = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.UnassignedReferenceException",
    Kind: "Class",
    baseTypeName: "System.SystemException",
    interfaceNames: ["System.Runtime.Serialization.ISerializable", "System.Runtime.InteropServices._Exception"],
    definition: {
        ctor: function() { CS.Call(5, 4, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 4, 1, true, this, a0); },
        ctor$$String$$Exception: function(a0, a1) { CS.Call(5, 4, 2, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$UnassignedReferenceException);

// UnityEngine.MissingReferenceException
var UnityEngine$MissingReferenceException = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MissingReferenceException",
    Kind: "Class",
    baseTypeName: "System.SystemException",
    interfaceNames: ["System.Runtime.Serialization.ISerializable", "System.Runtime.InteropServices._Exception"],
    definition: {
        ctor: function() { CS.Call(5, 5, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 5, 1, true, this, a0); },
        ctor$$String$$Exception: function(a0, a1) { CS.Call(5, 5, 2, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MissingReferenceException);

// UnityEngine.TextGenerationSettings
var UnityEngine$TextGenerationSettings = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.TextGenerationSettings",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        font: {
            get: function() { return CS.Call(0, 6, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 0, false, this, v); }
        },
        color: {
            get: function() { return CS.Call(0, 6, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 1, false, this, v); }
        },
        fontSize: {
            get: function() { return CS.Call(0, 6, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 2, false, this, v); }
        },
        lineSpacing: {
            get: function() { return CS.Call(0, 6, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 3, false, this, v); }
        },
        richText: {
            get: function() { return CS.Call(0, 6, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 4, false, this, v); }
        },
        scaleFactor: {
            get: function() { return CS.Call(0, 6, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 5, false, this, v); }
        },
        fontStyle: {
            get: function() { return CS.Call(0, 6, 6, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 6, false, this, v); }
        },
        textAnchor: {
            get: function() { return CS.Call(0, 6, 7, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 7, false, this, v); }
        },
        resizeTextForBestFit: {
            get: function() { return CS.Call(0, 6, 8, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 8, false, this, v); }
        },
        resizeTextMinSize: {
            get: function() { return CS.Call(0, 6, 9, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 9, false, this, v); }
        },
        resizeTextMaxSize: {
            get: function() { return CS.Call(0, 6, 10, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 10, false, this, v); }
        },
        updateBounds: {
            get: function() { return CS.Call(0, 6, 11, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 11, false, this, v); }
        },
        verticalOverflow: {
            get: function() { return CS.Call(0, 6, 12, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 12, false, this, v); }
        },
        horizontalOverflow: {
            get: function() { return CS.Call(0, 6, 13, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 13, false, this, v); }
        },
        generationExtents: {
            get: function() { return CS.Call(0, 6, 14, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 14, false, this, v); }
        },
        pivot: {
            get: function() { return CS.Call(0, 6, 15, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 15, false, this, v); }
        },
        generateOutOfBounds: {
            get: function() { return CS.Call(0, 6, 16, false, this); }, 
            set: function(v) { return CS.Call(1, 6, 16, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 6, 0, true, this); },
        Equals$$TextGenerationSettings: function(a0/*TextGenerationSettings*/) { 
            return CS.Call(4, 6, 0, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$TextGenerationSettings);

// UnityEngine.TrackedReference
var UnityEngine$TrackedReference = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.TrackedReference",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        op_Equality: function(a0/*TrackedReference*/, a1/*TrackedReference*/) { 
            return CS.Call(4, 7, 2, true, a0, a1); //Ret: Boolean
        },
        op_Implicit: function(a0/*TrackedReference*/) { 
            return CS.Call(4, 7, 3, true, a0); //Ret: Boolean
        },
        op_Inequality: function(a0/*TrackedReference*/, a1/*TrackedReference*/) { 
            return CS.Call(4, 7, 4, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 7, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 7, 1, false, this); //Ret: Int32
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$TrackedReference);

// UnityEngine.WWW
var UnityEngine$WWW = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WWW",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.IDisposable"],
    staticDefinition: {
        EscapeURL$$String$$Encoding: function(a0/*String*/, a1/*Encoding*/) { 
            return CS.Call(4, 8, 10, true, a0, a1); //Ret: String
        },
        EscapeURL$$String: function(a0/*String*/) { 
            return CS.Call(4, 8, 11, true, a0); //Ret: String
        },
        LoadFromCacheOrDownload$$String$$Int32$$UInt32: function(a0/*String*/, a1/*Int32*/, a2/*UInt32*/) { 
            return CS.Call(4, 8, 12, true, a0, a1, a2); //Ret: WWW
        },
        LoadFromCacheOrDownload$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 8, 13, true, a0, a1); //Ret: WWW
        },
        UnEscapeURL$$String$$Encoding: function(a0/*String*/, a1/*Encoding*/) { 
            return CS.Call(4, 8, 14, true, a0, a1); //Ret: String
        },
        UnEscapeURL$$String: function(a0/*String*/) { 
            return CS.Call(4, 8, 15, true, a0); //Ret: String
        },
    },
    definition: {
        ctor$$String: function(a0) { CS.Call(5, 8, 0, true, this, a0); },
        ctor$$String$$WWWForm: function(a0, a1) { CS.Call(5, 8, 1, true, this, a0, a1); },
        ctor$$String$$Byte$Array: function(a0, a1) { CS.Call(5, 8, 2, true, this, a0, a1); },
        ctor$$String$$Byte$Array$$Dictionary$2$String$String: function(a0, a1, a2) { CS.Call(5, 8, 3, true, this, a0, a1, a2); },
        get_responseHeaders: function() { return CS.Call(2, 8, 0, false, this); },
        set_responseHeaders: function(v) { return CS.Call(3, 8, 0, false, this, v); },
        get_text: function() { return CS.Call(2, 8, 1, false, this); },
        set_text: function(v) { return CS.Call(3, 8, 1, false, this, v); },
        get_bytes: function() { return CS.Call(2, 8, 2, false, this); },
        set_bytes: function(v) { return CS.Call(3, 8, 2, false, this, v); },
        get_size: function() { return CS.Call(2, 8, 3, false, this); },
        set_size: function(v) { return CS.Call(3, 8, 3, false, this, v); },
        get_error: function() { return CS.Call(2, 8, 4, false, this); },
        set_error: function(v) { return CS.Call(3, 8, 4, false, this, v); },
        get_texture: function() { return CS.Call(2, 8, 5, false, this); },
        set_texture: function(v) { return CS.Call(3, 8, 5, false, this, v); },
        get_textureNonReadable: function() { return CS.Call(2, 8, 6, false, this); },
        set_textureNonReadable: function(v) { return CS.Call(3, 8, 6, false, this, v); },
        get_audioClip: function() { return CS.Call(2, 8, 7, false, this); },
        set_audioClip: function(v) { return CS.Call(3, 8, 7, false, this, v); },
        get_isDone: function() { return CS.Call(2, 8, 8, false, this); },
        set_isDone: function(v) { return CS.Call(3, 8, 8, false, this, v); },
        get_progress: function() { return CS.Call(2, 8, 9, false, this); },
        set_progress: function(v) { return CS.Call(3, 8, 9, false, this, v); },
        get_uploadProgress: function() { return CS.Call(2, 8, 10, false, this); },
        set_uploadProgress: function(v) { return CS.Call(3, 8, 10, false, this, v); },
        get_bytesDownloaded: function() { return CS.Call(2, 8, 11, false, this); },
        set_bytesDownloaded: function(v) { return CS.Call(3, 8, 11, false, this, v); },
        get_url: function() { return CS.Call(2, 8, 12, false, this); },
        set_url: function(v) { return CS.Call(3, 8, 12, false, this, v); },
        get_assetBundle: function() { return CS.Call(2, 8, 13, false, this); },
        set_assetBundle: function(v) { return CS.Call(3, 8, 13, false, this, v); },
        get_threadPriority: function() { return CS.Call(2, 8, 14, false, this); },
        set_threadPriority: function(v) { return CS.Call(3, 8, 14, false, this, v); },
        Dispose: function() { 
            return CS.Call(4, 8, 0, false, this); //Ret: Void
        },
        GetAudioClip$$Boolean$$Boolean$$AudioType: function(a0/*Boolean*/, a1/*Boolean*/, a2/*AudioType*/) { 
            return CS.Call(4, 8, 1, false, this, a0, a1, a2); //Ret: AudioClip
        },
        GetAudioClip$$Boolean$$Boolean: function(a0/*Boolean*/, a1/*Boolean*/) { 
            return CS.Call(4, 8, 2, false, this, a0, a1); //Ret: AudioClip
        },
        GetAudioClip$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 8, 3, false, this, a0); //Ret: AudioClip
        },
        GetAudioClipCompressed$$Boolean$$AudioType: function(a0/*Boolean*/, a1/*AudioType*/) { 
            return CS.Call(4, 8, 4, false, this, a0, a1); //Ret: AudioClip
        },
        GetAudioClipCompressed$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 8, 5, false, this, a0); //Ret: AudioClip
        },
        GetAudioClipCompressed: function() { 
            return CS.Call(4, 8, 6, false, this); //Ret: AudioClip
        },
        InitWWW: function(a0/*String*/, a1/*Byte[]*/, a2/*String[]*/) { 
            return CS.Call(4, 8, 7, false, this, a0, a1, a2); //Ret: Void
        },
        LoadImageIntoTexture: function(a0/*Texture2D*/) { 
            return CS.Call(4, 8, 8, false, this, a0); //Ret: Void
        },
        LoadUnityWeb: function() { 
            return CS.Call(4, 8, 9, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WWW);

// UnityEngine.AssetBundleCreateRequest
var UnityEngine$AssetBundleCreateRequest = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AssetBundleCreateRequest",
    Kind: "Class",
    baseTypeName: "UnityEngine.AsyncOperation",
    definition: {
        ctor: function() { CS.Call(5, 9, 0, true, this); },
        get_assetBundle: function() { return CS.Call(2, 9, 0, false, this); },
        set_assetBundle: function(v) { return CS.Call(3, 9, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AssetBundleCreateRequest);

// UnityEngine.AssetBundleRequest
var UnityEngine$AssetBundleRequest = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AssetBundleRequest",
    Kind: "Class",
    baseTypeName: "UnityEngine.AsyncOperation",
    definition: {
        ctor: function() { CS.Call(5, 10, 0, true, this); },
        get_asset: function() { return CS.Call(2, 10, 0, false, this); },
        set_asset: function(v) { return CS.Call(3, 10, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AssetBundleRequest);

// UnityEngine.AssetBundle
var UnityEngine$AssetBundle = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AssetBundle",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        CreateFromFile$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 11, 7, true, a0, a1); //Ret: AssetBundle
        },
        CreateFromFile$$String: function(a0/*String*/) { 
            return CS.Call(4, 11, 8, true, a0); //Ret: AssetBundle
        },
        CreateFromMemory: function(a0/*Byte[]*/) { 
            return CS.Call(4, 11, 9, true, a0); //Ret: AssetBundleCreateRequest
        },
        CreateFromMemoryImmediate: function(a0/*Byte[]*/) { 
            return CS.Call(4, 11, 10, true, a0); //Ret: AssetBundle
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 11, 0, true, this); },
        get_mainAsset: function() { return CS.Call(2, 11, 0, false, this); },
        set_mainAsset: function(v) { return CS.Call(3, 11, 0, false, this, v); },
        Contains: function(a0/*String*/) { 
            return CS.Call(4, 11, 0, false, this, a0); //Ret: Boolean
        },
        Load$$String$$Type: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 11, 1, false, this, a0, a1.get_FullName()); //Ret: Object
        },
        Load$$String: function(a0/*String*/) { 
            return CS.Call(4, 11, 2, false, this, a0); //Ret: Object
        },
        LoadAll$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 11, 3, false, this, a0.get_FullName()); //Ret: Object[]
        },
        LoadAll: function() { 
            return CS.Call(4, 11, 4, false, this); //Ret: Object[]
        },
        LoadAsync: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 11, 5, false, this, a0, a1.get_FullName()); //Ret: AssetBundleRequest
        },
        Unload: function(a0/*Boolean*/) { 
            return CS.Call(4, 11, 6, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AssetBundle);

// UnityEngine.LayerMask
var UnityEngine$LayerMask = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LayerMask",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        GetMask: function(a0/*String[]*/) { 
            return CS.Call(4, 12, 0, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Int32
        },
        LayerToName: function(a0/*Int32*/) { 
            return CS.Call(4, 12, 1, true, a0); //Ret: String
        },
        NameToLayer: function(a0/*String*/) { 
            return CS.Call(4, 12, 2, true, a0); //Ret: Int32
        },
        op_Implicit$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 12, 3, true, a0); //Ret: LayerMask
        },
        op_Implicit$$LayerMask: function(a0/*LayerMask*/) { 
            return CS.Call(4, 12, 4, true, a0); //Ret: Int32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 12, 0, true, this); },
        get_value: function() { return CS.Call(2, 12, 0, false, this); },
        set_value: function(v) { return CS.Call(3, 12, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LayerMask);

// UnityEngine.SystemInfo
var UnityEngine$SystemInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SystemInfo",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_operatingSystem: function() { return CS.Call(2, 13, 0, true); },
        set_operatingSystem: function(v) { return CS.Call(3, 13, 0, true, v); },
        get_processorType: function() { return CS.Call(2, 13, 1, true); },
        set_processorType: function(v) { return CS.Call(3, 13, 1, true, v); },
        get_processorCount: function() { return CS.Call(2, 13, 2, true); },
        set_processorCount: function(v) { return CS.Call(3, 13, 2, true, v); },
        get_systemMemorySize: function() { return CS.Call(2, 13, 3, true); },
        set_systemMemorySize: function(v) { return CS.Call(3, 13, 3, true, v); },
        get_graphicsMemorySize: function() { return CS.Call(2, 13, 4, true); },
        set_graphicsMemorySize: function(v) { return CS.Call(3, 13, 4, true, v); },
        get_graphicsDeviceName: function() { return CS.Call(2, 13, 5, true); },
        set_graphicsDeviceName: function(v) { return CS.Call(3, 13, 5, true, v); },
        get_graphicsDeviceVendor: function() { return CS.Call(2, 13, 6, true); },
        set_graphicsDeviceVendor: function(v) { return CS.Call(3, 13, 6, true, v); },
        get_graphicsDeviceID: function() { return CS.Call(2, 13, 7, true); },
        set_graphicsDeviceID: function(v) { return CS.Call(3, 13, 7, true, v); },
        get_graphicsDeviceVendorID: function() { return CS.Call(2, 13, 8, true); },
        set_graphicsDeviceVendorID: function(v) { return CS.Call(3, 13, 8, true, v); },
        get_graphicsDeviceVersion: function() { return CS.Call(2, 13, 9, true); },
        set_graphicsDeviceVersion: function(v) { return CS.Call(3, 13, 9, true, v); },
        get_graphicsShaderLevel: function() { return CS.Call(2, 13, 10, true); },
        set_graphicsShaderLevel: function(v) { return CS.Call(3, 13, 10, true, v); },
        get_graphicsPixelFillrate: function() { return CS.Call(2, 13, 11, true); },
        set_graphicsPixelFillrate: function(v) { return CS.Call(3, 13, 11, true, v); },
        get_supportsShadows: function() { return CS.Call(2, 13, 12, true); },
        set_supportsShadows: function(v) { return CS.Call(3, 13, 12, true, v); },
        get_supportsRenderTextures: function() { return CS.Call(2, 13, 13, true); },
        set_supportsRenderTextures: function(v) { return CS.Call(3, 13, 13, true, v); },
        get_supportsRenderToCubemap: function() { return CS.Call(2, 13, 14, true); },
        set_supportsRenderToCubemap: function(v) { return CS.Call(3, 13, 14, true, v); },
        get_supportsImageEffects: function() { return CS.Call(2, 13, 15, true); },
        set_supportsImageEffects: function(v) { return CS.Call(3, 13, 15, true, v); },
        get_supports3DTextures: function() { return CS.Call(2, 13, 16, true); },
        set_supports3DTextures: function(v) { return CS.Call(3, 13, 16, true, v); },
        get_supportsComputeShaders: function() { return CS.Call(2, 13, 17, true); },
        set_supportsComputeShaders: function(v) { return CS.Call(3, 13, 17, true, v); },
        get_supportsInstancing: function() { return CS.Call(2, 13, 18, true); },
        set_supportsInstancing: function(v) { return CS.Call(3, 13, 18, true, v); },
        get_supportsSparseTextures: function() { return CS.Call(2, 13, 19, true); },
        set_supportsSparseTextures: function(v) { return CS.Call(3, 13, 19, true, v); },
        get_supportedRenderTargetCount: function() { return CS.Call(2, 13, 20, true); },
        set_supportedRenderTargetCount: function(v) { return CS.Call(3, 13, 20, true, v); },
        get_supportsStencil: function() { return CS.Call(2, 13, 21, true); },
        set_supportsStencil: function(v) { return CS.Call(3, 13, 21, true, v); },
        get_supportsVertexPrograms: function() { return CS.Call(2, 13, 22, true); },
        set_supportsVertexPrograms: function(v) { return CS.Call(3, 13, 22, true, v); },
        get_npotSupport: function() { return CS.Call(2, 13, 23, true); },
        set_npotSupport: function(v) { return CS.Call(3, 13, 23, true, v); },
        get_deviceUniqueIdentifier: function() { return CS.Call(2, 13, 24, true); },
        set_deviceUniqueIdentifier: function(v) { return CS.Call(3, 13, 24, true, v); },
        get_deviceName: function() { return CS.Call(2, 13, 25, true); },
        set_deviceName: function(v) { return CS.Call(3, 13, 25, true, v); },
        get_deviceModel: function() { return CS.Call(2, 13, 26, true); },
        set_deviceModel: function(v) { return CS.Call(3, 13, 26, true, v); },
        get_supportsAccelerometer: function() { return CS.Call(2, 13, 27, true); },
        set_supportsAccelerometer: function(v) { return CS.Call(3, 13, 27, true, v); },
        get_supportsGyroscope: function() { return CS.Call(2, 13, 28, true); },
        set_supportsGyroscope: function(v) { return CS.Call(3, 13, 28, true, v); },
        get_supportsLocationService: function() { return CS.Call(2, 13, 29, true); },
        set_supportsLocationService: function(v) { return CS.Call(3, 13, 29, true, v); },
        get_supportsVibration: function() { return CS.Call(2, 13, 30, true); },
        set_supportsVibration: function(v) { return CS.Call(3, 13, 30, true, v); },
        get_deviceType: function() { return CS.Call(2, 13, 31, true); },
        set_deviceType: function(v) { return CS.Call(3, 13, 31, true, v); },
        get_maxTextureSize: function() { return CS.Call(2, 13, 32, true); },
        set_maxTextureSize: function(v) { return CS.Call(3, 13, 32, true, v); },
        SupportsRenderTextureFormat: function(a0/*RenderTextureFormat*/) { 
            return CS.Call(4, 13, 0, true, a0); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 13, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SystemInfo);

// UnityEngine.WaitForSeconds
var UnityEngine$WaitForSeconds = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WaitForSeconds",
    Kind: "Class",
    baseTypeName: "UnityEngine.YieldInstruction",
    definition: {
        ctor: function(a0) { CS.Call(5, 14, 0, true, this, a0); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WaitForSeconds);

// UnityEngine.WaitForFixedUpdate
var UnityEngine$WaitForFixedUpdate = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WaitForFixedUpdate",
    Kind: "Class",
    baseTypeName: "UnityEngine.YieldInstruction",
    definition: {
        ctor: function() { CS.Call(5, 15, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WaitForFixedUpdate);

// UnityEngine.WaitForEndOfFrame
var UnityEngine$WaitForEndOfFrame = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WaitForEndOfFrame",
    Kind: "Class",
    baseTypeName: "UnityEngine.YieldInstruction",
    definition: {
        ctor: function() { CS.Call(5, 16, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WaitForEndOfFrame);

// UnityEngine.Coroutine
var UnityEngine$Coroutine = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Coroutine",
    Kind: "Class",
    baseTypeName: "UnityEngine.YieldInstruction",
};
jsb_ReplaceOrPushJsType(UnityEngine$Coroutine);

// UnityEngine.ScriptableObject
var UnityEngine$ScriptableObject = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ScriptableObject",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        CreateInstance$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 18, 0, true, a0.get_FullName()); //Ret: ScriptableObject
        },
        CreateInstance$$String: function(a0/*String*/) { 
            return CS.Call(4, 18, 1, true, a0); //Ret: ScriptableObject
        },
        CreateInstance$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 18, 2, true, native_t0); //Ret: T
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 18, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ScriptableObject);

// UnityEngine.ResourceRequest
var UnityEngine$ResourceRequest = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ResourceRequest",
    Kind: "Class",
    baseTypeName: "UnityEngine.AsyncOperation",
    definition: {
        ctor: function() { CS.Call(5, 19, 0, true, this); },
        get_asset: function() { return CS.Call(2, 19, 0, false, this); },
        set_asset: function(v) { return CS.Call(3, 19, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ResourceRequest);

// UnityEngine.Resources
var UnityEngine$Resources = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Resources",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        FindObjectsOfTypeAll$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 20, 0, true, a0.get_FullName()); //Ret: Object[]
        },
        FindObjectsOfTypeAll$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 20, 1, true, native_t0); //Ret: T[]
        },
        GetBuiltinResource$$Type$$String: function(a0/*Type*/, a1/*String*/) { 
            return CS.Call(4, 20, 2, true, a0.get_FullName(), a1); //Ret: Object
        },
        GetBuiltinResource$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 20, 3, true, native_t0, a0); //Ret: T
        },
        Load$$String$$Type: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 20, 4, true, a0, a1.get_FullName()); //Ret: Object
        },
        Load$$String: function(a0/*String*/) { 
            return CS.Call(4, 20, 5, true, a0); //Ret: Object
        },
        Load$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 20, 6, true, native_t0, a0); //Ret: T
        },
        LoadAll$$String$$Type: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 20, 7, true, a0, a1.get_FullName()); //Ret: Object[]
        },
        LoadAll$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 20, 8, true, native_t0, a0); //Ret: T[]
        },
        LoadAll$$String: function(a0/*String*/) { 
            return CS.Call(4, 20, 9, true, a0); //Ret: Object[]
        },
        LoadAssetAtPath$$String$$Type: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 20, 10, true, a0, a1.get_FullName()); //Ret: Object
        },
        LoadAssetAtPath$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 20, 11, true, native_t0, a0); //Ret: T
        },
        LoadAsync$$String$$Type: function(a0/*String*/, a1/*Type*/) { 
            return CS.Call(4, 20, 12, true, a0, a1.get_FullName()); //Ret: ResourceRequest
        },
        LoadAsync$1$$String: function(t0, a0/*String*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 20, 13, true, native_t0, a0); //Ret: ResourceRequest
        },
        LoadAsync$$String: function(a0/*String*/) { 
            return CS.Call(4, 20, 14, true, a0); //Ret: ResourceRequest
        },
        UnloadAsset: function(a0/*Object*/) { 
            return CS.Call(4, 20, 15, true, a0); //Ret: Void
        },
        UnloadUnusedAssets: function() { 
            return CS.Call(4, 20, 16, true); //Ret: AsyncOperation
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 20, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Resources);

// UnityEngine.Profiler
var UnityEngine$Profiler = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Profiler",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_supported: function() { return CS.Call(2, 21, 0, true); },
        set_supported: function(v) { return CS.Call(3, 21, 0, true, v); },
        get_logFile: function() { return CS.Call(2, 21, 1, true); },
        set_logFile: function(v) { return CS.Call(3, 21, 1, true, v); },
        get_enableBinaryLog: function() { return CS.Call(2, 21, 2, true); },
        set_enableBinaryLog: function(v) { return CS.Call(3, 21, 2, true, v); },
        get_enabled: function() { return CS.Call(2, 21, 3, true); },
        set_enabled: function(v) { return CS.Call(3, 21, 3, true, v); },
        get_usedHeapSize: function() { return CS.Call(2, 21, 4, true); },
        set_usedHeapSize: function(v) { return CS.Call(3, 21, 4, true, v); },
        AddFramesFromFile: function(a0/*String*/) { 
            return CS.Call(4, 21, 0, true, a0); //Ret: Void
        },
        BeginSample$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 21, 1, true, a0, a1); //Ret: Void
        },
        BeginSample$$String: function(a0/*String*/) { 
            return CS.Call(4, 21, 2, true, a0); //Ret: Void
        },
        EndSample: function() { 
            return CS.Call(4, 21, 3, true); //Ret: Void
        },
        GetMonoHeapSize: function() { 
            return CS.Call(4, 21, 4, true); //Ret: UInt32
        },
        GetMonoUsedSize: function() { 
            return CS.Call(4, 21, 5, true); //Ret: UInt32
        },
        GetRuntimeMemorySize: function(a0/*Object*/) { 
            return CS.Call(4, 21, 6, true, a0); //Ret: Int32
        },
        GetTotalAllocatedMemory: function() { 
            return CS.Call(4, 21, 7, true); //Ret: UInt32
        },
        GetTotalReservedMemory: function() { 
            return CS.Call(4, 21, 8, true); //Ret: UInt32
        },
        GetTotalUnusedReservedMemory: function() { 
            return CS.Call(4, 21, 9, true); //Ret: UInt32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 21, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Profiler);

// UnityEngine.CrashReport
var UnityEngine$CrashReport = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CrashReport",
    Kind: "Class",
    baseTypeName: "System.Object",
    fields: {
        time: {
            get: function() { return CS.Call(0, 22, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 22, 0, false, this, v); }
        },
        text: {
            get: function() { return CS.Call(0, 22, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 22, 1, false, this, v); }
        },
    },
    staticDefinition: {
        get_reports: function() { return CS.Call(2, 22, 0, true); },
        set_reports: function(v) { return CS.Call(3, 22, 0, true, v); },
        get_lastReport: function() { return CS.Call(2, 22, 1, true); },
        set_lastReport: function(v) { return CS.Call(3, 22, 1, true, v); },
        RemoveAll: function() { 
            return CS.Call(4, 22, 1, true); //Ret: Void
        },
    },
    definition: {
        Remove: function() { 
            return CS.Call(4, 22, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CrashReport);

// UnityEngine.OcclusionArea
var UnityEngine$OcclusionArea = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.OcclusionArea",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 23, 0, true, this); },
        get_center: function() { return CS.Call(2, 23, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 23, 0, false, this, v); },
        get_size: function() { return CS.Call(2, 23, 1, false, this); },
        set_size: function(v) { return CS.Call(3, 23, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$OcclusionArea);

// UnityEngine.OcclusionPortal
var UnityEngine$OcclusionPortal = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.OcclusionPortal",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 24, 0, true, this); },
        get_open: function() { return CS.Call(2, 24, 0, false, this); },
        set_open: function(v) { return CS.Call(3, 24, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$OcclusionPortal);

// UnityEngine.RenderSettings
var UnityEngine$RenderSettings = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RenderSettings",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        get_fog: function() { return CS.Call(2, 25, 0, true); },
        set_fog: function(v) { return CS.Call(3, 25, 0, true, v); },
        get_fogMode: function() { return CS.Call(2, 25, 1, true); },
        set_fogMode: function(v) { return CS.Call(3, 25, 1, true, v); },
        get_fogColor: function() { return CS.Call(2, 25, 2, true); },
        set_fogColor: function(v) { return CS.Call(3, 25, 2, true, v); },
        get_fogDensity: function() { return CS.Call(2, 25, 3, true); },
        set_fogDensity: function(v) { return CS.Call(3, 25, 3, true, v); },
        get_fogStartDistance: function() { return CS.Call(2, 25, 4, true); },
        set_fogStartDistance: function(v) { return CS.Call(3, 25, 4, true, v); },
        get_fogEndDistance: function() { return CS.Call(2, 25, 5, true); },
        set_fogEndDistance: function(v) { return CS.Call(3, 25, 5, true, v); },
        get_ambientLight: function() { return CS.Call(2, 25, 6, true); },
        set_ambientLight: function(v) { return CS.Call(3, 25, 6, true, v); },
        get_haloStrength: function() { return CS.Call(2, 25, 7, true); },
        set_haloStrength: function(v) { return CS.Call(3, 25, 7, true, v); },
        get_flareStrength: function() { return CS.Call(2, 25, 8, true); },
        set_flareStrength: function(v) { return CS.Call(3, 25, 8, true, v); },
        get_flareFadeSpeed: function() { return CS.Call(2, 25, 9, true); },
        set_flareFadeSpeed: function(v) { return CS.Call(3, 25, 9, true, v); },
        get_skybox: function() { return CS.Call(2, 25, 10, true); },
        set_skybox: function(v) { return CS.Call(3, 25, 10, true, v); },
    },
    definition: {
        ctor: function() { CS.Call(5, 25, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RenderSettings);

// UnityEngine.QualitySettings
var UnityEngine$QualitySettings = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.QualitySettings",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        get_names: function() { return CS.Call(2, 26, 0, true); },
        set_names: function(v) { return CS.Call(3, 26, 0, true, v); },
        get_pixelLightCount: function() { return CS.Call(2, 26, 1, true); },
        set_pixelLightCount: function(v) { return CS.Call(3, 26, 1, true, v); },
        get_shadowProjection: function() { return CS.Call(2, 26, 2, true); },
        set_shadowProjection: function(v) { return CS.Call(3, 26, 2, true, v); },
        get_shadowCascades: function() { return CS.Call(2, 26, 3, true); },
        set_shadowCascades: function(v) { return CS.Call(3, 26, 3, true, v); },
        get_shadowDistance: function() { return CS.Call(2, 26, 4, true); },
        set_shadowDistance: function(v) { return CS.Call(3, 26, 4, true, v); },
        get_masterTextureLimit: function() { return CS.Call(2, 26, 5, true); },
        set_masterTextureLimit: function(v) { return CS.Call(3, 26, 5, true, v); },
        get_anisotropicFiltering: function() { return CS.Call(2, 26, 6, true); },
        set_anisotropicFiltering: function(v) { return CS.Call(3, 26, 6, true, v); },
        get_lodBias: function() { return CS.Call(2, 26, 7, true); },
        set_lodBias: function(v) { return CS.Call(3, 26, 7, true, v); },
        get_maximumLODLevel: function() { return CS.Call(2, 26, 8, true); },
        set_maximumLODLevel: function(v) { return CS.Call(3, 26, 8, true, v); },
        get_particleRaycastBudget: function() { return CS.Call(2, 26, 9, true); },
        set_particleRaycastBudget: function(v) { return CS.Call(3, 26, 9, true, v); },
        get_softVegetation: function() { return CS.Call(2, 26, 10, true); },
        set_softVegetation: function(v) { return CS.Call(3, 26, 10, true, v); },
        get_maxQueuedFrames: function() { return CS.Call(2, 26, 11, true); },
        set_maxQueuedFrames: function(v) { return CS.Call(3, 26, 11, true, v); },
        get_vSyncCount: function() { return CS.Call(2, 26, 12, true); },
        set_vSyncCount: function(v) { return CS.Call(3, 26, 12, true, v); },
        get_antiAliasing: function() { return CS.Call(2, 26, 13, true); },
        set_antiAliasing: function(v) { return CS.Call(3, 26, 13, true, v); },
        get_desiredColorSpace: function() { return CS.Call(2, 26, 14, true); },
        set_desiredColorSpace: function(v) { return CS.Call(3, 26, 14, true, v); },
        get_activeColorSpace: function() { return CS.Call(2, 26, 15, true); },
        set_activeColorSpace: function(v) { return CS.Call(3, 26, 15, true, v); },
        get_blendWeights: function() { return CS.Call(2, 26, 16, true); },
        set_blendWeights: function(v) { return CS.Call(3, 26, 16, true, v); },
        DecreaseLevel$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 26, 0, true, a0); //Ret: Void
        },
        DecreaseLevel: function() { 
            return CS.Call(4, 26, 1, true); //Ret: Void
        },
        GetQualityLevel: function() { 
            return CS.Call(4, 26, 2, true); //Ret: Int32
        },
        IncreaseLevel$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 26, 3, true, a0); //Ret: Void
        },
        IncreaseLevel: function() { 
            return CS.Call(4, 26, 4, true); //Ret: Void
        },
        SetQualityLevel$$Int32$$Boolean: function(a0/*Int32*/, a1/*Boolean*/) { 
            return CS.Call(4, 26, 5, true, a0, a1); //Ret: Void
        },
        SetQualityLevel$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 26, 6, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 26, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$QualitySettings);

// UnityEngine.MeshFilter
var UnityEngine$MeshFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MeshFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 27, 0, true, this); },
        get_mesh: function() { return CS.Call(2, 27, 0, false, this); },
        set_mesh: function(v) { return CS.Call(3, 27, 0, false, this, v); },
        get_sharedMesh: function() { return CS.Call(2, 27, 1, false, this); },
        set_sharedMesh: function(v) { return CS.Call(3, 27, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MeshFilter);

// UnityEngine.CombineInstance
var UnityEngine$CombineInstance = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CombineInstance",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 28, 0, true, this); },
        get_mesh: function() { return CS.Call(2, 28, 0, false, this); },
        set_mesh: function(v) { return CS.Call(3, 28, 0, false, this, v); },
        get_subMeshIndex: function() { return CS.Call(2, 28, 1, false, this); },
        set_subMeshIndex: function(v) { return CS.Call(3, 28, 1, false, this, v); },
        get_transform: function() { return CS.Call(2, 28, 2, false, this); },
        set_transform: function(v) { return CS.Call(3, 28, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CombineInstance);

// UnityEngine.Mesh
var UnityEngine$Mesh = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Mesh",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 29, 0, true, this); },
        get_isReadable: function() { return CS.Call(2, 29, 0, false, this); },
        set_isReadable: function(v) { return CS.Call(3, 29, 0, false, this, v); },
        get_vertices: function() { return CS.Call(2, 29, 1, false, this); },
        set_vertices: function(v) { return CS.Call(3, 29, 1, false, this, v); },
        get_normals: function() { return CS.Call(2, 29, 2, false, this); },
        set_normals: function(v) { return CS.Call(3, 29, 2, false, this, v); },
        get_tangents: function() { return CS.Call(2, 29, 3, false, this); },
        set_tangents: function(v) { return CS.Call(3, 29, 3, false, this, v); },
        get_uv: function() { return CS.Call(2, 29, 4, false, this); },
        set_uv: function(v) { return CS.Call(3, 29, 4, false, this, v); },
        get_uv2: function() { return CS.Call(2, 29, 5, false, this); },
        set_uv2: function(v) { return CS.Call(3, 29, 5, false, this, v); },
        get_uv1: function() { return CS.Call(2, 29, 6, false, this); },
        set_uv1: function(v) { return CS.Call(3, 29, 6, false, this, v); },
        get_bounds: function() { return CS.Call(2, 29, 7, false, this); },
        set_bounds: function(v) { return CS.Call(3, 29, 7, false, this, v); },
        get_colors: function() { return CS.Call(2, 29, 8, false, this); },
        set_colors: function(v) { return CS.Call(3, 29, 8, false, this, v); },
        get_colors32: function() { return CS.Call(2, 29, 9, false, this); },
        set_colors32: function(v) { return CS.Call(3, 29, 9, false, this, v); },
        get_triangles: function() { return CS.Call(2, 29, 10, false, this); },
        set_triangles: function(v) { return CS.Call(3, 29, 10, false, this, v); },
        get_vertexCount: function() { return CS.Call(2, 29, 11, false, this); },
        set_vertexCount: function(v) { return CS.Call(3, 29, 11, false, this, v); },
        get_subMeshCount: function() { return CS.Call(2, 29, 12, false, this); },
        set_subMeshCount: function(v) { return CS.Call(3, 29, 12, false, this, v); },
        get_boneWeights: function() { return CS.Call(2, 29, 13, false, this); },
        set_boneWeights: function(v) { return CS.Call(3, 29, 13, false, this, v); },
        get_bindposes: function() { return CS.Call(2, 29, 14, false, this); },
        set_bindposes: function(v) { return CS.Call(3, 29, 14, false, this, v); },
        get_blendShapeCount: function() { return CS.Call(2, 29, 15, false, this); },
        set_blendShapeCount: function(v) { return CS.Call(3, 29, 15, false, this, v); },
        Clear$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 29, 0, false, this, a0); //Ret: Void
        },
        Clear: function() { 
            return CS.Call(4, 29, 1, false, this); //Ret: Void
        },
        CombineMeshes$$CombineInstance$Array$$Boolean$$Boolean: function(a0/*CombineInstance[]*/, a1/*Boolean*/, a2/*Boolean*/) { 
            return CS.Call(4, 29, 2, false, this, a0, a1, a2); //Ret: Void
        },
        CombineMeshes$$CombineInstance$Array$$Boolean: function(a0/*CombineInstance[]*/, a1/*Boolean*/) { 
            return CS.Call(4, 29, 3, false, this, a0, a1); //Ret: Void
        },
        CombineMeshes$$CombineInstance$Array: function(a0/*CombineInstance[]*/) { 
            return CS.Call(4, 29, 4, false, this, a0); //Ret: Void
        },
        GetBlendShapeIndex: function(a0/*String*/) { 
            return CS.Call(4, 29, 5, false, this, a0); //Ret: Int32
        },
        GetBlendShapeName: function(a0/*Int32*/) { 
            return CS.Call(4, 29, 6, false, this, a0); //Ret: String
        },
        GetIndices: function(a0/*Int32*/) { 
            return CS.Call(4, 29, 7, false, this, a0); //Ret: Int32[]
        },
        GetTopology: function(a0/*Int32*/) { 
            return CS.Call(4, 29, 8, false, this, a0); //Ret: MeshTopology
        },
        GetTriangles: function(a0/*Int32*/) { 
            return CS.Call(4, 29, 9, false, this, a0); //Ret: Int32[]
        },
        MarkDynamic: function() { 
            return CS.Call(4, 29, 10, false, this); //Ret: Void
        },
        Optimize: function() { 
            return CS.Call(4, 29, 11, false, this); //Ret: Void
        },
        RecalculateBounds: function() { 
            return CS.Call(4, 29, 12, false, this); //Ret: Void
        },
        RecalculateNormals: function() { 
            return CS.Call(4, 29, 13, false, this); //Ret: Void
        },
        SetIndices: function(a0/*Int32[]*/, a1/*MeshTopology*/, a2/*Int32*/) { 
            return CS.Call(4, 29, 14, false, this, a0, a1, a2); //Ret: Void
        },
        SetTriangles: function(a0/*Int32[]*/, a1/*Int32*/) { 
            return CS.Call(4, 29, 15, false, this, a0, a1); //Ret: Void
        },
        UploadMeshData: function(a0/*Boolean*/) { 
            return CS.Call(4, 29, 16, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Mesh);

// UnityEngine.BoneWeight
var UnityEngine$BoneWeight = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.BoneWeight",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        op_Equality: function(a0/*BoneWeight*/, a1/*BoneWeight*/) { 
            return CS.Call(4, 30, 2, true, a0, a1); //Ret: Boolean
        },
        op_Inequality: function(a0/*BoneWeight*/, a1/*BoneWeight*/) { 
            return CS.Call(4, 30, 3, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 30, 0, true, this); },
        get_weight0: function() { return CS.Call(2, 30, 0, false, this); },
        set_weight0: function(v) { return CS.Call(3, 30, 0, false, this, v); },
        get_weight1: function() { return CS.Call(2, 30, 1, false, this); },
        set_weight1: function(v) { return CS.Call(3, 30, 1, false, this, v); },
        get_weight2: function() { return CS.Call(2, 30, 2, false, this); },
        set_weight2: function(v) { return CS.Call(3, 30, 2, false, this, v); },
        get_weight3: function() { return CS.Call(2, 30, 3, false, this); },
        set_weight3: function(v) { return CS.Call(3, 30, 3, false, this, v); },
        get_boneIndex0: function() { return CS.Call(2, 30, 4, false, this); },
        set_boneIndex0: function(v) { return CS.Call(3, 30, 4, false, this, v); },
        get_boneIndex1: function() { return CS.Call(2, 30, 5, false, this); },
        set_boneIndex1: function(v) { return CS.Call(3, 30, 5, false, this, v); },
        get_boneIndex2: function() { return CS.Call(2, 30, 6, false, this); },
        set_boneIndex2: function(v) { return CS.Call(3, 30, 6, false, this, v); },
        get_boneIndex3: function() { return CS.Call(2, 30, 7, false, this); },
        set_boneIndex3: function(v) { return CS.Call(3, 30, 7, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 30, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 30, 1, false, this); //Ret: Int32
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$BoneWeight);

// UnityEngine.SkinnedMeshRenderer
var UnityEngine$SkinnedMeshRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SkinnedMeshRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 31, 0, true, this); },
        get_bones: function() { return CS.Call(2, 31, 0, false, this); },
        set_bones: function(v) { return CS.Call(3, 31, 0, false, this, v); },
        get_rootBone: function() { return CS.Call(2, 31, 1, false, this); },
        set_rootBone: function(v) { return CS.Call(3, 31, 1, false, this, v); },
        get_quality: function() { return CS.Call(2, 31, 2, false, this); },
        set_quality: function(v) { return CS.Call(3, 31, 2, false, this, v); },
        get_sharedMesh: function() { return CS.Call(2, 31, 3, false, this); },
        set_sharedMesh: function(v) { return CS.Call(3, 31, 3, false, this, v); },
        get_updateWhenOffscreen: function() { return CS.Call(2, 31, 4, false, this); },
        set_updateWhenOffscreen: function(v) { return CS.Call(3, 31, 4, false, this, v); },
        get_localBounds: function() { return CS.Call(2, 31, 5, false, this); },
        set_localBounds: function(v) { return CS.Call(3, 31, 5, false, this, v); },
        BakeMesh: function(a0/*Mesh*/) { 
            return CS.Call(4, 31, 0, false, this, a0); //Ret: Void
        },
        GetBlendShapeWeight: function(a0/*Int32*/) { 
            return CS.Call(4, 31, 1, false, this, a0); //Ret: Single
        },
        SetBlendShapeWeight: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 31, 2, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SkinnedMeshRenderer);

// UnityEngine.Flare
var UnityEngine$Flare = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Flare",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 32, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Flare);

// UnityEngine.LensFlare
var UnityEngine$LensFlare = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LensFlare",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 33, 0, true, this); },
        get_flare: function() { return CS.Call(2, 33, 0, false, this); },
        set_flare: function(v) { return CS.Call(3, 33, 0, false, this, v); },
        get_brightness: function() { return CS.Call(2, 33, 1, false, this); },
        set_brightness: function(v) { return CS.Call(3, 33, 1, false, this, v); },
        get_fadeSpeed: function() { return CS.Call(2, 33, 2, false, this); },
        set_fadeSpeed: function(v) { return CS.Call(3, 33, 2, false, this, v); },
        get_color: function() { return CS.Call(2, 33, 3, false, this); },
        set_color: function(v) { return CS.Call(3, 33, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LensFlare);

// UnityEngine.Renderer
var UnityEngine$Renderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Renderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 34, 0, true, this); },
        get_isPartOfStaticBatch: function() { return CS.Call(2, 34, 0, false, this); },
        set_isPartOfStaticBatch: function(v) { return CS.Call(3, 34, 0, false, this, v); },
        get_worldToLocalMatrix: function() { return CS.Call(2, 34, 1, false, this); },
        set_worldToLocalMatrix: function(v) { return CS.Call(3, 34, 1, false, this, v); },
        get_localToWorldMatrix: function() { return CS.Call(2, 34, 2, false, this); },
        set_localToWorldMatrix: function(v) { return CS.Call(3, 34, 2, false, this, v); },
        get_enabled: function() { return CS.Call(2, 34, 3, false, this); },
        set_enabled: function(v) { return CS.Call(3, 34, 3, false, this, v); },
        get_castShadows: function() { return CS.Call(2, 34, 4, false, this); },
        set_castShadows: function(v) { return CS.Call(3, 34, 4, false, this, v); },
        get_receiveShadows: function() { return CS.Call(2, 34, 5, false, this); },
        set_receiveShadows: function(v) { return CS.Call(3, 34, 5, false, this, v); },
        get_material: function() { return CS.Call(2, 34, 6, false, this); },
        set_material: function(v) { return CS.Call(3, 34, 6, false, this, v); },
        get_sharedMaterial: function() { return CS.Call(2, 34, 7, false, this); },
        set_sharedMaterial: function(v) { return CS.Call(3, 34, 7, false, this, v); },
        get_sharedMaterials: function() { return CS.Call(2, 34, 8, false, this); },
        set_sharedMaterials: function(v) { return CS.Call(3, 34, 8, false, this, v); },
        get_materials: function() { return CS.Call(2, 34, 9, false, this); },
        set_materials: function(v) { return CS.Call(3, 34, 9, false, this, v); },
        get_bounds: function() { return CS.Call(2, 34, 10, false, this); },
        set_bounds: function(v) { return CS.Call(3, 34, 10, false, this, v); },
        get_lightmapIndex: function() { return CS.Call(2, 34, 11, false, this); },
        set_lightmapIndex: function(v) { return CS.Call(3, 34, 11, false, this, v); },
        get_lightmapTilingOffset: function() { return CS.Call(2, 34, 12, false, this); },
        set_lightmapTilingOffset: function(v) { return CS.Call(3, 34, 12, false, this, v); },
        get_isVisible: function() { return CS.Call(2, 34, 13, false, this); },
        set_isVisible: function(v) { return CS.Call(3, 34, 13, false, this, v); },
        get_useLightProbes: function() { return CS.Call(2, 34, 14, false, this); },
        set_useLightProbes: function(v) { return CS.Call(3, 34, 14, false, this, v); },
        get_lightProbeAnchor: function() { return CS.Call(2, 34, 15, false, this); },
        set_lightProbeAnchor: function(v) { return CS.Call(3, 34, 15, false, this, v); },
        get_sortingLayerName: function() { return CS.Call(2, 34, 16, false, this); },
        set_sortingLayerName: function(v) { return CS.Call(3, 34, 16, false, this, v); },
        get_sortingLayerID: function() { return CS.Call(2, 34, 17, false, this); },
        set_sortingLayerID: function(v) { return CS.Call(3, 34, 17, false, this, v); },
        get_sortingOrder: function() { return CS.Call(2, 34, 18, false, this); },
        set_sortingOrder: function(v) { return CS.Call(3, 34, 18, false, this, v); },
        GetPropertyBlock: function(a0/*MaterialPropertyBlock*/) { 
            return CS.Call(4, 34, 0, false, this, a0); //Ret: Void
        },
        Render: function(a0/*Int32*/) { 
            return CS.Call(4, 34, 1, false, this, a0); //Ret: Void
        },
        SetPropertyBlock: function(a0/*MaterialPropertyBlock*/) { 
            return CS.Call(4, 34, 2, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Renderer);

// UnityEngine.Projector
var UnityEngine$Projector = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Projector",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 35, 0, true, this); },
        get_nearClipPlane: function() { return CS.Call(2, 35, 0, false, this); },
        set_nearClipPlane: function(v) { return CS.Call(3, 35, 0, false, this, v); },
        get_farClipPlane: function() { return CS.Call(2, 35, 1, false, this); },
        set_farClipPlane: function(v) { return CS.Call(3, 35, 1, false, this, v); },
        get_fieldOfView: function() { return CS.Call(2, 35, 2, false, this); },
        set_fieldOfView: function(v) { return CS.Call(3, 35, 2, false, this, v); },
        get_aspectRatio: function() { return CS.Call(2, 35, 3, false, this); },
        set_aspectRatio: function(v) { return CS.Call(3, 35, 3, false, this, v); },
        get_isOrthoGraphic: function() { return CS.Call(2, 35, 4, false, this); },
        set_isOrthoGraphic: function(v) { return CS.Call(3, 35, 4, false, this, v); },
        get_orthographic: function() { return CS.Call(2, 35, 5, false, this); },
        set_orthographic: function(v) { return CS.Call(3, 35, 5, false, this, v); },
        get_orthographicSize: function() { return CS.Call(2, 35, 6, false, this); },
        set_orthographicSize: function(v) { return CS.Call(3, 35, 6, false, this, v); },
        get_orthoGraphicSize: function() { return CS.Call(2, 35, 7, false, this); },
        set_orthoGraphicSize: function(v) { return CS.Call(3, 35, 7, false, this, v); },
        get_ignoreLayers: function() { return CS.Call(2, 35, 8, false, this); },
        set_ignoreLayers: function(v) { return CS.Call(3, 35, 8, false, this, v); },
        get_material: function() { return CS.Call(2, 35, 9, false, this); },
        set_material: function(v) { return CS.Call(3, 35, 9, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Projector);

// UnityEngine.Skybox
var UnityEngine$Skybox = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Skybox",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 36, 0, true, this); },
        get_material: function() { return CS.Call(2, 36, 0, false, this); },
        set_material: function(v) { return CS.Call(3, 36, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Skybox);

// UnityEngine.TextMesh
var UnityEngine$TextMesh = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.TextMesh",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 37, 0, true, this); },
        get_text: function() { return CS.Call(2, 37, 0, false, this); },
        set_text: function(v) { return CS.Call(3, 37, 0, false, this, v); },
        get_font: function() { return CS.Call(2, 37, 1, false, this); },
        set_font: function(v) { return CS.Call(3, 37, 1, false, this, v); },
        get_fontSize: function() { return CS.Call(2, 37, 2, false, this); },
        set_fontSize: function(v) { return CS.Call(3, 37, 2, false, this, v); },
        get_fontStyle: function() { return CS.Call(2, 37, 3, false, this); },
        set_fontStyle: function(v) { return CS.Call(3, 37, 3, false, this, v); },
        get_offsetZ: function() { return CS.Call(2, 37, 4, false, this); },
        set_offsetZ: function(v) { return CS.Call(3, 37, 4, false, this, v); },
        get_alignment: function() { return CS.Call(2, 37, 5, false, this); },
        set_alignment: function(v) { return CS.Call(3, 37, 5, false, this, v); },
        get_anchor: function() { return CS.Call(2, 37, 6, false, this); },
        set_anchor: function(v) { return CS.Call(3, 37, 6, false, this, v); },
        get_characterSize: function() { return CS.Call(2, 37, 7, false, this); },
        set_characterSize: function(v) { return CS.Call(3, 37, 7, false, this, v); },
        get_lineSpacing: function() { return CS.Call(2, 37, 8, false, this); },
        set_lineSpacing: function(v) { return CS.Call(3, 37, 8, false, this, v); },
        get_tabSize: function() { return CS.Call(2, 37, 9, false, this); },
        set_tabSize: function(v) { return CS.Call(3, 37, 9, false, this, v); },
        get_richText: function() { return CS.Call(2, 37, 10, false, this); },
        set_richText: function(v) { return CS.Call(3, 37, 10, false, this, v); },
        get_color: function() { return CS.Call(2, 37, 11, false, this); },
        set_color: function(v) { return CS.Call(3, 37, 11, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$TextMesh);

// UnityEngine.Particle
var UnityEngine$Particle = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Particle",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 38, 0, true, this); },
        get_position: function() { return CS.Call(2, 38, 0, false, this); },
        set_position: function(v) { return CS.Call(3, 38, 0, false, this, v); },
        get_velocity: function() { return CS.Call(2, 38, 1, false, this); },
        set_velocity: function(v) { return CS.Call(3, 38, 1, false, this, v); },
        get_energy: function() { return CS.Call(2, 38, 2, false, this); },
        set_energy: function(v) { return CS.Call(3, 38, 2, false, this, v); },
        get_startEnergy: function() { return CS.Call(2, 38, 3, false, this); },
        set_startEnergy: function(v) { return CS.Call(3, 38, 3, false, this, v); },
        get_size: function() { return CS.Call(2, 38, 4, false, this); },
        set_size: function(v) { return CS.Call(3, 38, 4, false, this, v); },
        get_rotation: function() { return CS.Call(2, 38, 5, false, this); },
        set_rotation: function(v) { return CS.Call(3, 38, 5, false, this, v); },
        get_angularVelocity: function() { return CS.Call(2, 38, 6, false, this); },
        set_angularVelocity: function(v) { return CS.Call(3, 38, 6, false, this, v); },
        get_color: function() { return CS.Call(2, 38, 7, false, this); },
        set_color: function(v) { return CS.Call(3, 38, 7, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Particle);

// UnityEngine.ParticleEmitter
var UnityEngine$ParticleEmitter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleEmitter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 39, 0, true, this); },
        get_emit: function() { return CS.Call(2, 39, 0, false, this); },
        set_emit: function(v) { return CS.Call(3, 39, 0, false, this, v); },
        get_minSize: function() { return CS.Call(2, 39, 1, false, this); },
        set_minSize: function(v) { return CS.Call(3, 39, 1, false, this, v); },
        get_maxSize: function() { return CS.Call(2, 39, 2, false, this); },
        set_maxSize: function(v) { return CS.Call(3, 39, 2, false, this, v); },
        get_minEnergy: function() { return CS.Call(2, 39, 3, false, this); },
        set_minEnergy: function(v) { return CS.Call(3, 39, 3, false, this, v); },
        get_maxEnergy: function() { return CS.Call(2, 39, 4, false, this); },
        set_maxEnergy: function(v) { return CS.Call(3, 39, 4, false, this, v); },
        get_minEmission: function() { return CS.Call(2, 39, 5, false, this); },
        set_minEmission: function(v) { return CS.Call(3, 39, 5, false, this, v); },
        get_maxEmission: function() { return CS.Call(2, 39, 6, false, this); },
        set_maxEmission: function(v) { return CS.Call(3, 39, 6, false, this, v); },
        get_emitterVelocityScale: function() { return CS.Call(2, 39, 7, false, this); },
        set_emitterVelocityScale: function(v) { return CS.Call(3, 39, 7, false, this, v); },
        get_worldVelocity: function() { return CS.Call(2, 39, 8, false, this); },
        set_worldVelocity: function(v) { return CS.Call(3, 39, 8, false, this, v); },
        get_localVelocity: function() { return CS.Call(2, 39, 9, false, this); },
        set_localVelocity: function(v) { return CS.Call(3, 39, 9, false, this, v); },
        get_rndVelocity: function() { return CS.Call(2, 39, 10, false, this); },
        set_rndVelocity: function(v) { return CS.Call(3, 39, 10, false, this, v); },
        get_useWorldSpace: function() { return CS.Call(2, 39, 11, false, this); },
        set_useWorldSpace: function(v) { return CS.Call(3, 39, 11, false, this, v); },
        get_rndRotation: function() { return CS.Call(2, 39, 12, false, this); },
        set_rndRotation: function(v) { return CS.Call(3, 39, 12, false, this, v); },
        get_angularVelocity: function() { return CS.Call(2, 39, 13, false, this); },
        set_angularVelocity: function(v) { return CS.Call(3, 39, 13, false, this, v); },
        get_rndAngularVelocity: function() { return CS.Call(2, 39, 14, false, this); },
        set_rndAngularVelocity: function(v) { return CS.Call(3, 39, 14, false, this, v); },
        get_particles: function() { return CS.Call(2, 39, 15, false, this); },
        set_particles: function(v) { return CS.Call(3, 39, 15, false, this, v); },
        get_particleCount: function() { return CS.Call(2, 39, 16, false, this); },
        set_particleCount: function(v) { return CS.Call(3, 39, 16, false, this, v); },
        get_enabled: function() { return CS.Call(2, 39, 17, false, this); },
        set_enabled: function(v) { return CS.Call(3, 39, 17, false, this, v); },
        ClearParticles: function() { 
            return CS.Call(4, 39, 0, false, this); //Ret: Void
        },
        Emit$$Vector3$$Vector3$$Single$$Single$$Color$$Single$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Single*/, a4/*Color*/, a5/*Single*/, a6/*Single*/) { 
            return CS.Call(4, 39, 1, false, this, a0, a1, a2, a3, a4, a5, a6); //Ret: Void
        },
        Emit$$Vector3$$Vector3$$Single$$Single$$Color: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Single*/, a4/*Color*/) { 
            return CS.Call(4, 39, 2, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        Emit$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 39, 3, false, this, a0); //Ret: Void
        },
        Emit: function() { 
            return CS.Call(4, 39, 4, false, this); //Ret: Void
        },
        Simulate: function(a0/*Single*/) { 
            return CS.Call(4, 39, 5, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleEmitter);

// UnityEngine.ParticleAnimator
var UnityEngine$ParticleAnimator = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleAnimator",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 40, 0, true, this); },
        get_doesAnimateColor: function() { return CS.Call(2, 40, 0, false, this); },
        set_doesAnimateColor: function(v) { return CS.Call(3, 40, 0, false, this, v); },
        get_worldRotationAxis: function() { return CS.Call(2, 40, 1, false, this); },
        set_worldRotationAxis: function(v) { return CS.Call(3, 40, 1, false, this, v); },
        get_localRotationAxis: function() { return CS.Call(2, 40, 2, false, this); },
        set_localRotationAxis: function(v) { return CS.Call(3, 40, 2, false, this, v); },
        get_sizeGrow: function() { return CS.Call(2, 40, 3, false, this); },
        set_sizeGrow: function(v) { return CS.Call(3, 40, 3, false, this, v); },
        get_rndForce: function() { return CS.Call(2, 40, 4, false, this); },
        set_rndForce: function(v) { return CS.Call(3, 40, 4, false, this, v); },
        get_force: function() { return CS.Call(2, 40, 5, false, this); },
        set_force: function(v) { return CS.Call(3, 40, 5, false, this, v); },
        get_damping: function() { return CS.Call(2, 40, 6, false, this); },
        set_damping: function(v) { return CS.Call(3, 40, 6, false, this, v); },
        get_autodestruct: function() { return CS.Call(2, 40, 7, false, this); },
        set_autodestruct: function(v) { return CS.Call(3, 40, 7, false, this, v); },
        get_colorAnimation: function() { return CS.Call(2, 40, 8, false, this); },
        set_colorAnimation: function(v) { return CS.Call(3, 40, 8, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleAnimator);

// UnityEngine.TrailRenderer
var UnityEngine$TrailRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.TrailRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 41, 0, true, this); },
        get_time: function() { return CS.Call(2, 41, 0, false, this); },
        set_time: function(v) { return CS.Call(3, 41, 0, false, this, v); },
        get_startWidth: function() { return CS.Call(2, 41, 1, false, this); },
        set_startWidth: function(v) { return CS.Call(3, 41, 1, false, this, v); },
        get_endWidth: function() { return CS.Call(2, 41, 2, false, this); },
        set_endWidth: function(v) { return CS.Call(3, 41, 2, false, this, v); },
        get_autodestruct: function() { return CS.Call(2, 41, 3, false, this); },
        set_autodestruct: function(v) { return CS.Call(3, 41, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$TrailRenderer);

// UnityEngine.ParticleRenderer
var UnityEngine$ParticleRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 42, 0, true, this); },
        get_particleRenderMode: function() { return CS.Call(2, 42, 0, false, this); },
        set_particleRenderMode: function(v) { return CS.Call(3, 42, 0, false, this, v); },
        get_lengthScale: function() { return CS.Call(2, 42, 1, false, this); },
        set_lengthScale: function(v) { return CS.Call(3, 42, 1, false, this, v); },
        get_velocityScale: function() { return CS.Call(2, 42, 2, false, this); },
        set_velocityScale: function(v) { return CS.Call(3, 42, 2, false, this, v); },
        get_cameraVelocityScale: function() { return CS.Call(2, 42, 3, false, this); },
        set_cameraVelocityScale: function(v) { return CS.Call(3, 42, 3, false, this, v); },
        get_maxParticleSize: function() { return CS.Call(2, 42, 4, false, this); },
        set_maxParticleSize: function(v) { return CS.Call(3, 42, 4, false, this, v); },
        get_uvAnimationXTile: function() { return CS.Call(2, 42, 5, false, this); },
        set_uvAnimationXTile: function(v) { return CS.Call(3, 42, 5, false, this, v); },
        get_uvAnimationYTile: function() { return CS.Call(2, 42, 6, false, this); },
        set_uvAnimationYTile: function(v) { return CS.Call(3, 42, 6, false, this, v); },
        get_uvAnimationCycles: function() { return CS.Call(2, 42, 7, false, this); },
        set_uvAnimationCycles: function(v) { return CS.Call(3, 42, 7, false, this, v); },
        get_maxPartileSize: function() { return CS.Call(2, 42, 8, false, this); },
        set_maxPartileSize: function(v) { return CS.Call(3, 42, 8, false, this, v); },
        get_uvTiles: function() { return CS.Call(2, 42, 9, false, this); },
        set_uvTiles: function(v) { return CS.Call(3, 42, 9, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleRenderer);

// UnityEngine.LineRenderer
var UnityEngine$LineRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LineRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 43, 0, true, this); },
        get_useWorldSpace: function() { return CS.Call(2, 43, 0, false, this); },
        set_useWorldSpace: function(v) { return CS.Call(3, 43, 0, false, this, v); },
        SetColors: function(a0/*Color*/, a1/*Color*/) { 
            return CS.Call(4, 43, 0, false, this, a0, a1); //Ret: Void
        },
        SetPosition: function(a0/*Int32*/, a1/*Vector3*/) { 
            return CS.Call(4, 43, 1, false, this, a0, a1); //Ret: Void
        },
        SetVertexCount: function(a0/*Int32*/) { 
            return CS.Call(4, 43, 2, false, this, a0); //Ret: Void
        },
        SetWidth: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 43, 3, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LineRenderer);

// UnityEngine.MaterialPropertyBlock
var UnityEngine$MaterialPropertyBlock = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MaterialPropertyBlock",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 44, 0, true, this); },
        get_isEmpty: function() { return CS.Call(2, 44, 0, false, this); },
        set_isEmpty: function(v) { return CS.Call(3, 44, 0, false, this, v); },
        AddColor$$String$$Color: function(a0/*String*/, a1/*Color*/) { 
            return CS.Call(4, 44, 0, false, this, a0, a1); //Ret: Void
        },
        AddColor$$Int32$$Color: function(a0/*Int32*/, a1/*Color*/) { 
            return CS.Call(4, 44, 1, false, this, a0, a1); //Ret: Void
        },
        AddFloat$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 44, 2, false, this, a0, a1); //Ret: Void
        },
        AddFloat$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 44, 3, false, this, a0, a1); //Ret: Void
        },
        AddMatrix$$Int32$$Matrix4x4: function(a0/*Int32*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 44, 4, false, this, a0, a1); //Ret: Void
        },
        AddMatrix$$String$$Matrix4x4: function(a0/*String*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 44, 5, false, this, a0, a1); //Ret: Void
        },
        AddTexture$$Int32$$Texture: function(a0/*Int32*/, a1/*Texture*/) { 
            return CS.Call(4, 44, 6, false, this, a0, a1); //Ret: Void
        },
        AddTexture$$String$$Texture: function(a0/*String*/, a1/*Texture*/) { 
            return CS.Call(4, 44, 7, false, this, a0, a1); //Ret: Void
        },
        AddVector$$String$$Vector4: function(a0/*String*/, a1/*Vector4*/) { 
            return CS.Call(4, 44, 8, false, this, a0, a1); //Ret: Void
        },
        AddVector$$Int32$$Vector4: function(a0/*Int32*/, a1/*Vector4*/) { 
            return CS.Call(4, 44, 9, false, this, a0, a1); //Ret: Void
        },
        Clear: function() { 
            return CS.Call(4, 44, 10, false, this); //Ret: Void
        },
        GetFloat$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 44, 11, false, this, a0); //Ret: Single
        },
        GetFloat$$String: function(a0/*String*/) { 
            return CS.Call(4, 44, 12, false, this, a0); //Ret: Single
        },
        GetMatrix$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 44, 13, false, this, a0); //Ret: Matrix4x4
        },
        GetMatrix$$String: function(a0/*String*/) { 
            return CS.Call(4, 44, 14, false, this, a0); //Ret: Matrix4x4
        },
        GetTexture$$String: function(a0/*String*/) { 
            return CS.Call(4, 44, 15, false, this, a0); //Ret: Texture
        },
        GetTexture$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 44, 16, false, this, a0); //Ret: Texture
        },
        GetVector$$String: function(a0/*String*/) { 
            return CS.Call(4, 44, 17, false, this, a0); //Ret: Vector4
        },
        GetVector$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 44, 18, false, this, a0); //Ret: Vector4
        },
        SetColor$$String$$Color: function(a0/*String*/, a1/*Color*/) { 
            return CS.Call(4, 44, 19, false, this, a0, a1); //Ret: Void
        },
        SetColor$$Int32$$Color: function(a0/*Int32*/, a1/*Color*/) { 
            return CS.Call(4, 44, 20, false, this, a0, a1); //Ret: Void
        },
        SetFloat$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 44, 21, false, this, a0, a1); //Ret: Void
        },
        SetFloat$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 44, 22, false, this, a0, a1); //Ret: Void
        },
        SetMatrix$$Int32$$Matrix4x4: function(a0/*Int32*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 44, 23, false, this, a0, a1); //Ret: Void
        },
        SetMatrix$$String$$Matrix4x4: function(a0/*String*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 44, 24, false, this, a0, a1); //Ret: Void
        },
        SetTexture$$Int32$$Texture: function(a0/*Int32*/, a1/*Texture*/) { 
            return CS.Call(4, 44, 25, false, this, a0, a1); //Ret: Void
        },
        SetTexture$$String$$Texture: function(a0/*String*/, a1/*Texture*/) { 
            return CS.Call(4, 44, 26, false, this, a0, a1); //Ret: Void
        },
        SetVector$$String$$Vector4: function(a0/*String*/, a1/*Vector4*/) { 
            return CS.Call(4, 44, 27, false, this, a0, a1); //Ret: Void
        },
        SetVector$$Int32$$Vector4: function(a0/*Int32*/, a1/*Vector4*/) { 
            return CS.Call(4, 44, 28, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MaterialPropertyBlock);

// UnityEngine.RenderBuffer
var UnityEngine$RenderBuffer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RenderBuffer",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 45, 0, true, this); },
        GetNativeRenderBufferPtr: function() { 
            return CS.Call(4, 45, 0, false, this); //Ret: IntPtr
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RenderBuffer);

// UnityEngine.Graphics
var UnityEngine$Graphics = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Graphics",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_activeColorBuffer: function() { return CS.Call(2, 46, 0, true); },
        set_activeColorBuffer: function(v) { return CS.Call(3, 46, 0, true, v); },
        get_activeDepthBuffer: function() { return CS.Call(2, 46, 1, true); },
        set_activeDepthBuffer: function(v) { return CS.Call(3, 46, 1, true, v); },
        Blit$$Texture$$RenderTexture$$Material$$Int32: function(a0/*Texture*/, a1/*RenderTexture*/, a2/*Material*/, a3/*Int32*/) { 
            return CS.Call(4, 46, 0, true, a0, a1, a2, a3); //Ret: Void
        },
        Blit$$Texture$$RenderTexture$$Material: function(a0/*Texture*/, a1/*RenderTexture*/, a2/*Material*/) { 
            return CS.Call(4, 46, 1, true, a0, a1, a2); //Ret: Void
        },
        Blit$$Texture$$Material$$Int32: function(a0/*Texture*/, a1/*Material*/, a2/*Int32*/) { 
            return CS.Call(4, 46, 2, true, a0, a1, a2); //Ret: Void
        },
        Blit$$Texture$$Material: function(a0/*Texture*/, a1/*Material*/) { 
            return CS.Call(4, 46, 3, true, a0, a1); //Ret: Void
        },
        Blit$$Texture$$RenderTexture: function(a0/*Texture*/, a1/*RenderTexture*/) { 
            return CS.Call(4, 46, 4, true, a0, a1); //Ret: Void
        },
        BlitMultiTap: function(a0/*Texture*/, a1/*RenderTexture*/, a2/*Material*/, a3/*Vector2[]*/) { 
            return CS.Call(4, 46, 5, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Void
        },
        ClearRandomWriteTargets: function() { 
            return CS.Call(4, 46, 6, true); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$Boolean$$Boolean: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/, a6/*Int32*/, a7/*MaterialPropertyBlock*/, a8/*Boolean*/, a9/*Boolean*/) { 
            return CS.Call(4, 46, 7, true, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock$$Boolean$$Boolean: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/, a5/*Int32*/, a6/*MaterialPropertyBlock*/, a7/*Boolean*/, a8/*Boolean*/) { 
            return CS.Call(4, 46, 8, true, a0, a1, a2, a3, a4, a5, a6, a7, a8); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/, a6/*Int32*/, a7/*MaterialPropertyBlock*/) { 
            return CS.Call(4, 46, 9, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera$$Int32: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/, a6/*Int32*/) { 
            return CS.Call(4, 46, 10, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera$$Int32$$MaterialPropertyBlock: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/, a5/*Int32*/, a6/*MaterialPropertyBlock*/) { 
            return CS.Call(4, 46, 11, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera$$Int32: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/, a5/*Int32*/) { 
            return CS.Call(4, 46, 12, true, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32$$Camera: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/, a5/*Camera*/) { 
            return CS.Call(4, 46, 13, true, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        DrawMesh$$Mesh$$Vector3$$Quaternion$$Material$$Int32: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Material*/, a4/*Int32*/) { 
            return CS.Call(4, 46, 14, true, a0, a1, a2, a3, a4); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32$$Camera: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/, a4/*Camera*/) { 
            return CS.Call(4, 46, 15, true, a0, a1, a2, a3, a4); //Ret: Void
        },
        DrawMesh$$Mesh$$Matrix4x4$$Material$$Int32: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Material*/, a3/*Int32*/) { 
            return CS.Call(4, 46, 16, true, a0, a1, a2, a3); //Ret: Void
        },
        DrawMeshNow$$Mesh$$Vector3$$Quaternion$$Int32: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/, a3/*Int32*/) { 
            return CS.Call(4, 46, 17, true, a0, a1, a2, a3); //Ret: Void
        },
        DrawMeshNow$$Mesh$$Vector3$$Quaternion: function(a0/*Mesh*/, a1/*Vector3*/, a2/*Quaternion*/) { 
            return CS.Call(4, 46, 18, true, a0, a1, a2); //Ret: Void
        },
        DrawMeshNow$$Mesh$$Matrix4x4$$Int32: function(a0/*Mesh*/, a1/*Matrix4x4*/, a2/*Int32*/) { 
            return CS.Call(4, 46, 19, true, a0, a1, a2); //Ret: Void
        },
        DrawMeshNow$$Mesh$$Matrix4x4: function(a0/*Mesh*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 46, 20, true, a0, a1); //Ret: Void
        },
        DrawProcedural$$MeshTopology$$Int32$$Int32: function(a0/*MeshTopology*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 46, 21, true, a0, a1, a2); //Ret: Void
        },
        DrawProcedural$$MeshTopology$$Int32: function(a0/*MeshTopology*/, a1/*Int32*/) { 
            return CS.Call(4, 46, 22, true, a0, a1); //Ret: Void
        },
        DrawProceduralIndirect$$MeshTopology$$ComputeBuffer$$Int32: function(a0/*MeshTopology*/, a1/*ComputeBuffer*/, a2/*Int32*/) { 
            return CS.Call(4, 46, 23, true, a0, a1, a2); //Ret: Void
        },
        DrawProceduralIndirect$$MeshTopology$$ComputeBuffer: function(a0/*MeshTopology*/, a1/*ComputeBuffer*/) { 
            return CS.Call(4, 46, 24, true, a0, a1); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Rect$$Int32$$Int32$$Int32$$Int32$$Color$$Material: function(a0/*Rect*/, a1/*Texture*/, a2/*Rect*/, a3/*Int32*/, a4/*Int32*/, a5/*Int32*/, a6/*Int32*/, a7/*Color*/, a8/*Material*/) { 
            return CS.Call(4, 46, 25, true, a0, a1, a2, a3, a4, a5, a6, a7, a8); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Rect$$Int32$$Int32$$Int32$$Int32$$Material: function(a0/*Rect*/, a1/*Texture*/, a2/*Rect*/, a3/*Int32*/, a4/*Int32*/, a5/*Int32*/, a6/*Int32*/, a7/*Material*/) { 
            return CS.Call(4, 46, 26, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Rect$$Int32$$Int32$$Int32$$Int32$$Color: function(a0/*Rect*/, a1/*Texture*/, a2/*Rect*/, a3/*Int32*/, a4/*Int32*/, a5/*Int32*/, a6/*Int32*/, a7/*Color*/) { 
            return CS.Call(4, 46, 27, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Rect$$Int32$$Int32$$Int32$$Int32: function(a0/*Rect*/, a1/*Texture*/, a2/*Rect*/, a3/*Int32*/, a4/*Int32*/, a5/*Int32*/, a6/*Int32*/) { 
            return CS.Call(4, 46, 28, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Int32$$Int32$$Int32$$Int32$$Material: function(a0/*Rect*/, a1/*Texture*/, a2/*Int32*/, a3/*Int32*/, a4/*Int32*/, a5/*Int32*/, a6/*Material*/) { 
            return CS.Call(4, 46, 29, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Int32$$Int32$$Int32$$Int32: function(a0/*Rect*/, a1/*Texture*/, a2/*Int32*/, a3/*Int32*/, a4/*Int32*/, a5/*Int32*/) { 
            return CS.Call(4, 46, 30, true, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$Material: function(a0/*Rect*/, a1/*Texture*/, a2/*Material*/) { 
            return CS.Call(4, 46, 31, true, a0, a1, a2); //Ret: Void
        },
        DrawTexture$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 46, 32, true, a0, a1); //Ret: Void
        },
        SetRandomWriteTarget$$Int32$$RenderTexture: function(a0/*Int32*/, a1/*RenderTexture*/) { 
            return CS.Call(4, 46, 33, true, a0, a1); //Ret: Void
        },
        SetRandomWriteTarget$$Int32$$ComputeBuffer: function(a0/*Int32*/, a1/*ComputeBuffer*/) { 
            return CS.Call(4, 46, 34, true, a0, a1); //Ret: Void
        },
        SetRenderTarget$$RenderTexture$$Int32$$CubemapFace: function(a0/*RenderTexture*/, a1/*Int32*/, a2/*CubemapFace*/) { 
            return CS.Call(4, 46, 35, true, a0, a1, a2); //Ret: Void
        },
        SetRenderTarget$$RenderBuffer$Array$$RenderBuffer: function(a0/*RenderBuffer[]*/, a1/*RenderBuffer*/) { 
            return CS.Call(4, 46, 36, true, a0, a1); //Ret: Void
        },
        SetRenderTarget$$RenderTexture$$Int32: function(a0/*RenderTexture*/, a1/*Int32*/) { 
            return CS.Call(4, 46, 37, true, a0, a1); //Ret: Void
        },
        SetRenderTarget$$RenderBuffer$$RenderBuffer: function(a0/*RenderBuffer*/, a1/*RenderBuffer*/) { 
            return CS.Call(4, 46, 38, true, a0, a1); //Ret: Void
        },
        SetRenderTarget$$RenderTexture: function(a0/*RenderTexture*/) { 
            return CS.Call(4, 46, 39, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 46, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Graphics);

// UnityEngine.Resolution
var UnityEngine$Resolution = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Resolution",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 47, 0, true, this); },
        get_width: function() { return CS.Call(2, 47, 0, false, this); },
        set_width: function(v) { return CS.Call(3, 47, 0, false, this, v); },
        get_height: function() { return CS.Call(2, 47, 1, false, this); },
        set_height: function(v) { return CS.Call(3, 47, 1, false, this, v); },
        get_refreshRate: function() { return CS.Call(2, 47, 2, false, this); },
        set_refreshRate: function(v) { return CS.Call(3, 47, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Resolution);

// UnityEngine.LightmapData
var UnityEngine$LightmapData = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LightmapData",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 48, 0, true, this); },
        get_lightmapFar: function() { return CS.Call(2, 48, 0, false, this); },
        set_lightmapFar: function(v) { return CS.Call(3, 48, 0, false, this, v); },
        get_lightmapNear: function() { return CS.Call(2, 48, 1, false, this); },
        set_lightmapNear: function(v) { return CS.Call(3, 48, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LightmapData);

// UnityEngine.LightProbes
var UnityEngine$LightProbes = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LightProbes",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 49, 0, true, this); },
        get_positions: function() { return CS.Call(2, 49, 0, false, this); },
        set_positions: function(v) { return CS.Call(3, 49, 0, false, this, v); },
        get_coefficients: function() { return CS.Call(2, 49, 1, false, this); },
        set_coefficients: function(v) { return CS.Call(3, 49, 1, false, this, v); },
        get_count: function() { return CS.Call(2, 49, 2, false, this); },
        set_count: function(v) { return CS.Call(3, 49, 2, false, this, v); },
        get_cellCount: function() { return CS.Call(2, 49, 3, false, this); },
        set_cellCount: function(v) { return CS.Call(3, 49, 3, false, this, v); },
        GetInterpolatedLightProbe: function(a0/*Vector3*/, a1/*Renderer*/, a2/*Single[]*/) { 
            return CS.Call(4, 49, 0, false, this, a0, a1, a2); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LightProbes);

// UnityEngine.LightmapSettings
var UnityEngine$LightmapSettings = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LightmapSettings",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        get_lightmaps: function() { return CS.Call(2, 50, 0, true); },
        set_lightmaps: function(v) { return CS.Call(3, 50, 0, true, v); },
        get_lightmapsMode: function() { return CS.Call(2, 50, 1, true); },
        set_lightmapsMode: function(v) { return CS.Call(3, 50, 1, true, v); },
        get_bakedColorSpace: function() { return CS.Call(2, 50, 2, true); },
        set_bakedColorSpace: function(v) { return CS.Call(3, 50, 2, true, v); },
        get_lightProbes: function() { return CS.Call(2, 50, 3, true); },
        set_lightProbes: function(v) { return CS.Call(3, 50, 3, true, v); },
    },
    definition: {
        ctor: function() { CS.Call(5, 50, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LightmapSettings);

// UnityEngine.GeometryUtility
var UnityEngine$GeometryUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GeometryUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        CalculateFrustumPlanes$$Matrix4x4: function(a0/*Matrix4x4*/) { 
            return CS.Call(4, 51, 0, true, a0); //Ret: Plane[]
        },
        CalculateFrustumPlanes$$Camera: function(a0/*Camera*/) { 
            return CS.Call(4, 51, 1, true, a0); //Ret: Plane[]
        },
        TestPlanesAABB: function(a0/*Plane[]*/, a1/*Bounds*/) { 
            return CS.Call(4, 51, 2, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 51, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GeometryUtility);

// UnityEngine.Screen
var UnityEngine$Screen = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Screen",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_resolutions: function() { return CS.Call(2, 52, 0, true); },
        set_resolutions: function(v) { return CS.Call(3, 52, 0, true, v); },
        get_GetResolution: function() { return CS.Call(2, 52, 1, true); },
        set_GetResolution: function(v) { return CS.Call(3, 52, 1, true, v); },
        get_currentResolution: function() { return CS.Call(2, 52, 2, true); },
        set_currentResolution: function(v) { return CS.Call(3, 52, 2, true, v); },
        get_showCursor: function() { return CS.Call(2, 52, 3, true); },
        set_showCursor: function(v) { return CS.Call(3, 52, 3, true, v); },
        get_lockCursor: function() { return CS.Call(2, 52, 4, true); },
        set_lockCursor: function(v) { return CS.Call(3, 52, 4, true, v); },
        get_width: function() { return CS.Call(2, 52, 5, true); },
        set_width: function(v) { return CS.Call(3, 52, 5, true, v); },
        get_height: function() { return CS.Call(2, 52, 6, true); },
        set_height: function(v) { return CS.Call(3, 52, 6, true, v); },
        get_dpi: function() { return CS.Call(2, 52, 7, true); },
        set_dpi: function(v) { return CS.Call(3, 52, 7, true, v); },
        get_fullScreen: function() { return CS.Call(2, 52, 8, true); },
        set_fullScreen: function(v) { return CS.Call(3, 52, 8, true, v); },
        get_autorotateToPortrait: function() { return CS.Call(2, 52, 9, true); },
        set_autorotateToPortrait: function(v) { return CS.Call(3, 52, 9, true, v); },
        get_autorotateToPortraitUpsideDown: function() { return CS.Call(2, 52, 10, true); },
        set_autorotateToPortraitUpsideDown: function(v) { return CS.Call(3, 52, 10, true, v); },
        get_autorotateToLandscapeLeft: function() { return CS.Call(2, 52, 11, true); },
        set_autorotateToLandscapeLeft: function(v) { return CS.Call(3, 52, 11, true, v); },
        get_autorotateToLandscapeRight: function() { return CS.Call(2, 52, 12, true); },
        set_autorotateToLandscapeRight: function(v) { return CS.Call(3, 52, 12, true, v); },
        get_orientation: function() { return CS.Call(2, 52, 13, true); },
        set_orientation: function(v) { return CS.Call(3, 52, 13, true, v); },
        get_sleepTimeout: function() { return CS.Call(2, 52, 14, true); },
        set_sleepTimeout: function(v) { return CS.Call(3, 52, 14, true, v); },
        SetResolution$$Int32$$Int32$$Boolean$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Boolean*/, a3/*Int32*/) { 
            return CS.Call(4, 52, 0, true, a0, a1, a2, a3); //Ret: Void
        },
        SetResolution$$Int32$$Int32$$Boolean: function(a0/*Int32*/, a1/*Int32*/, a2/*Boolean*/) { 
            return CS.Call(4, 52, 1, true, a0, a1, a2); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 52, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Screen);

// UnityEngine.SleepTimeout
var UnityEngine$SleepTimeout = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SleepTimeout",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        NeverSleep: {
            get: function() { return CS.Call(0, 53, 0, true); }, 
            set: function(v) { return CS.Call(1, 53, 0, true, v); }
        },
        SystemSetting: {
            get: function() { return CS.Call(0, 53, 1, true); }, 
            set: function(v) { return CS.Call(1, 53, 1, true, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 53, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SleepTimeout);

// UnityEngine.GL
var UnityEngine$GL = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GL",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        TRIANGLES: {
            get: function() { return CS.Call(0, 54, 0, true); }, 
            set: function(v) { return CS.Call(1, 54, 0, true, v); }
        },
        TRIANGLE_STRIP: {
            get: function() { return CS.Call(0, 54, 1, true); }, 
            set: function(v) { return CS.Call(1, 54, 1, true, v); }
        },
        QUADS: {
            get: function() { return CS.Call(0, 54, 2, true); }, 
            set: function(v) { return CS.Call(1, 54, 2, true, v); }
        },
        LINES: {
            get: function() { return CS.Call(0, 54, 3, true); }, 
            set: function(v) { return CS.Call(1, 54, 3, true, v); }
        },
    },
    staticDefinition: {
        get_modelview: function() { return CS.Call(2, 54, 0, true); },
        set_modelview: function(v) { return CS.Call(3, 54, 0, true, v); },
        get_wireframe: function() { return CS.Call(2, 54, 1, true); },
        set_wireframe: function(v) { return CS.Call(3, 54, 1, true, v); },
        get_sRGBWrite: function() { return CS.Call(2, 54, 2, true); },
        set_sRGBWrite: function(v) { return CS.Call(3, 54, 2, true, v); },
        Begin: function(a0/*Int32*/) { 
            return CS.Call(4, 54, 0, true, a0); //Ret: Void
        },
        Clear$$Boolean$$Boolean$$Color$$Single: function(a0/*Boolean*/, a1/*Boolean*/, a2/*Color*/, a3/*Single*/) { 
            return CS.Call(4, 54, 1, true, a0, a1, a2, a3); //Ret: Void
        },
        Clear$$Boolean$$Boolean$$Color: function(a0/*Boolean*/, a1/*Boolean*/, a2/*Color*/) { 
            return CS.Call(4, 54, 2, true, a0, a1, a2); //Ret: Void
        },
        ClearWithSkybox: function(a0/*Boolean*/, a1/*Camera*/) { 
            return CS.Call(4, 54, 3, true, a0, a1); //Ret: Void
        },
        Color: function(a0/*Color*/) { 
            return CS.Call(4, 54, 4, true, a0); //Ret: Void
        },
        End: function() { 
            return CS.Call(4, 54, 5, true); //Ret: Void
        },
        GetGPUProjectionMatrix: function(a0/*Matrix4x4*/, a1/*Boolean*/) { 
            return CS.Call(4, 54, 6, true, a0, a1); //Ret: Matrix4x4
        },
        InvalidateState: function() { 
            return CS.Call(4, 54, 7, true); //Ret: Void
        },
        IssuePluginEvent: function(a0/*Int32*/) { 
            return CS.Call(4, 54, 8, true, a0); //Ret: Void
        },
        LoadIdentity: function() { 
            return CS.Call(4, 54, 9, true); //Ret: Void
        },
        LoadOrtho: function() { 
            return CS.Call(4, 54, 10, true); //Ret: Void
        },
        LoadPixelMatrix$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 54, 11, true, a0, a1, a2, a3); //Ret: Void
        },
        LoadPixelMatrix: function() { 
            return CS.Call(4, 54, 12, true); //Ret: Void
        },
        LoadProjectionMatrix: function(a0/*Matrix4x4*/) { 
            return CS.Call(4, 54, 13, true, a0); //Ret: Void
        },
        MultiTexCoord: function(a0/*Int32*/, a1/*Vector3*/) { 
            return CS.Call(4, 54, 14, true, a0, a1); //Ret: Void
        },
        MultiTexCoord2: function(a0/*Int32*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 54, 15, true, a0, a1, a2); //Ret: Void
        },
        MultiTexCoord3: function(a0/*Int32*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 54, 16, true, a0, a1, a2, a3); //Ret: Void
        },
        MultMatrix: function(a0/*Matrix4x4*/) { 
            return CS.Call(4, 54, 17, true, a0); //Ret: Void
        },
        PopMatrix: function() { 
            return CS.Call(4, 54, 18, true); //Ret: Void
        },
        PushMatrix: function() { 
            return CS.Call(4, 54, 19, true); //Ret: Void
        },
        SetRevertBackfacing: function(a0/*Boolean*/) { 
            return CS.Call(4, 54, 20, true, a0); //Ret: Void
        },
        TexCoord: function(a0/*Vector3*/) { 
            return CS.Call(4, 54, 21, true, a0); //Ret: Void
        },
        TexCoord2: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 54, 22, true, a0, a1); //Ret: Void
        },
        TexCoord3: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 54, 23, true, a0, a1, a2); //Ret: Void
        },
        Vertex: function(a0/*Vector3*/) { 
            return CS.Call(4, 54, 24, true, a0); //Ret: Void
        },
        Vertex3: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 54, 25, true, a0, a1, a2); //Ret: Void
        },
        Viewport: function(a0/*Rect*/) { 
            return CS.Call(4, 54, 26, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 54, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GL);

// UnityEngine.MeshRenderer
var UnityEngine$MeshRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MeshRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 55, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MeshRenderer);

// UnityEngine.StaticBatchingUtility
var UnityEngine$StaticBatchingUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.StaticBatchingUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        Combine$$GameObject$Array$$GameObject: function(a0/*GameObject[]*/, a1/*GameObject*/) { 
            return CS.Call(4, 56, 0, true, a0, a1); //Ret: Void
        },
        Combine$$GameObject: function(a0/*GameObject*/) { 
            return CS.Call(4, 56, 1, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 56, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$StaticBatchingUtility);

// UnityEngine.Texture
var UnityEngine$Texture = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Texture",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        get_masterTextureLimit: function() { return CS.Call(2, 57, 0, true); },
        set_masterTextureLimit: function(v) { return CS.Call(3, 57, 0, true, v); },
        get_anisotropicFiltering: function() { return CS.Call(2, 57, 1, true); },
        set_anisotropicFiltering: function(v) { return CS.Call(3, 57, 1, true, v); },
        SetGlobalAnisotropicFilteringLimits: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 57, 2, true, a0, a1); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 57, 0, true, this); },
        get_width: function() { return CS.Call(2, 57, 2, false, this); },
        set_width: function(v) { return CS.Call(3, 57, 2, false, this, v); },
        get_height: function() { return CS.Call(2, 57, 3, false, this); },
        set_height: function(v) { return CS.Call(3, 57, 3, false, this, v); },
        get_filterMode: function() { return CS.Call(2, 57, 4, false, this); },
        set_filterMode: function(v) { return CS.Call(3, 57, 4, false, this, v); },
        get_anisoLevel: function() { return CS.Call(2, 57, 5, false, this); },
        set_anisoLevel: function(v) { return CS.Call(3, 57, 5, false, this, v); },
        get_wrapMode: function() { return CS.Call(2, 57, 6, false, this); },
        set_wrapMode: function(v) { return CS.Call(3, 57, 6, false, this, v); },
        get_mipMapBias: function() { return CS.Call(2, 57, 7, false, this); },
        set_mipMapBias: function(v) { return CS.Call(3, 57, 7, false, this, v); },
        get_texelSize: function() { return CS.Call(2, 57, 8, false, this); },
        set_texelSize: function(v) { return CS.Call(3, 57, 8, false, this, v); },
        GetNativeTextureID: function() { 
            return CS.Call(4, 57, 0, false, this); //Ret: Int32
        },
        GetNativeTexturePtr: function() { 
            return CS.Call(4, 57, 1, false, this); //Ret: IntPtr
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Texture);

// UnityEngine.Texture2D
var UnityEngine$Texture2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Texture2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    staticDefinition: {
        get_whiteTexture: function() { return CS.Call(2, 58, 2, true); },
        set_whiteTexture: function(v) { return CS.Call(3, 58, 2, true, v); },
        get_blackTexture: function() { return CS.Call(2, 58, 3, true); },
        set_blackTexture: function(v) { return CS.Call(3, 58, 3, true, v); },
        CreateExternalTexture: function(a0/*Int32*/, a1/*Int32*/, a2/*TextureFormat*/, a3/*Boolean*/, a4/*Boolean*/, a5/*IntPtr*/) { 
            return CS.Call(4, 58, 32, true, a0, a1, a2, a3, a4, a5); //Ret: Texture2D
        },
    },
    definition: {
        ctor$$Int32$$Int32: function(a0, a1) { CS.Call(5, 58, 0, true, this, a0, a1); },
        ctor$$Int32$$Int32$$TextureFormat$$Boolean: function(a0, a1, a2, a3) { CS.Call(5, 58, 1, true, this, a0, a1, a2, a3); },
        ctor$$Int32$$Int32$$TextureFormat$$Boolean$$Boolean: function(a0, a1, a2, a3, a4) { CS.Call(5, 58, 2, true, this, a0, a1, a2, a3, a4); },
        get_mipmapCount: function() { return CS.Call(2, 58, 0, false, this); },
        set_mipmapCount: function(v) { return CS.Call(3, 58, 0, false, this, v); },
        get_format: function() { return CS.Call(2, 58, 1, false, this); },
        set_format: function(v) { return CS.Call(3, 58, 1, false, this, v); },
        Apply$$Boolean$$Boolean: function(a0/*Boolean*/, a1/*Boolean*/) { 
            return CS.Call(4, 58, 0, false, this, a0, a1); //Ret: Void
        },
        Apply$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 58, 1, false, this, a0); //Ret: Void
        },
        Apply: function() { 
            return CS.Call(4, 58, 2, false, this); //Ret: Void
        },
        Compress: function(a0/*Boolean*/) { 
            return CS.Call(4, 58, 3, false, this, a0); //Ret: Void
        },
        EncodeToJPG$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 58, 4, false, this, a0); //Ret: Byte[]
        },
        EncodeToJPG: function() { 
            return CS.Call(4, 58, 5, false, this); //Ret: Byte[]
        },
        EncodeToPNG: function() { 
            return CS.Call(4, 58, 6, false, this); //Ret: Byte[]
        },
        GetPixel: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 58, 7, false, this, a0, a1); //Ret: Color
        },
        GetPixelBilinear: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 58, 8, false, this, a0, a1); //Ret: Color
        },
        GetPixels$$Int32$$Int32$$Int32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Int32*/) { 
            return CS.Call(4, 58, 9, false, this, a0, a1, a2, a3, a4); //Ret: Color[]
        },
        GetPixels$$Int32$$Int32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 58, 10, false, this, a0, a1, a2, a3); //Ret: Color[]
        },
        GetPixels$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 58, 11, false, this, a0); //Ret: Color[]
        },
        GetPixels: function() { 
            return CS.Call(4, 58, 12, false, this); //Ret: Color[]
        },
        GetPixels32$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 58, 13, false, this, a0); //Ret: Color32[]
        },
        GetPixels32: function() { 
            return CS.Call(4, 58, 14, false, this); //Ret: Color32[]
        },
        LoadImage: function(a0/*Byte[]*/) { 
            return CS.Call(4, 58, 15, false, this, a0); //Ret: Boolean
        },
        LoadRawTextureData: function(a0/*Byte[]*/) { 
            return CS.Call(4, 58, 16, false, this, a0); //Ret: Void
        },
        PackTextures$$Texture2D$Array$$Int32$$Int32$$Boolean: function(a0/*Texture2D[]*/, a1/*Int32*/, a2/*Int32*/, a3/*Boolean*/) { 
            return CS.Call(4, 58, 17, false, this, a0, a1, a2, a3); //Ret: Rect[]
        },
        PackTextures$$Texture2D$Array$$Int32$$Int32: function(a0/*Texture2D[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 58, 18, false, this, a0, a1, a2); //Ret: Rect[]
        },
        PackTextures$$Texture2D$Array$$Int32: function(a0/*Texture2D[]*/, a1/*Int32*/) { 
            return CS.Call(4, 58, 19, false, this, a0, a1); //Ret: Rect[]
        },
        ReadPixels$$Rect$$Int32$$Int32$$Boolean: function(a0/*Rect*/, a1/*Int32*/, a2/*Int32*/, a3/*Boolean*/) { 
            return CS.Call(4, 58, 20, false, this, a0, a1, a2, a3); //Ret: Void
        },
        ReadPixels$$Rect$$Int32$$Int32: function(a0/*Rect*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 58, 21, false, this, a0, a1, a2); //Ret: Void
        },
        Resize$$Int32$$Int32$$TextureFormat$$Boolean: function(a0/*Int32*/, a1/*Int32*/, a2/*TextureFormat*/, a3/*Boolean*/) { 
            return CS.Call(4, 58, 22, false, this, a0, a1, a2, a3); //Ret: Boolean
        },
        Resize$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 58, 23, false, this, a0, a1); //Ret: Boolean
        },
        SetPixel: function(a0/*Int32*/, a1/*Int32*/, a2/*Color*/) { 
            return CS.Call(4, 58, 24, false, this, a0, a1, a2); //Ret: Void
        },
        SetPixels$$Int32$$Int32$$Int32$$Int32$$Color$Array$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Color[]*/, a5/*Int32*/) { 
            return CS.Call(4, 58, 25, false, this, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        SetPixels$$Int32$$Int32$$Int32$$Int32$$Color$Array: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Color[]*/) { 
            return CS.Call(4, 58, 26, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        SetPixels$$Color$Array$$Int32: function(a0/*Color[]*/, a1/*Int32*/) { 
            return CS.Call(4, 58, 27, false, this, a0, a1); //Ret: Void
        },
        SetPixels$$Color$Array: function(a0/*Color[]*/) { 
            return CS.Call(4, 58, 28, false, this, a0); //Ret: Void
        },
        SetPixels32$$Color32$Array$$Int32: function(a0/*Color32[]*/, a1/*Int32*/) { 
            return CS.Call(4, 58, 29, false, this, a0, a1); //Ret: Void
        },
        SetPixels32$$Color32$Array: function(a0/*Color32[]*/) { 
            return CS.Call(4, 58, 30, false, this, a0); //Ret: Void
        },
        UpdateExternalTexture: function(a0/*IntPtr*/) { 
            return CS.Call(4, 58, 31, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Texture2D);

// UnityEngine.Cubemap
var UnityEngine$Cubemap = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Cubemap",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    definition: {
        ctor: function(a0, a1, a2) { CS.Call(5, 59, 0, true, this, a0, a1, a2); },
        get_format: function() { return CS.Call(2, 59, 0, false, this); },
        set_format: function(v) { return CS.Call(3, 59, 0, false, this, v); },
        Apply$$Boolean$$Boolean: function(a0/*Boolean*/, a1/*Boolean*/) { 
            return CS.Call(4, 59, 0, false, this, a0, a1); //Ret: Void
        },
        Apply$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 59, 1, false, this, a0); //Ret: Void
        },
        Apply: function() { 
            return CS.Call(4, 59, 2, false, this); //Ret: Void
        },
        GetPixel: function(a0/*CubemapFace*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 59, 3, false, this, a0, a1, a2); //Ret: Color
        },
        GetPixels$$CubemapFace$$Int32: function(a0/*CubemapFace*/, a1/*Int32*/) { 
            return CS.Call(4, 59, 4, false, this, a0, a1); //Ret: Color[]
        },
        GetPixels$$CubemapFace: function(a0/*CubemapFace*/) { 
            return CS.Call(4, 59, 5, false, this, a0); //Ret: Color[]
        },
        SetPixel: function(a0/*CubemapFace*/, a1/*Int32*/, a2/*Int32*/, a3/*Color*/) { 
            return CS.Call(4, 59, 6, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SetPixels$$Color$Array$$CubemapFace$$Int32: function(a0/*Color[]*/, a1/*CubemapFace*/, a2/*Int32*/) { 
            return CS.Call(4, 59, 7, false, this, a0, a1, a2); //Ret: Void
        },
        SetPixels$$Color$Array$$CubemapFace: function(a0/*Color[]*/, a1/*CubemapFace*/) { 
            return CS.Call(4, 59, 8, false, this, a0, a1); //Ret: Void
        },
        SmoothEdges$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 59, 9, false, this, a0); //Ret: Void
        },
        SmoothEdges: function() { 
            return CS.Call(4, 59, 10, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Cubemap);

// UnityEngine.Texture3D
var UnityEngine$Texture3D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Texture3D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    definition: {
        ctor: function(a0, a1, a2, a3, a4) { CS.Call(5, 60, 0, true, this, a0, a1, a2, a3, a4); },
        get_depth: function() { return CS.Call(2, 60, 0, false, this); },
        set_depth: function(v) { return CS.Call(3, 60, 0, false, this, v); },
        get_format: function() { return CS.Call(2, 60, 1, false, this); },
        set_format: function(v) { return CS.Call(3, 60, 1, false, this, v); },
        Apply$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 60, 0, false, this, a0); //Ret: Void
        },
        Apply: function() { 
            return CS.Call(4, 60, 1, false, this); //Ret: Void
        },
        GetPixels$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 60, 2, false, this, a0); //Ret: Color[]
        },
        GetPixels: function() { 
            return CS.Call(4, 60, 3, false, this); //Ret: Color[]
        },
        SetPixels$$Color$Array$$Int32: function(a0/*Color[]*/, a1/*Int32*/) { 
            return CS.Call(4, 60, 4, false, this, a0, a1); //Ret: Void
        },
        SetPixels$$Color$Array: function(a0/*Color[]*/) { 
            return CS.Call(4, 60, 5, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Texture3D);

// UnityEngine.SparseTexture
var UnityEngine$SparseTexture = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SparseTexture",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    definition: {
        ctor$$Int32$$Int32$$TextureFormat$$Int32: function(a0, a1, a2, a3) { CS.Call(5, 61, 0, true, this, a0, a1, a2, a3); },
        ctor$$Int32$$Int32$$TextureFormat$$Int32$$Boolean: function(a0, a1, a2, a3, a4) { CS.Call(5, 61, 1, true, this, a0, a1, a2, a3, a4); },
        get_tileWidth: function() { return CS.Call(2, 61, 0, false, this); },
        set_tileWidth: function(v) { return CS.Call(3, 61, 0, false, this, v); },
        get_tileHeight: function() { return CS.Call(2, 61, 1, false, this); },
        set_tileHeight: function(v) { return CS.Call(3, 61, 1, false, this, v); },
        get_isCreated: function() { return CS.Call(2, 61, 2, false, this); },
        set_isCreated: function(v) { return CS.Call(3, 61, 2, false, this, v); },
        UnloadTile: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 61, 0, false, this, a0, a1, a2); //Ret: Void
        },
        UpdateTile: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Color32[]*/) { 
            return CS.Call(4, 61, 1, false, this, a0, a1, a2, a3); //Ret: Void
        },
        UpdateTileRaw: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Byte[]*/) { 
            return CS.Call(4, 61, 2, false, this, a0, a1, a2, a3); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SparseTexture);

// UnityEngine.RenderTexture
var UnityEngine$RenderTexture = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RenderTexture",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    staticDefinition: {
        get_active: function() { return CS.Call(2, 62, 15, true); },
        set_active: function(v) { return CS.Call(3, 62, 15, true, v); },
        GetTemporary$$Int32$$Int32$$Int32$$RenderTextureFormat$$RenderTextureReadWrite$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*RenderTextureFormat*/, a4/*RenderTextureReadWrite*/, a5/*Int32*/) { 
            return CS.Call(4, 62, 8, true, a0, a1, a2, a3, a4, a5); //Ret: RenderTexture
        },
        GetTemporary$$Int32$$Int32$$Int32$$RenderTextureFormat$$RenderTextureReadWrite: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*RenderTextureFormat*/, a4/*RenderTextureReadWrite*/) { 
            return CS.Call(4, 62, 9, true, a0, a1, a2, a3, a4); //Ret: RenderTexture
        },
        GetTemporary$$Int32$$Int32$$Int32$$RenderTextureFormat: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*RenderTextureFormat*/) { 
            return CS.Call(4, 62, 10, true, a0, a1, a2, a3); //Ret: RenderTexture
        },
        GetTemporary$$Int32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 62, 11, true, a0, a1, a2); //Ret: RenderTexture
        },
        GetTemporary$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 62, 12, true, a0, a1); //Ret: RenderTexture
        },
        ReleaseTemporary: function(a0/*RenderTexture*/) { 
            return CS.Call(4, 62, 13, true, a0); //Ret: Void
        },
        SupportsStencil: function(a0/*RenderTexture*/) { 
            return CS.Call(4, 62, 14, true, a0); //Ret: Boolean
        },
    },
    definition: {
        ctor$$Int32$$Int32$$Int32$$RenderTextureFormat$$RenderTextureReadWrite: function(a0, a1, a2, a3, a4) { CS.Call(5, 62, 0, true, this, a0, a1, a2, a3, a4); },
        ctor$$Int32$$Int32$$Int32$$RenderTextureFormat: function(a0, a1, a2, a3) { CS.Call(5, 62, 1, true, this, a0, a1, a2, a3); },
        ctor$$Int32$$Int32$$Int32: function(a0, a1, a2) { CS.Call(5, 62, 2, true, this, a0, a1, a2); },
        get_width: function() { return CS.Call(2, 62, 0, false, this); },
        set_width: function(v) { return CS.Call(3, 62, 0, false, this, v); },
        get_height: function() { return CS.Call(2, 62, 1, false, this); },
        set_height: function(v) { return CS.Call(3, 62, 1, false, this, v); },
        get_depth: function() { return CS.Call(2, 62, 2, false, this); },
        set_depth: function(v) { return CS.Call(3, 62, 2, false, this, v); },
        get_isPowerOfTwo: function() { return CS.Call(2, 62, 3, false, this); },
        set_isPowerOfTwo: function(v) { return CS.Call(3, 62, 3, false, this, v); },
        get_sRGB: function() { return CS.Call(2, 62, 4, false, this); },
        set_sRGB: function(v) { return CS.Call(3, 62, 4, false, this, v); },
        get_format: function() { return CS.Call(2, 62, 5, false, this); },
        set_format: function(v) { return CS.Call(3, 62, 5, false, this, v); },
        get_useMipMap: function() { return CS.Call(2, 62, 6, false, this); },
        set_useMipMap: function(v) { return CS.Call(3, 62, 6, false, this, v); },
        get_generateMips: function() { return CS.Call(2, 62, 7, false, this); },
        set_generateMips: function(v) { return CS.Call(3, 62, 7, false, this, v); },
        get_isCubemap: function() { return CS.Call(2, 62, 8, false, this); },
        set_isCubemap: function(v) { return CS.Call(3, 62, 8, false, this, v); },
        get_isVolume: function() { return CS.Call(2, 62, 9, false, this); },
        set_isVolume: function(v) { return CS.Call(3, 62, 9, false, this, v); },
        get_volumeDepth: function() { return CS.Call(2, 62, 10, false, this); },
        set_volumeDepth: function(v) { return CS.Call(3, 62, 10, false, this, v); },
        get_antiAliasing: function() { return CS.Call(2, 62, 11, false, this); },
        set_antiAliasing: function(v) { return CS.Call(3, 62, 11, false, this, v); },
        get_enableRandomWrite: function() { return CS.Call(2, 62, 12, false, this); },
        set_enableRandomWrite: function(v) { return CS.Call(3, 62, 12, false, this, v); },
        get_colorBuffer: function() { return CS.Call(2, 62, 13, false, this); },
        set_colorBuffer: function(v) { return CS.Call(3, 62, 13, false, this, v); },
        get_depthBuffer: function() { return CS.Call(2, 62, 14, false, this); },
        set_depthBuffer: function(v) { return CS.Call(3, 62, 14, false, this, v); },
        Create: function() { 
            return CS.Call(4, 62, 0, false, this); //Ret: Boolean
        },
        DiscardContents$$Boolean$$Boolean: function(a0/*Boolean*/, a1/*Boolean*/) { 
            return CS.Call(4, 62, 1, false, this, a0, a1); //Ret: Void
        },
        DiscardContents: function() { 
            return CS.Call(4, 62, 2, false, this); //Ret: Void
        },
        GetTexelOffset: function() { 
            return CS.Call(4, 62, 3, false, this); //Ret: Vector2
        },
        IsCreated: function() { 
            return CS.Call(4, 62, 4, false, this); //Ret: Boolean
        },
        MarkRestoreExpected: function() { 
            return CS.Call(4, 62, 5, false, this); //Ret: Void
        },
        Release: function() { 
            return CS.Call(4, 62, 6, false, this); //Ret: Void
        },
        SetGlobalShaderProperty: function(a0/*String*/) { 
            return CS.Call(4, 62, 7, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RenderTexture);

// UnityEngine.GUIElement
var UnityEngine$GUIElement = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUIElement",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 63, 0, true, this); },
        GetScreenRect$$Camera: function(a0/*Camera*/) { 
            return CS.Call(4, 63, 0, false, this, a0); //Ret: Rect
        },
        GetScreenRect: function() { 
            return CS.Call(4, 63, 1, false, this); //Ret: Rect
        },
        HitTest$$Vector3$$Camera: function(a0/*Vector3*/, a1/*Camera*/) { 
            return CS.Call(4, 63, 2, false, this, a0, a1); //Ret: Boolean
        },
        HitTest$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 63, 3, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUIElement);

// UnityEngine.GUITexture
var UnityEngine$GUITexture = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUITexture",
    Kind: "Class",
    baseTypeName: "UnityEngine.GUIElement",
    definition: {
        ctor: function() { CS.Call(5, 64, 0, true, this); },
        get_color: function() { return CS.Call(2, 64, 0, false, this); },
        set_color: function(v) { return CS.Call(3, 64, 0, false, this, v); },
        get_texture: function() { return CS.Call(2, 64, 1, false, this); },
        set_texture: function(v) { return CS.Call(3, 64, 1, false, this, v); },
        get_pixelInset: function() { return CS.Call(2, 64, 2, false, this); },
        set_pixelInset: function(v) { return CS.Call(3, 64, 2, false, this, v); },
        get_border: function() { return CS.Call(2, 64, 3, false, this); },
        set_border: function(v) { return CS.Call(3, 64, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUITexture);

// UnityEngine.GUIText
var UnityEngine$GUIText = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUIText",
    Kind: "Class",
    baseTypeName: "UnityEngine.GUIElement",
    definition: {
        ctor: function() { CS.Call(5, 65, 0, true, this); },
        get_text: function() { return CS.Call(2, 65, 0, false, this); },
        set_text: function(v) { return CS.Call(3, 65, 0, false, this, v); },
        get_material: function() { return CS.Call(2, 65, 1, false, this); },
        set_material: function(v) { return CS.Call(3, 65, 1, false, this, v); },
        get_pixelOffset: function() { return CS.Call(2, 65, 2, false, this); },
        set_pixelOffset: function(v) { return CS.Call(3, 65, 2, false, this, v); },
        get_font: function() { return CS.Call(2, 65, 3, false, this); },
        set_font: function(v) { return CS.Call(3, 65, 3, false, this, v); },
        get_alignment: function() { return CS.Call(2, 65, 4, false, this); },
        set_alignment: function(v) { return CS.Call(3, 65, 4, false, this, v); },
        get_anchor: function() { return CS.Call(2, 65, 5, false, this); },
        set_anchor: function(v) { return CS.Call(3, 65, 5, false, this, v); },
        get_lineSpacing: function() { return CS.Call(2, 65, 6, false, this); },
        set_lineSpacing: function(v) { return CS.Call(3, 65, 6, false, this, v); },
        get_tabSize: function() { return CS.Call(2, 65, 7, false, this); },
        set_tabSize: function(v) { return CS.Call(3, 65, 7, false, this, v); },
        get_fontSize: function() { return CS.Call(2, 65, 8, false, this); },
        set_fontSize: function(v) { return CS.Call(3, 65, 8, false, this, v); },
        get_fontStyle: function() { return CS.Call(2, 65, 9, false, this); },
        set_fontStyle: function(v) { return CS.Call(3, 65, 9, false, this, v); },
        get_richText: function() { return CS.Call(2, 65, 10, false, this); },
        set_richText: function(v) { return CS.Call(3, 65, 10, false, this, v); },
        get_color: function() { return CS.Call(2, 65, 11, false, this); },
        set_color: function(v) { return CS.Call(3, 65, 11, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUIText);

// UnityEngine.CharacterInfo
var UnityEngine$CharacterInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CharacterInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        index: {
            get: function() { return CS.Call(0, 66, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 66, 0, false, this, v); }
        },
        uv: {
            get: function() { return CS.Call(0, 66, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 66, 1, false, this, v); }
        },
        vert: {
            get: function() { return CS.Call(0, 66, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 66, 2, false, this, v); }
        },
        width: {
            get: function() { return CS.Call(0, 66, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 66, 3, false, this, v); }
        },
        size: {
            get: function() { return CS.Call(0, 66, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 66, 4, false, this, v); }
        },
        style: {
            get: function() { return CS.Call(0, 66, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 66, 5, false, this, v); }
        },
        flipped: {
            get: function() { return CS.Call(0, 66, 6, false, this); }, 
            set: function(v) { return CS.Call(1, 66, 6, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 66, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CharacterInfo);

// UnityEngine.Font
var UnityEngine$Font = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Font",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        add_textureRebuilt: function(a0/*Action`1*/) { 
            return CS.Call(4, 67, 7, true, a0); //Ret: Void
        },
        GetMaxVertsForString: function(a0/*String*/) { 
            return CS.Call(4, 67, 8, true, a0); //Ret: Int32
        },
        remove_textureRebuilt: function(a0/*Action`1*/) { 
            return CS.Call(4, 67, 9, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 67, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 67, 1, true, this, a0); },
        get_material: function() { return CS.Call(2, 67, 0, false, this); },
        set_material: function(v) { return CS.Call(3, 67, 0, false, this, v); },
        get_fontNames: function() { return CS.Call(2, 67, 1, false, this); },
        set_fontNames: function(v) { return CS.Call(3, 67, 1, false, this, v); },
        get_characterInfo: function() { return CS.Call(2, 67, 2, false, this); },
        set_characterInfo: function(v) { return CS.Call(3, 67, 2, false, this, v); },
        get_dynamic: function() { return CS.Call(2, 67, 3, false, this); },
        set_dynamic: function(v) { return CS.Call(3, 67, 3, false, this, v); },
        get_fontSize: function() { return CS.Call(2, 67, 4, false, this); },
        set_fontSize: function(v) { return CS.Call(3, 67, 4, false, this, v); },
        GetCharacterInfo$$Char$$CharacterInfo$$Int32$$FontStyle: function(a0/*Char*/, a1/*CharacterInfo&*/, a2/*Int32*/, a3/*FontStyle*/) { 
            return CS.Call(4, 67, 0, false, this, a0, a1, a2, a3); //Ret: Boolean
        },
        GetCharacterInfo$$Char$$CharacterInfo$$Int32: function(a0/*Char*/, a1/*CharacterInfo&*/, a2/*Int32*/) { 
            return CS.Call(4, 67, 1, false, this, a0, a1, a2); //Ret: Boolean
        },
        GetCharacterInfo$$Char$$CharacterInfo: function(a0/*Char*/, a1/*CharacterInfo&*/) { 
            return CS.Call(4, 67, 2, false, this, a0, a1); //Ret: Boolean
        },
        HasCharacter: function(a0/*Char*/) { 
            return CS.Call(4, 67, 3, false, this, a0); //Ret: Boolean
        },
        RequestCharactersInTexture$$String$$Int32$$FontStyle: function(a0/*String*/, a1/*Int32*/, a2/*FontStyle*/) { 
            return CS.Call(4, 67, 4, false, this, a0, a1, a2); //Ret: Void
        },
        RequestCharactersInTexture$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 67, 5, false, this, a0, a1); //Ret: Void
        },
        RequestCharactersInTexture$$String: function(a0/*String*/) { 
            return CS.Call(4, 67, 6, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Font);

// UnityEngine.UICharInfo
var UnityEngine$UICharInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.UICharInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        cursorPos: {
            get: function() { return CS.Call(0, 68, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 68, 0, false, this, v); }
        },
        charWidth: {
            get: function() { return CS.Call(0, 68, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 68, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 68, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$UICharInfo);

// UnityEngine.UILineInfo
var UnityEngine$UILineInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.UILineInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        startCharIdx: {
            get: function() { return CS.Call(0, 69, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 69, 0, false, this, v); }
        },
        height: {
            get: function() { return CS.Call(0, 69, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 69, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 69, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$UILineInfo);

// UnityEngine.GUILayer
var UnityEngine$GUILayer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUILayer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 70, 0, true, this); },
        HitTest: function(a0/*Vector3*/) { 
            return CS.Call(4, 70, 0, false, this, a0); //Ret: GUIElement
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUILayer);

// UnityEngine.LOD
var UnityEngine$LOD = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LOD",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        screenRelativeTransitionHeight: {
            get: function() { return CS.Call(0, 71, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 0, false, this, v); }
        },
        renderers: {
            get: function() { return CS.Call(0, 71, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 71, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 71, 0, true, this); },
        ctor$$Single$$Renderer$Array: function(a0, a1) { CS.Call(5, 71, 1, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LOD);

// UnityEngine.LODGroup
var UnityEngine$LODGroup = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LODGroup",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 72, 0, true, this); },
        get_localReferencePoint: function() { return CS.Call(2, 72, 0, false, this); },
        set_localReferencePoint: function(v) { return CS.Call(3, 72, 0, false, this, v); },
        get_size: function() { return CS.Call(2, 72, 1, false, this); },
        set_size: function(v) { return CS.Call(3, 72, 1, false, this, v); },
        get_lodCount: function() { return CS.Call(2, 72, 2, false, this); },
        set_lodCount: function(v) { return CS.Call(3, 72, 2, false, this, v); },
        get_enabled: function() { return CS.Call(2, 72, 3, false, this); },
        set_enabled: function(v) { return CS.Call(3, 72, 3, false, this, v); },
        ForceLOD: function(a0/*Int32*/) { 
            return CS.Call(4, 72, 0, false, this, a0); //Ret: Void
        },
        RecalculateBounds: function() { 
            return CS.Call(4, 72, 1, false, this); //Ret: Void
        },
        SetLODS: function(a0/*LOD[]*/) { 
            return CS.Call(4, 72, 2, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LODGroup);

// UnityEngine.GradientColorKey
var UnityEngine$GradientColorKey = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GradientColorKey",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        color: {
            get: function() { return CS.Call(0, 73, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 73, 0, false, this, v); }
        },
        time: {
            get: function() { return CS.Call(0, 73, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 73, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 73, 0, true, this); },
        ctor$$Color$$Single: function(a0, a1) { CS.Call(5, 73, 1, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GradientColorKey);

// UnityEngine.GradientAlphaKey
var UnityEngine$GradientAlphaKey = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GradientAlphaKey",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        alpha: {
            get: function() { return CS.Call(0, 74, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 74, 0, false, this, v); }
        },
        time: {
            get: function() { return CS.Call(0, 74, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 74, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 74, 0, true, this); },
        ctor$$Single$$Single: function(a0, a1) { CS.Call(5, 74, 1, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GradientAlphaKey);

// UnityEngine.Gradient
var UnityEngine$Gradient = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Gradient",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 75, 0, true, this); },
        get_colorKeys: function() { return CS.Call(2, 75, 0, false, this); },
        set_colorKeys: function(v) { return CS.Call(3, 75, 0, false, this, v); },
        get_alphaKeys: function() { return CS.Call(2, 75, 1, false, this); },
        set_alphaKeys: function(v) { return CS.Call(3, 75, 1, false, this, v); },
        Evaluate: function(a0/*Single*/) { 
            return CS.Call(4, 75, 0, false, this, a0); //Ret: Color
        },
        SetKeys: function(a0/*GradientColorKey[]*/, a1/*GradientAlphaKey[]*/) { 
            return CS.Call(4, 75, 1, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Gradient);

// UnityEngine.GUI
var UnityEngine$GUI = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUI",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_skin: function() { return CS.Call(2, 76, 0, true); },
        set_skin: function(v) { return CS.Call(3, 76, 0, true, v); },
        get_color: function() { return CS.Call(2, 76, 1, true); },
        set_color: function(v) { return CS.Call(3, 76, 1, true, v); },
        get_backgroundColor: function() { return CS.Call(2, 76, 2, true); },
        set_backgroundColor: function(v) { return CS.Call(3, 76, 2, true, v); },
        get_contentColor: function() { return CS.Call(2, 76, 3, true); },
        set_contentColor: function(v) { return CS.Call(3, 76, 3, true, v); },
        get_changed: function() { return CS.Call(2, 76, 4, true); },
        set_changed: function(v) { return CS.Call(3, 76, 4, true, v); },
        get_enabled: function() { return CS.Call(2, 76, 5, true); },
        set_enabled: function(v) { return CS.Call(3, 76, 5, true, v); },
        get_matrix: function() { return CS.Call(2, 76, 6, true); },
        set_matrix: function(v) { return CS.Call(3, 76, 6, true, v); },
        get_tooltip: function() { return CS.Call(2, 76, 7, true); },
        set_tooltip: function(v) { return CS.Call(3, 76, 7, true, v); },
        get_depth: function() { return CS.Call(2, 76, 8, true); },
        set_depth: function(v) { return CS.Call(3, 76, 8, true, v); },
        BeginGroup$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 0, true, a0, a1, a2); //Ret: Void
        },
        BeginGroup$$Rect$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Texture*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 1, true, a0, a1, a2); //Ret: Void
        },
        BeginGroup$$Rect$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*GUIContent*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 2, true, a0, a1, a2); //Ret: Void
        },
        BeginGroup$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 76, 3, true, a0, a1); //Ret: Void
        },
        BeginGroup$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 76, 4, true, a0, a1); //Ret: Void
        },
        BeginGroup$$Rect$$GUIStyle: function(a0/*Rect*/, a1/*GUIStyle*/) { 
            return CS.Call(4, 76, 5, true, a0, a1); //Ret: Void
        },
        BeginGroup$$Rect$$GUIContent: function(a0/*Rect*/, a1/*GUIContent*/) { 
            return CS.Call(4, 76, 6, true, a0, a1); //Ret: Void
        },
        BeginGroup$$Rect: function(a0/*Rect*/) { 
            return CS.Call(4, 76, 7, true, a0); //Ret: Void
        },
        BeginScrollView$$Rect$$Vector2$$Rect$$Boolean$$Boolean$$GUIStyle$$GUIStyle: function(a0/*Rect*/, a1/*Vector2*/, a2/*Rect*/, a3/*Boolean*/, a4/*Boolean*/, a5/*GUIStyle*/, a6/*GUIStyle*/) { 
            return CS.Call(4, 76, 8, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Vector2
        },
        BeginScrollView$$Rect$$Vector2$$Rect$$GUIStyle$$GUIStyle: function(a0/*Rect*/, a1/*Vector2*/, a2/*Rect*/, a3/*GUIStyle*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 76, 9, true, a0, a1, a2, a3, a4); //Ret: Vector2
        },
        BeginScrollView$$Rect$$Vector2$$Rect$$Boolean$$Boolean: function(a0/*Rect*/, a1/*Vector2*/, a2/*Rect*/, a3/*Boolean*/, a4/*Boolean*/) { 
            return CS.Call(4, 76, 10, true, a0, a1, a2, a3, a4); //Ret: Vector2
        },
        BeginScrollView$$Rect$$Vector2$$Rect: function(a0/*Rect*/, a1/*Vector2*/, a2/*Rect*/) { 
            return CS.Call(4, 76, 11, true, a0, a1, a2); //Ret: Vector2
        },
        Box$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 12, true, a0, a1, a2); //Ret: Void
        },
        Box$$Rect$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Texture*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 13, true, a0, a1, a2); //Ret: Void
        },
        Box$$Rect$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*GUIContent*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 14, true, a0, a1, a2); //Ret: Void
        },
        Box$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 76, 15, true, a0, a1); //Ret: Void
        },
        Box$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 76, 16, true, a0, a1); //Ret: Void
        },
        Box$$Rect$$GUIContent: function(a0/*Rect*/, a1/*GUIContent*/) { 
            return CS.Call(4, 76, 17, true, a0, a1); //Ret: Void
        },
        BringWindowToBack: function(a0/*Int32*/) { 
            return CS.Call(4, 76, 18, true, a0); //Ret: Void
        },
        BringWindowToFront: function(a0/*Int32*/) { 
            return CS.Call(4, 76, 19, true, a0); //Ret: Void
        },
        Button$$Rect$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Texture*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 20, true, a0, a1, a2); //Ret: Boolean
        },
        Button$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 21, true, a0, a1, a2); //Ret: Boolean
        },
        Button$$Rect$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*GUIContent*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 22, true, a0, a1, a2); //Ret: Boolean
        },
        Button$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 76, 23, true, a0, a1); //Ret: Boolean
        },
        Button$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 76, 24, true, a0, a1); //Ret: Boolean
        },
        Button$$Rect$$GUIContent: function(a0/*Rect*/, a1/*GUIContent*/) { 
            return CS.Call(4, 76, 25, true, a0, a1); //Ret: Boolean
        },
        DragWindow$$Rect: function(a0/*Rect*/) { 
            return CS.Call(4, 76, 26, true, a0); //Ret: Void
        },
        DragWindow: function() { 
            return CS.Call(4, 76, 27, true); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$ScaleMode$$Boolean$$Single: function(a0/*Rect*/, a1/*Texture*/, a2/*ScaleMode*/, a3/*Boolean*/, a4/*Single*/) { 
            return CS.Call(4, 76, 28, true, a0, a1, a2, a3, a4); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$ScaleMode$$Boolean: function(a0/*Rect*/, a1/*Texture*/, a2/*ScaleMode*/, a3/*Boolean*/) { 
            return CS.Call(4, 76, 29, true, a0, a1, a2, a3); //Ret: Void
        },
        DrawTexture$$Rect$$Texture$$ScaleMode: function(a0/*Rect*/, a1/*Texture*/, a2/*ScaleMode*/) { 
            return CS.Call(4, 76, 30, true, a0, a1, a2); //Ret: Void
        },
        DrawTexture$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 76, 31, true, a0, a1); //Ret: Void
        },
        DrawTextureWithTexCoords$$Rect$$Texture$$Rect$$Boolean: function(a0/*Rect*/, a1/*Texture*/, a2/*Rect*/, a3/*Boolean*/) { 
            return CS.Call(4, 76, 32, true, a0, a1, a2, a3); //Ret: Void
        },
        DrawTextureWithTexCoords$$Rect$$Texture$$Rect: function(a0/*Rect*/, a1/*Texture*/, a2/*Rect*/) { 
            return CS.Call(4, 76, 33, true, a0, a1, a2); //Ret: Void
        },
        EndGroup: function() { 
            return CS.Call(4, 76, 34, true); //Ret: Void
        },
        EndScrollView$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 76, 35, true, a0); //Ret: Void
        },
        EndScrollView: function() { 
            return CS.Call(4, 76, 36, true); //Ret: Void
        },
        FocusControl: function(a0/*String*/) { 
            return CS.Call(4, 76, 37, true, a0); //Ret: Void
        },
        FocusWindow: function(a0/*Int32*/) { 
            return CS.Call(4, 76, 38, true, a0); //Ret: Void
        },
        GetNameOfFocusedControl: function() { 
            return CS.Call(4, 76, 39, true); //Ret: String
        },
        HorizontalScrollbar$$Rect$$Single$$Single$$Single$$Single$$GUIStyle: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/, a5/*GUIStyle*/) { 
            return CS.Call(4, 76, 40, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        HorizontalScrollbar$$Rect$$Single$$Single$$Single$$Single: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 76, 41, true, a0, a1, a2, a3, a4); //Ret: Single
        },
        HorizontalSlider$$Rect$$Single$$Single$$Single$$GUIStyle$$GUIStyle: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUIStyle*/, a5/*GUIStyle*/) { 
            return CS.Call(4, 76, 42, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        HorizontalSlider$$Rect$$Single$$Single$$Single: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 76, 43, true, a0, a1, a2, a3); //Ret: Single
        },
        Label$$Rect$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*GUIContent*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 44, true, a0, a1, a2); //Ret: Void
        },
        Label$$Rect$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Texture*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 45, true, a0, a1, a2); //Ret: Void
        },
        Label$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 46, true, a0, a1, a2); //Ret: Void
        },
        Label$$Rect$$GUIContent: function(a0/*Rect*/, a1/*GUIContent*/) { 
            return CS.Call(4, 76, 47, true, a0, a1); //Ret: Void
        },
        Label$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 76, 48, true, a0, a1); //Ret: Void
        },
        Label$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 76, 49, true, a0, a1); //Ret: Void
        },
        ModalWindow$$Int32$$Rect$$WindowFunction$$GUIContent$$GUIStyle: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*GUIContent*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 76, 50, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        ModalWindow$$Int32$$Rect$$WindowFunction$$String$$GUIStyle: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*String*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 76, 51, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        ModalWindow$$Int32$$Rect$$WindowFunction$$Texture$$GUIStyle: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*Texture*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 76, 52, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        ModalWindow$$Int32$$Rect$$WindowFunction$$String: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*String*/) { 
            return CS.Call(4, 76, 53, true, a0, a1, a2, a3); //Ret: Rect
        },
        ModalWindow$$Int32$$Rect$$WindowFunction$$GUIContent: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*GUIContent*/) { 
            return CS.Call(4, 76, 54, true, a0, a1, a2, a3); //Ret: Rect
        },
        ModalWindow$$Int32$$Rect$$WindowFunction$$Texture: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*Texture*/) { 
            return CS.Call(4, 76, 55, true, a0, a1, a2, a3); //Ret: Rect
        },
        PasswordField$$Rect$$String$$Char$$Int32$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*Char*/, a3/*Int32*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 76, 56, true, a0, a1, a2, a3, a4); //Ret: String
        },
        PasswordField$$Rect$$String$$Char$$Int32: function(a0/*Rect*/, a1/*String*/, a2/*Char*/, a3/*Int32*/) { 
            return CS.Call(4, 76, 57, true, a0, a1, a2, a3); //Ret: String
        },
        PasswordField$$Rect$$String$$Char$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*Char*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 76, 58, true, a0, a1, a2, a3); //Ret: String
        },
        PasswordField$$Rect$$String$$Char: function(a0/*Rect*/, a1/*String*/, a2/*Char*/) { 
            return CS.Call(4, 76, 59, true, a0, a1, a2); //Ret: String
        },
        RepeatButton$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 60, true, a0, a1, a2); //Ret: Boolean
        },
        RepeatButton$$Rect$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Texture*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 61, true, a0, a1, a2); //Ret: Boolean
        },
        RepeatButton$$Rect$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*GUIContent*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 62, true, a0, a1, a2); //Ret: Boolean
        },
        RepeatButton$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 76, 63, true, a0, a1); //Ret: Boolean
        },
        RepeatButton$$Rect$$GUIContent: function(a0/*Rect*/, a1/*GUIContent*/) { 
            return CS.Call(4, 76, 64, true, a0, a1); //Ret: Boolean
        },
        RepeatButton$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 76, 65, true, a0, a1); //Ret: Boolean
        },
        ScrollTo: function(a0/*Rect*/) { 
            return CS.Call(4, 76, 66, true, a0); //Ret: Void
        },
        ScrollTowards: function(a0/*Rect*/, a1/*Single*/) { 
            return CS.Call(4, 76, 67, true, a0, a1); //Ret: Boolean
        },
        SelectionGrid$$Rect$$Int32$$Texture$Array$$Int32$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*Texture[]*/, a3/*Int32*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 76, 68, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        SelectionGrid$$Rect$$Int32$$String$Array$$Int32$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*String[]*/, a3/*Int32*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 76, 69, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        SelectionGrid$$Rect$$Int32$$GUIContent$Array$$Int32$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*GUIContent[]*/, a3/*Int32*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 76, 70, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        SelectionGrid$$Rect$$Int32$$GUIContent$Array$$Int32: function(a0/*Rect*/, a1/*Int32*/, a2/*GUIContent[]*/, a3/*Int32*/) { 
            return CS.Call(4, 76, 71, true, a0, a1, a2, a3); //Ret: Int32
        },
        SelectionGrid$$Rect$$Int32$$String$Array$$Int32: function(a0/*Rect*/, a1/*Int32*/, a2/*String[]*/, a3/*Int32*/) { 
            return CS.Call(4, 76, 72, true, a0, a1, a2, a3); //Ret: Int32
        },
        SelectionGrid$$Rect$$Int32$$Texture$Array$$Int32: function(a0/*Rect*/, a1/*Int32*/, a2/*Texture[]*/, a3/*Int32*/) { 
            return CS.Call(4, 76, 73, true, a0, a1, a2, a3); //Ret: Int32
        },
        SetNextControlName: function(a0/*String*/) { 
            return CS.Call(4, 76, 74, true, a0); //Ret: Void
        },
        Slider: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/, a5/*GUIStyle*/, a6/*GUIStyle*/, a7/*Boolean*/, a8/*Int32*/) { 
            return CS.Call(4, 76, 75, true, a0, a1, a2, a3, a4, a5, a6, a7, a8); //Ret: Single
        },
        TextArea$$Rect$$String$$Int32$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*Int32*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 76, 76, true, a0, a1, a2, a3); //Ret: String
        },
        TextArea$$Rect$$String$$Int32: function(a0/*Rect*/, a1/*String*/, a2/*Int32*/) { 
            return CS.Call(4, 76, 77, true, a0, a1, a2); //Ret: String
        },
        TextArea$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 78, true, a0, a1, a2); //Ret: String
        },
        TextArea$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 76, 79, true, a0, a1); //Ret: String
        },
        TextField$$Rect$$String$$Int32$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*Int32*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 76, 80, true, a0, a1, a2, a3); //Ret: String
        },
        TextField$$Rect$$String$$Int32: function(a0/*Rect*/, a1/*String*/, a2/*Int32*/) { 
            return CS.Call(4, 76, 81, true, a0, a1, a2); //Ret: String
        },
        TextField$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 76, 82, true, a0, a1, a2); //Ret: String
        },
        TextField$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 76, 83, true, a0, a1); //Ret: String
        },
        Toggle$$Rect$$Int32$$Boolean$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*Boolean*/, a3/*GUIContent*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 76, 84, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        Toggle$$Rect$$Boolean$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*Boolean*/, a2/*GUIContent*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 76, 85, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Toggle$$Rect$$Boolean$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Boolean*/, a2/*Texture*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 76, 86, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Toggle$$Rect$$Boolean$$String$$GUIStyle: function(a0/*Rect*/, a1/*Boolean*/, a2/*String*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 76, 87, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Toggle$$Rect$$Boolean$$GUIContent: function(a0/*Rect*/, a1/*Boolean*/, a2/*GUIContent*/) { 
            return CS.Call(4, 76, 88, true, a0, a1, a2); //Ret: Boolean
        },
        Toggle$$Rect$$Boolean$$Texture: function(a0/*Rect*/, a1/*Boolean*/, a2/*Texture*/) { 
            return CS.Call(4, 76, 89, true, a0, a1, a2); //Ret: Boolean
        },
        Toggle$$Rect$$Boolean$$String: function(a0/*Rect*/, a1/*Boolean*/, a2/*String*/) { 
            return CS.Call(4, 76, 90, true, a0, a1, a2); //Ret: Boolean
        },
        Toolbar$$Rect$$Int32$$GUIContent$Array$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*GUIContent[]*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 76, 91, true, a0, a1, a2, a3); //Ret: Int32
        },
        Toolbar$$Rect$$Int32$$Texture$Array$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*Texture[]*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 76, 92, true, a0, a1, a2, a3); //Ret: Int32
        },
        Toolbar$$Rect$$Int32$$String$Array$$GUIStyle: function(a0/*Rect*/, a1/*Int32*/, a2/*String[]*/, a3/*GUIStyle*/) { 
            return CS.Call(4, 76, 93, true, a0, a1, a2, a3); //Ret: Int32
        },
        Toolbar$$Rect$$Int32$$Texture$Array: function(a0/*Rect*/, a1/*Int32*/, a2/*Texture[]*/) { 
            return CS.Call(4, 76, 94, true, a0, a1, a2); //Ret: Int32
        },
        Toolbar$$Rect$$Int32$$GUIContent$Array: function(a0/*Rect*/, a1/*Int32*/, a2/*GUIContent[]*/) { 
            return CS.Call(4, 76, 95, true, a0, a1, a2); //Ret: Int32
        },
        Toolbar$$Rect$$Int32$$String$Array: function(a0/*Rect*/, a1/*Int32*/, a2/*String[]*/) { 
            return CS.Call(4, 76, 96, true, a0, a1, a2); //Ret: Int32
        },
        UnfocusWindow: function() { 
            return CS.Call(4, 76, 97, true); //Ret: Void
        },
        VerticalScrollbar$$Rect$$Single$$Single$$Single$$Single$$GUIStyle: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/, a5/*GUIStyle*/) { 
            return CS.Call(4, 76, 98, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        VerticalScrollbar$$Rect$$Single$$Single$$Single$$Single: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 76, 99, true, a0, a1, a2, a3, a4); //Ret: Single
        },
        VerticalSlider$$Rect$$Single$$Single$$Single$$GUIStyle$$GUIStyle: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUIStyle*/, a5/*GUIStyle*/) { 
            return CS.Call(4, 76, 100, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        VerticalSlider$$Rect$$Single$$Single$$Single: function(a0/*Rect*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 76, 101, true, a0, a1, a2, a3); //Ret: Single
        },
        Window$$Int32$$Rect$$WindowFunction$$String$$GUIStyle: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*String*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 76, 102, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$GUIContent$$GUIStyle: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*GUIContent*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 76, 103, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$Texture$$GUIStyle: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*Texture*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 76, 104, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$Texture: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*Texture*/) { 
            return CS.Call(4, 76, 105, true, a0, a1, a2, a3); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$String: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*String*/) { 
            return CS.Call(4, 76, 106, true, a0, a1, a2, a3); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$GUIContent: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*GUIContent*/) { 
            return CS.Call(4, 76, 107, true, a0, a1, a2, a3); //Ret: Rect
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 76, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUI);

// UnityEngine.GUILayout
var UnityEngine$GUILayout = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUILayout",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        BeginArea$$Rect$$String$$GUIStyle: function(a0/*Rect*/, a1/*String*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 77, 0, true, a0, a1, a2); //Ret: Void
        },
        BeginArea$$Rect$$Texture$$GUIStyle: function(a0/*Rect*/, a1/*Texture*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 77, 1, true, a0, a1, a2); //Ret: Void
        },
        BeginArea$$Rect$$GUIContent$$GUIStyle: function(a0/*Rect*/, a1/*GUIContent*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 77, 2, true, a0, a1, a2); //Ret: Void
        },
        BeginArea$$Rect$$GUIStyle: function(a0/*Rect*/, a1/*GUIStyle*/) { 
            return CS.Call(4, 77, 3, true, a0, a1); //Ret: Void
        },
        BeginArea$$Rect$$GUIContent: function(a0/*Rect*/, a1/*GUIContent*/) { 
            return CS.Call(4, 77, 4, true, a0, a1); //Ret: Void
        },
        BeginArea$$Rect$$Texture: function(a0/*Rect*/, a1/*Texture*/) { 
            return CS.Call(4, 77, 5, true, a0, a1); //Ret: Void
        },
        BeginArea$$Rect$$String: function(a0/*Rect*/, a1/*String*/) { 
            return CS.Call(4, 77, 6, true, a0, a1); //Ret: Void
        },
        BeginArea$$Rect: function(a0/*Rect*/) { 
            return CS.Call(4, 77, 7, true, a0); //Ret: Void
        },
        BeginHorizontal$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 8, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        BeginHorizontal$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 9, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        BeginHorizontal$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 10, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        BeginHorizontal$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIStyle*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 11, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        BeginHorizontal$$GUILayoutOption$Array: function(a0/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 12, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Void
        },
        BeginScrollView$$Vector2$$Boolean$$Boolean$$GUIStyle$$GUIStyle$$GUIStyle$$GUILayoutOption$Array: function(a0/*Vector2*/, a1/*Boolean*/, a2/*Boolean*/, a3/*GUIStyle*/, a4/*GUIStyle*/, a5/*GUIStyle*/, a6/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 13, true, a0, a1, a2, a3, a4, a5, jsb_formatParamsArray(6, a6, arguments)); //Ret: Vector2
        },
        BeginScrollView$$Vector2$$Boolean$$Boolean$$GUIStyle$$GUIStyle$$GUILayoutOption$Array: function(a0/*Vector2*/, a1/*Boolean*/, a2/*Boolean*/, a3/*GUIStyle*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 14, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Vector2
        },
        BeginScrollView$$Vector2$$Boolean$$Boolean$$GUILayoutOption$Array: function(a0/*Vector2*/, a1/*Boolean*/, a2/*Boolean*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 15, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Vector2
        },
        BeginScrollView$$Vector2$$GUIStyle$$GUIStyle$$GUILayoutOption$Array: function(a0/*Vector2*/, a1/*GUIStyle*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 16, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Vector2
        },
        BeginScrollView$$Vector2$$GUIStyle$$GUILayoutOption$Array: function(a0/*Vector2*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 17, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Vector2
        },
        BeginScrollView$$Vector2$$GUILayoutOption$Array: function(a0/*Vector2*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 18, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Vector2
        },
        BeginScrollView$$Vector2$$GUIStyle: function(a0/*Vector2*/, a1/*GUIStyle*/) { 
            return CS.Call(4, 77, 19, true, a0, a1); //Ret: Vector2
        },
        BeginVertical$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 20, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        BeginVertical$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 21, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        BeginVertical$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 22, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        BeginVertical$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIStyle*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 23, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        BeginVertical$$GUILayoutOption$Array: function(a0/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 24, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Void
        },
        Box$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 25, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        Box$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 26, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        Box$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 27, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        Box$$String$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 28, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        Box$$GUIContent$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 29, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        Box$$Texture$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 30, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        Button$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 31, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        Button$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 32, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        Button$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 33, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        Button$$String$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 34, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Boolean
        },
        Button$$Texture$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 35, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Boolean
        },
        Button$$GUIContent$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 36, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Boolean
        },
        EndArea: function() { 
            return CS.Call(4, 77, 37, true); //Ret: Void
        },
        EndHorizontal: function() { 
            return CS.Call(4, 77, 38, true); //Ret: Void
        },
        EndScrollView: function() { 
            return CS.Call(4, 77, 39, true); //Ret: Void
        },
        EndVertical: function() { 
            return CS.Call(4, 77, 40, true); //Ret: Void
        },
        ExpandHeight: function(a0/*Boolean*/) { 
            return CS.Call(4, 77, 41, true, a0); //Ret: GUILayoutOption
        },
        ExpandWidth: function(a0/*Boolean*/) { 
            return CS.Call(4, 77, 42, true, a0); //Ret: GUILayoutOption
        },
        FlexibleSpace: function() { 
            return CS.Call(4, 77, 43, true); //Ret: Void
        },
        Height: function(a0/*Single*/) { 
            return CS.Call(4, 77, 44, true, a0); //Ret: GUILayoutOption
        },
        HorizontalScrollbar$$Single$$Single$$Single$$Single$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 45, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Single
        },
        HorizontalScrollbar$$Single$$Single$$Single$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 46, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Single
        },
        HorizontalSlider$$Single$$Single$$Single$$GUIStyle$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*GUIStyle*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 47, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Single
        },
        HorizontalSlider$$Single$$Single$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 48, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Single
        },
        Label$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 49, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        Label$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 50, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        Label$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 51, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Void
        },
        Label$$String$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 52, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        Label$$GUIContent$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 53, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        Label$$Texture$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 54, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        MaxHeight: function(a0/*Single*/) { 
            return CS.Call(4, 77, 55, true, a0); //Ret: GUILayoutOption
        },
        MaxWidth: function(a0/*Single*/) { 
            return CS.Call(4, 77, 56, true, a0); //Ret: GUILayoutOption
        },
        MinHeight: function(a0/*Single*/) { 
            return CS.Call(4, 77, 57, true, a0); //Ret: GUILayoutOption
        },
        MinWidth: function(a0/*Single*/) { 
            return CS.Call(4, 77, 58, true, a0); //Ret: GUILayoutOption
        },
        PasswordField$$String$$Char$$Int32$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*Char*/, a2/*Int32*/, a3/*GUIStyle*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 59, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: String
        },
        PasswordField$$String$$Char$$Int32$$GUILayoutOption$Array: function(a0/*String*/, a1/*Char*/, a2/*Int32*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 60, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: String
        },
        PasswordField$$String$$Char$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*Char*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 61, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: String
        },
        PasswordField$$String$$Char$$GUILayoutOption$Array: function(a0/*String*/, a1/*Char*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 62, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: String
        },
        RepeatButton$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 63, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        RepeatButton$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 64, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        RepeatButton$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 65, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        RepeatButton$$Texture$$GUILayoutOption$Array: function(a0/*Texture*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 66, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Boolean
        },
        RepeatButton$$String$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 67, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Boolean
        },
        RepeatButton$$GUIContent$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 68, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Boolean
        },
        SelectionGrid$$Int32$$String$Array$$Int32$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*String[]*/, a2/*Int32*/, a3/*GUIStyle*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 69, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Int32
        },
        SelectionGrid$$Int32$$Texture$Array$$Int32$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Texture[]*/, a2/*Int32*/, a3/*GUIStyle*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 70, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Int32
        },
        SelectionGrid$$Int32$$GUIContent$Array$$Int32$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*GUIContent[]*/, a2/*Int32*/, a3/*GUIStyle*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 71, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Int32
        },
        SelectionGrid$$Int32$$String$Array$$Int32$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*String[]*/, a2/*Int32*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 72, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Int32
        },
        SelectionGrid$$Int32$$Texture$Array$$Int32$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Texture[]*/, a2/*Int32*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 73, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Int32
        },
        SelectionGrid$$Int32$$GUIContent$Array$$Int32$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*GUIContent[]*/, a2/*Int32*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 74, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Int32
        },
        Space: function(a0/*Single*/) { 
            return CS.Call(4, 77, 75, true, a0); //Ret: Void
        },
        TextArea$$String$$Int32$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*Int32*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 76, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: String
        },
        TextArea$$String$$Int32$$GUILayoutOption$Array: function(a0/*String*/, a1/*Int32*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 77, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: String
        },
        TextArea$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 78, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: String
        },
        TextArea$$String$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 79, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: String
        },
        TextField$$String$$Int32$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*Int32*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 80, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: String
        },
        TextField$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 81, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: String
        },
        TextField$$String$$Int32$$GUILayoutOption$Array: function(a0/*String*/, a1/*Int32*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 82, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: String
        },
        TextField$$String$$GUILayoutOption$Array: function(a0/*String*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 83, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: String
        },
        Toggle$$Boolean$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*Boolean*/, a1/*String*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 84, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Boolean
        },
        Toggle$$Boolean$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Boolean*/, a1/*Texture*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 85, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Boolean
        },
        Toggle$$Boolean$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*Boolean*/, a1/*GUIContent*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 86, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Boolean
        },
        Toggle$$Boolean$$String$$GUILayoutOption$Array: function(a0/*Boolean*/, a1/*String*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 87, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        Toggle$$Boolean$$Texture$$GUILayoutOption$Array: function(a0/*Boolean*/, a1/*Texture*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 88, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        Toggle$$Boolean$$GUIContent$$GUILayoutOption$Array: function(a0/*Boolean*/, a1/*GUIContent*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 89, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Boolean
        },
        Toolbar$$Int32$$String$Array$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*String[]*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 90, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Int32
        },
        Toolbar$$Int32$$Texture$Array$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Texture[]*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 91, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Int32
        },
        Toolbar$$Int32$$GUIContent$Array$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*GUIContent[]*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 92, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Int32
        },
        Toolbar$$Int32$$Texture$Array$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Texture[]*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 93, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Int32
        },
        Toolbar$$Int32$$String$Array$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*String[]*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 94, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Int32
        },
        Toolbar$$Int32$$GUIContent$Array$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*GUIContent[]*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 95, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Int32
        },
        VerticalScrollbar$$Single$$Single$$Single$$Single$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 96, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Single
        },
        VerticalScrollbar$$Single$$Single$$Single$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 97, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Single
        },
        VerticalSlider$$Single$$Single$$Single$$GUIStyle$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*GUIStyle*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 98, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Single
        },
        VerticalSlider$$Single$$Single$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 99, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Single
        },
        Width: function(a0/*Single*/) { 
            return CS.Call(4, 77, 100, true, a0); //Ret: GUILayoutOption
        },
        Window$$Int32$$Rect$$WindowFunction$$String$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*String*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 101, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$Texture$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*Texture*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 102, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*GUIContent*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 103, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$String$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*String*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 104, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$Texture$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*Texture*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 105, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Rect
        },
        Window$$Int32$$Rect$$WindowFunction$$GUIContent$$GUILayoutOption$Array: function(a0/*Int32*/, a1/*Rect*/, a2/*WindowFunction*/, a3/*GUIContent*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 77, 106, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Rect
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 77, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUILayout);

// UnityEngine.GUILayoutUtility
var UnityEngine$GUILayoutUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUILayoutUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        BeginGroup: function(a0/*String*/) { 
            return CS.Call(4, 78, 0, true, a0); //Ret: Void
        },
        EndGroup: function(a0/*String*/) { 
            return CS.Call(4, 78, 1, true, a0); //Ret: Void
        },
        GetAspectRect$$Single$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 78, 2, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Rect
        },
        GetAspectRect$$Single$$GUIStyle: function(a0/*Single*/, a1/*GUIStyle*/) { 
            return CS.Call(4, 78, 3, true, a0, a1); //Ret: Rect
        },
        GetAspectRect$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*GUILayoutOption[]*/) { 
            return CS.Call(4, 78, 4, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Rect
        },
        GetAspectRect$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 78, 5, true, a0); //Ret: Rect
        },
        GetLastRect: function() { 
            return CS.Call(4, 78, 6, true); //Ret: Rect
        },
        GetRect$$Single$$Single$$Single$$Single$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUIStyle*/, a5/*GUILayoutOption[]*/) { 
            return CS.Call(4, 78, 7, true, a0, a1, a2, a3, a4, jsb_formatParamsArray(5, a5, arguments)); //Ret: Rect
        },
        GetRect$$Single$$Single$$Single$$Single$$GUIStyle: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUIStyle*/) { 
            return CS.Call(4, 78, 8, true, a0, a1, a2, a3, a4); //Ret: Rect
        },
        GetRect$$Single$$Single$$Single$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*GUILayoutOption[]*/) { 
            return CS.Call(4, 78, 9, true, a0, a1, a2, a3, jsb_formatParamsArray(4, a4, arguments)); //Ret: Rect
        },
        GetRect$$Single$$Single$$GUIStyle$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*GUIStyle*/, a3/*GUILayoutOption[]*/) { 
            return CS.Call(4, 78, 10, true, a0, a1, a2, jsb_formatParamsArray(3, a3, arguments)); //Ret: Rect
        },
        GetRect$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 78, 11, true, a0, a1, a2, a3); //Ret: Rect
        },
        GetRect$$GUIContent$$GUIStyle$$GUILayoutOption$Array: function(a0/*GUIContent*/, a1/*GUIStyle*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 78, 12, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Rect
        },
        GetRect$$Single$$Single$$GUIStyle: function(a0/*Single*/, a1/*Single*/, a2/*GUIStyle*/) { 
            return CS.Call(4, 78, 13, true, a0, a1, a2); //Ret: Rect
        },
        GetRect$$Single$$Single$$GUILayoutOption$Array: function(a0/*Single*/, a1/*Single*/, a2/*GUILayoutOption[]*/) { 
            return CS.Call(4, 78, 14, true, a0, a1, jsb_formatParamsArray(2, a2, arguments)); //Ret: Rect
        },
        GetRect$$GUIContent$$GUIStyle: function(a0/*GUIContent*/, a1/*GUIStyle*/) { 
            return CS.Call(4, 78, 15, true, a0, a1); //Ret: Rect
        },
        GetRect$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 78, 16, true, a0, a1); //Ret: Rect
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 78, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUILayoutUtility);

// UnityEngine.GUILayoutOption
var UnityEngine$GUILayoutOption = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUILayoutOption",
    Kind: "Class",
    baseTypeName: "System.Object",
};
jsb_ReplaceOrPushJsType(UnityEngine$GUILayoutOption);

// UnityEngine.ExitGUIException
var UnityEngine$ExitGUIException = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ExitGUIException",
    Kind: "Class",
    baseTypeName: "System.Exception",
    interfaceNames: ["System.Runtime.Serialization.ISerializable", "System.Runtime.InteropServices._Exception"],
    definition: {
        ctor: function() { CS.Call(5, 80, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ExitGUIException);

// UnityEngine.GUIUtility
var UnityEngine$GUIUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUIUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_hotControl: function() { return CS.Call(2, 81, 0, true); },
        set_hotControl: function(v) { return CS.Call(3, 81, 0, true, v); },
        get_keyboardControl: function() { return CS.Call(2, 81, 1, true); },
        set_keyboardControl: function(v) { return CS.Call(3, 81, 1, true, v); },
        get_hasModalWindow: function() { return CS.Call(2, 81, 2, true); },
        set_hasModalWindow: function(v) { return CS.Call(3, 81, 2, true, v); },
        ExitGUI: function() { 
            return CS.Call(4, 81, 0, true); //Ret: Void
        },
        GetControlID$$Int32$$FocusType$$Rect: function(a0/*Int32*/, a1/*FocusType*/, a2/*Rect*/) { 
            return CS.Call(4, 81, 1, true, a0, a1, a2); //Ret: Int32
        },
        GetControlID$$GUIContent$$FocusType$$Rect: function(a0/*GUIContent*/, a1/*FocusType*/, a2/*Rect*/) { 
            return CS.Call(4, 81, 2, true, a0, a1, a2); //Ret: Int32
        },
        GetControlID$$FocusType$$Rect: function(a0/*FocusType*/, a1/*Rect*/) { 
            return CS.Call(4, 81, 3, true, a0, a1); //Ret: Int32
        },
        GetControlID$$Int32$$FocusType: function(a0/*Int32*/, a1/*FocusType*/) { 
            return CS.Call(4, 81, 4, true, a0, a1); //Ret: Int32
        },
        GetControlID$$GUIContent$$FocusType: function(a0/*GUIContent*/, a1/*FocusType*/) { 
            return CS.Call(4, 81, 5, true, a0, a1); //Ret: Int32
        },
        GetControlID$$FocusType: function(a0/*FocusType*/) { 
            return CS.Call(4, 81, 6, true, a0); //Ret: Int32
        },
        GetStateObject: function(a0/*Type*/, a1/*Int32*/) { 
            return CS.Call(4, 81, 7, true, a0.get_FullName(), a1); //Ret: Object
        },
        GUIToScreenPoint: function(a0/*Vector2*/) { 
            return CS.Call(4, 81, 8, true, a0); //Ret: Vector2
        },
        QueryStateObject: function(a0/*Type*/, a1/*Int32*/) { 
            return CS.Call(4, 81, 9, true, a0.get_FullName(), a1); //Ret: Object
        },
        RotateAroundPivot: function(a0/*Single*/, a1/*Vector2*/) { 
            return CS.Call(4, 81, 10, true, a0, a1); //Ret: Void
        },
        ScaleAroundPivot: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 81, 11, true, a0, a1); //Ret: Void
        },
        ScreenToGUIPoint: function(a0/*Vector2*/) { 
            return CS.Call(4, 81, 12, true, a0); //Ret: Vector2
        },
        ScreenToGUIRect: function(a0/*Rect*/) { 
            return CS.Call(4, 81, 13, true, a0); //Ret: Rect
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 81, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUIUtility);

// UnityEngine.GUISettings
var UnityEngine$GUISettings = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUISettings",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 82, 0, true, this); },
        get_doubleClickSelectsWord: function() { return CS.Call(2, 82, 0, false, this); },
        set_doubleClickSelectsWord: function(v) { return CS.Call(3, 82, 0, false, this, v); },
        get_tripleClickSelectsLine: function() { return CS.Call(2, 82, 1, false, this); },
        set_tripleClickSelectsLine: function(v) { return CS.Call(3, 82, 1, false, this, v); },
        get_cursorColor: function() { return CS.Call(2, 82, 2, false, this); },
        set_cursorColor: function(v) { return CS.Call(3, 82, 2, false, this, v); },
        get_cursorFlashSpeed: function() { return CS.Call(2, 82, 3, false, this); },
        set_cursorFlashSpeed: function(v) { return CS.Call(3, 82, 3, false, this, v); },
        get_selectionColor: function() { return CS.Call(2, 82, 4, false, this); },
        set_selectionColor: function(v) { return CS.Call(3, 82, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUISettings);

// UnityEngine.GUISkin
var UnityEngine$GUISkin = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUISkin",
    Kind: "Class",
    baseTypeName: "UnityEngine.ScriptableObject",
    definition: {
        ctor: function() { CS.Call(5, 83, 0, true, this); },
        get_font: function() { return CS.Call(2, 83, 0, false, this); },
        set_font: function(v) { return CS.Call(3, 83, 0, false, this, v); },
        get_box: function() { return CS.Call(2, 83, 1, false, this); },
        set_box: function(v) { return CS.Call(3, 83, 1, false, this, v); },
        get_label: function() { return CS.Call(2, 83, 2, false, this); },
        set_label: function(v) { return CS.Call(3, 83, 2, false, this, v); },
        get_textField: function() { return CS.Call(2, 83, 3, false, this); },
        set_textField: function(v) { return CS.Call(3, 83, 3, false, this, v); },
        get_textArea: function() { return CS.Call(2, 83, 4, false, this); },
        set_textArea: function(v) { return CS.Call(3, 83, 4, false, this, v); },
        get_button: function() { return CS.Call(2, 83, 5, false, this); },
        set_button: function(v) { return CS.Call(3, 83, 5, false, this, v); },
        get_toggle: function() { return CS.Call(2, 83, 6, false, this); },
        set_toggle: function(v) { return CS.Call(3, 83, 6, false, this, v); },
        get_window: function() { return CS.Call(2, 83, 7, false, this); },
        set_window: function(v) { return CS.Call(3, 83, 7, false, this, v); },
        get_horizontalSlider: function() { return CS.Call(2, 83, 8, false, this); },
        set_horizontalSlider: function(v) { return CS.Call(3, 83, 8, false, this, v); },
        get_horizontalSliderThumb: function() { return CS.Call(2, 83, 9, false, this); },
        set_horizontalSliderThumb: function(v) { return CS.Call(3, 83, 9, false, this, v); },
        get_verticalSlider: function() { return CS.Call(2, 83, 10, false, this); },
        set_verticalSlider: function(v) { return CS.Call(3, 83, 10, false, this, v); },
        get_verticalSliderThumb: function() { return CS.Call(2, 83, 11, false, this); },
        set_verticalSliderThumb: function(v) { return CS.Call(3, 83, 11, false, this, v); },
        get_horizontalScrollbar: function() { return CS.Call(2, 83, 12, false, this); },
        set_horizontalScrollbar: function(v) { return CS.Call(3, 83, 12, false, this, v); },
        get_horizontalScrollbarThumb: function() { return CS.Call(2, 83, 13, false, this); },
        set_horizontalScrollbarThumb: function(v) { return CS.Call(3, 83, 13, false, this, v); },
        get_horizontalScrollbarLeftButton: function() { return CS.Call(2, 83, 14, false, this); },
        set_horizontalScrollbarLeftButton: function(v) { return CS.Call(3, 83, 14, false, this, v); },
        get_horizontalScrollbarRightButton: function() { return CS.Call(2, 83, 15, false, this); },
        set_horizontalScrollbarRightButton: function(v) { return CS.Call(3, 83, 15, false, this, v); },
        get_verticalScrollbar: function() { return CS.Call(2, 83, 16, false, this); },
        set_verticalScrollbar: function(v) { return CS.Call(3, 83, 16, false, this, v); },
        get_verticalScrollbarThumb: function() { return CS.Call(2, 83, 17, false, this); },
        set_verticalScrollbarThumb: function(v) { return CS.Call(3, 83, 17, false, this, v); },
        get_verticalScrollbarUpButton: function() { return CS.Call(2, 83, 18, false, this); },
        set_verticalScrollbarUpButton: function(v) { return CS.Call(3, 83, 18, false, this, v); },
        get_verticalScrollbarDownButton: function() { return CS.Call(2, 83, 19, false, this); },
        set_verticalScrollbarDownButton: function(v) { return CS.Call(3, 83, 19, false, this, v); },
        get_scrollView: function() { return CS.Call(2, 83, 20, false, this); },
        set_scrollView: function(v) { return CS.Call(3, 83, 20, false, this, v); },
        get_customStyles: function() { return CS.Call(2, 83, 21, false, this); },
        set_customStyles: function(v) { return CS.Call(3, 83, 21, false, this, v); },
        get_settings: function() { return CS.Call(2, 83, 22, false, this); },
        set_settings: function(v) { return CS.Call(3, 83, 22, false, this, v); },
        FindStyle: function(a0/*String*/) { 
            return CS.Call(4, 83, 0, false, this, a0); //Ret: GUIStyle
        },
        GetEnumerator: function() { 
            return CS.Call(4, 83, 1, false, this); //Ret: IEnumerator
        },
        GetStyle: function(a0/*String*/) { 
            return CS.Call(4, 83, 2, false, this, a0); //Ret: GUIStyle
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUISkin);

// UnityEngine.GUIContent
var UnityEngine$GUIContent = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUIContent",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        none: {
            get: function() { return CS.Call(0, 84, 0, true); }, 
            set: function(v) { return CS.Call(1, 84, 0, true, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 84, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 84, 1, true, this, a0); },
        ctor$$Texture: function(a0) { CS.Call(5, 84, 2, true, this, a0); },
        ctor$$String$$Texture: function(a0, a1) { CS.Call(5, 84, 3, true, this, a0, a1); },
        ctor$$String$$String: function(a0, a1) { CS.Call(5, 84, 4, true, this, a0, a1); },
        ctor$$Texture$$String: function(a0, a1) { CS.Call(5, 84, 5, true, this, a0, a1); },
        ctor$$String$$Texture$$String: function(a0, a1, a2) { CS.Call(5, 84, 6, true, this, a0, a1, a2); },
        ctor$$GUIContent: function(a0) { CS.Call(5, 84, 7, true, this, a0); },
        get_text: function() { return CS.Call(2, 84, 0, false, this); },
        set_text: function(v) { return CS.Call(3, 84, 0, false, this, v); },
        get_image: function() { return CS.Call(2, 84, 1, false, this); },
        set_image: function(v) { return CS.Call(3, 84, 1, false, this, v); },
        get_tooltip: function() { return CS.Call(2, 84, 2, false, this); },
        set_tooltip: function(v) { return CS.Call(3, 84, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUIContent);

// UnityEngine.GUIStyleState
var UnityEngine$GUIStyleState = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUIStyleState",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 85, 0, true, this); },
        get_background: function() { return CS.Call(2, 85, 0, false, this); },
        set_background: function(v) { return CS.Call(3, 85, 0, false, this, v); },
        get_textColor: function() { return CS.Call(2, 85, 1, false, this); },
        set_textColor: function(v) { return CS.Call(3, 85, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUIStyleState);

// UnityEngine.RectOffset
var UnityEngine$RectOffset = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RectOffset",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 86, 0, true, this); },
        ctor$$Int32$$Int32$$Int32$$Int32: function(a0, a1, a2, a3) { CS.Call(5, 86, 1, true, this, a0, a1, a2, a3); },
        get_left: function() { return CS.Call(2, 86, 0, false, this); },
        set_left: function(v) { return CS.Call(3, 86, 0, false, this, v); },
        get_right: function() { return CS.Call(2, 86, 1, false, this); },
        set_right: function(v) { return CS.Call(3, 86, 1, false, this, v); },
        get_top: function() { return CS.Call(2, 86, 2, false, this); },
        set_top: function(v) { return CS.Call(3, 86, 2, false, this, v); },
        get_bottom: function() { return CS.Call(2, 86, 3, false, this); },
        set_bottom: function(v) { return CS.Call(3, 86, 3, false, this, v); },
        get_horizontal: function() { return CS.Call(2, 86, 4, false, this); },
        set_horizontal: function(v) { return CS.Call(3, 86, 4, false, this, v); },
        get_vertical: function() { return CS.Call(2, 86, 5, false, this); },
        set_vertical: function(v) { return CS.Call(3, 86, 5, false, this, v); },
        Add: function(a0/*Rect*/) { 
            return CS.Call(4, 86, 0, false, this, a0); //Ret: Rect
        },
        Remove: function(a0/*Rect*/) { 
            return CS.Call(4, 86, 1, false, this, a0); //Ret: Rect
        },
        toString: function() { 
            return CS.Call(4, 86, 2, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RectOffset);

// UnityEngine.GUIStyle
var UnityEngine$GUIStyle = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GUIStyle",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_none: function() { return CS.Call(2, 87, 27, true); },
        set_none: function(v) { return CS.Call(3, 87, 27, true, v); },
        op_Implicit: function(a0/*String*/) { 
            return CS.Call(4, 87, 15, true, a0); //Ret: GUIStyle
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 87, 0, true, this); },
        ctor$$GUIStyle: function(a0) { CS.Call(5, 87, 1, true, this, a0); },
        get_name: function() { return CS.Call(2, 87, 0, false, this); },
        set_name: function(v) { return CS.Call(3, 87, 0, false, this, v); },
        get_normal: function() { return CS.Call(2, 87, 1, false, this); },
        set_normal: function(v) { return CS.Call(3, 87, 1, false, this, v); },
        get_hover: function() { return CS.Call(2, 87, 2, false, this); },
        set_hover: function(v) { return CS.Call(3, 87, 2, false, this, v); },
        get_active: function() { return CS.Call(2, 87, 3, false, this); },
        set_active: function(v) { return CS.Call(3, 87, 3, false, this, v); },
        get_onNormal: function() { return CS.Call(2, 87, 4, false, this); },
        set_onNormal: function(v) { return CS.Call(3, 87, 4, false, this, v); },
        get_onHover: function() { return CS.Call(2, 87, 5, false, this); },
        set_onHover: function(v) { return CS.Call(3, 87, 5, false, this, v); },
        get_onActive: function() { return CS.Call(2, 87, 6, false, this); },
        set_onActive: function(v) { return CS.Call(3, 87, 6, false, this, v); },
        get_focused: function() { return CS.Call(2, 87, 7, false, this); },
        set_focused: function(v) { return CS.Call(3, 87, 7, false, this, v); },
        get_onFocused: function() { return CS.Call(2, 87, 8, false, this); },
        set_onFocused: function(v) { return CS.Call(3, 87, 8, false, this, v); },
        get_border: function() { return CS.Call(2, 87, 9, false, this); },
        set_border: function(v) { return CS.Call(3, 87, 9, false, this, v); },
        get_margin: function() { return CS.Call(2, 87, 10, false, this); },
        set_margin: function(v) { return CS.Call(3, 87, 10, false, this, v); },
        get_padding: function() { return CS.Call(2, 87, 11, false, this); },
        set_padding: function(v) { return CS.Call(3, 87, 11, false, this, v); },
        get_overflow: function() { return CS.Call(2, 87, 12, false, this); },
        set_overflow: function(v) { return CS.Call(3, 87, 12, false, this, v); },
        get_imagePosition: function() { return CS.Call(2, 87, 13, false, this); },
        set_imagePosition: function(v) { return CS.Call(3, 87, 13, false, this, v); },
        get_alignment: function() { return CS.Call(2, 87, 14, false, this); },
        set_alignment: function(v) { return CS.Call(3, 87, 14, false, this, v); },
        get_wordWrap: function() { return CS.Call(2, 87, 15, false, this); },
        set_wordWrap: function(v) { return CS.Call(3, 87, 15, false, this, v); },
        get_clipping: function() { return CS.Call(2, 87, 16, false, this); },
        set_clipping: function(v) { return CS.Call(3, 87, 16, false, this, v); },
        get_contentOffset: function() { return CS.Call(2, 87, 17, false, this); },
        set_contentOffset: function(v) { return CS.Call(3, 87, 17, false, this, v); },
        get_fixedWidth: function() { return CS.Call(2, 87, 18, false, this); },
        set_fixedWidth: function(v) { return CS.Call(3, 87, 18, false, this, v); },
        get_fixedHeight: function() { return CS.Call(2, 87, 19, false, this); },
        set_fixedHeight: function(v) { return CS.Call(3, 87, 19, false, this, v); },
        get_stretchWidth: function() { return CS.Call(2, 87, 20, false, this); },
        set_stretchWidth: function(v) { return CS.Call(3, 87, 20, false, this, v); },
        get_stretchHeight: function() { return CS.Call(2, 87, 21, false, this); },
        set_stretchHeight: function(v) { return CS.Call(3, 87, 21, false, this, v); },
        get_font: function() { return CS.Call(2, 87, 22, false, this); },
        set_font: function(v) { return CS.Call(3, 87, 22, false, this, v); },
        get_fontSize: function() { return CS.Call(2, 87, 23, false, this); },
        set_fontSize: function(v) { return CS.Call(3, 87, 23, false, this, v); },
        get_fontStyle: function() { return CS.Call(2, 87, 24, false, this); },
        set_fontStyle: function(v) { return CS.Call(3, 87, 24, false, this, v); },
        get_richText: function() { return CS.Call(2, 87, 25, false, this); },
        set_richText: function(v) { return CS.Call(3, 87, 25, false, this, v); },
        get_lineHeight: function() { return CS.Call(2, 87, 26, false, this); },
        set_lineHeight: function(v) { return CS.Call(3, 87, 26, false, this, v); },
        get_isHeightDependantOnWidth: function() { return CS.Call(2, 87, 28, false, this); },
        set_isHeightDependantOnWidth: function(v) { return CS.Call(3, 87, 28, false, this, v); },
        CalcHeight: function(a0/*GUIContent*/, a1/*Single*/) { 
            return CS.Call(4, 87, 0, false, this, a0, a1); //Ret: Single
        },
        CalcMinMaxWidth: function(a0/*GUIContent*/, a1/*Single&*/, a2/*Single&*/) { 
            return CS.Call(4, 87, 1, false, this, a0, a1, a2); //Ret: Void
        },
        CalcScreenSize: function(a0/*Vector2*/) { 
            return CS.Call(4, 87, 2, false, this, a0); //Ret: Vector2
        },
        CalcSize: function(a0/*GUIContent*/) { 
            return CS.Call(4, 87, 3, false, this, a0); //Ret: Vector2
        },
        Draw$$Rect$$String$$Boolean$$Boolean$$Boolean$$Boolean: function(a0/*Rect*/, a1/*String*/, a2/*Boolean*/, a3/*Boolean*/, a4/*Boolean*/, a5/*Boolean*/) { 
            return CS.Call(4, 87, 4, false, this, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        Draw$$Rect$$Texture$$Boolean$$Boolean$$Boolean$$Boolean: function(a0/*Rect*/, a1/*Texture*/, a2/*Boolean*/, a3/*Boolean*/, a4/*Boolean*/, a5/*Boolean*/) { 
            return CS.Call(4, 87, 5, false, this, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        Draw$$Rect$$GUIContent$$Boolean$$Boolean$$Boolean$$Boolean: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Boolean*/, a3/*Boolean*/, a4/*Boolean*/, a5/*Boolean*/) { 
            return CS.Call(4, 87, 6, false, this, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        Draw$$Rect$$Boolean$$Boolean$$Boolean$$Boolean: function(a0/*Rect*/, a1/*Boolean*/, a2/*Boolean*/, a3/*Boolean*/, a4/*Boolean*/) { 
            return CS.Call(4, 87, 7, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        Draw$$Rect$$GUIContent$$Int32$$Boolean: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Int32*/, a3/*Boolean*/) { 
            return CS.Call(4, 87, 8, false, this, a0, a1, a2, a3); //Ret: Void
        },
        Draw$$Rect$$GUIContent$$Int32: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Int32*/) { 
            return CS.Call(4, 87, 9, false, this, a0, a1, a2); //Ret: Void
        },
        DrawCursor: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 87, 10, false, this, a0, a1, a2, a3); //Ret: Void
        },
        DrawWithTextSelection: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Int32*/, a3/*Int32*/, a4/*Int32*/) { 
            return CS.Call(4, 87, 11, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        GetCursorPixelPosition: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Int32*/) { 
            return CS.Call(4, 87, 12, false, this, a0, a1, a2); //Ret: Vector2
        },
        GetCursorStringIndex: function(a0/*Rect*/, a1/*GUIContent*/, a2/*Vector2*/) { 
            return CS.Call(4, 87, 13, false, this, a0, a1, a2); //Ret: Int32
        },
        toString: function() { 
            return CS.Call(4, 87, 14, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GUIStyle);

// UnityEngine.Event
var UnityEngine$Event = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Event",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_current: function() { return CS.Call(2, 88, 18, true); },
        set_current: function(v) { return CS.Call(3, 88, 18, true, v); },
        GetEventCount: function() { 
            return CS.Call(4, 88, 5, true); //Ret: Int32
        },
        KeyboardEvent: function(a0/*String*/) { 
            return CS.Call(4, 88, 6, true, a0); //Ret: Event
        },
        PopEvent: function(a0/*Event*/) { 
            return CS.Call(4, 88, 7, true, a0); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 88, 0, true, this); },
        ctor$$Event: function(a0) { CS.Call(5, 88, 1, true, this, a0); },
        get_rawType: function() { return CS.Call(2, 88, 0, false, this); },
        set_rawType: function(v) { return CS.Call(3, 88, 0, false, this, v); },
        get_type: function() { return CS.Call(2, 88, 1, false, this); },
        set_type: function(v) { return CS.Call(3, 88, 1, false, this, v); },
        get_mousePosition: function() { return CS.Call(2, 88, 2, false, this); },
        set_mousePosition: function(v) { return CS.Call(3, 88, 2, false, this, v); },
        get_delta: function() { return CS.Call(2, 88, 3, false, this); },
        set_delta: function(v) { return CS.Call(3, 88, 3, false, this, v); },
        get_button: function() { return CS.Call(2, 88, 4, false, this); },
        set_button: function(v) { return CS.Call(3, 88, 4, false, this, v); },
        get_modifiers: function() { return CS.Call(2, 88, 5, false, this); },
        set_modifiers: function(v) { return CS.Call(3, 88, 5, false, this, v); },
        get_pressure: function() { return CS.Call(2, 88, 6, false, this); },
        set_pressure: function(v) { return CS.Call(3, 88, 6, false, this, v); },
        get_clickCount: function() { return CS.Call(2, 88, 7, false, this); },
        set_clickCount: function(v) { return CS.Call(3, 88, 7, false, this, v); },
        get_character: function() { return CS.Call(2, 88, 8, false, this); },
        set_character: function(v) { return CS.Call(3, 88, 8, false, this, v); },
        get_commandName: function() { return CS.Call(2, 88, 9, false, this); },
        set_commandName: function(v) { return CS.Call(3, 88, 9, false, this, v); },
        get_keyCode: function() { return CS.Call(2, 88, 10, false, this); },
        set_keyCode: function(v) { return CS.Call(3, 88, 10, false, this, v); },
        get_shift: function() { return CS.Call(2, 88, 11, false, this); },
        set_shift: function(v) { return CS.Call(3, 88, 11, false, this, v); },
        get_control: function() { return CS.Call(2, 88, 12, false, this); },
        set_control: function(v) { return CS.Call(3, 88, 12, false, this, v); },
        get_alt: function() { return CS.Call(2, 88, 13, false, this); },
        set_alt: function(v) { return CS.Call(3, 88, 13, false, this, v); },
        get_command: function() { return CS.Call(2, 88, 14, false, this); },
        set_command: function(v) { return CS.Call(3, 88, 14, false, this, v); },
        get_capsLock: function() { return CS.Call(2, 88, 15, false, this); },
        set_capsLock: function(v) { return CS.Call(3, 88, 15, false, this, v); },
        get_numeric: function() { return CS.Call(2, 88, 16, false, this); },
        set_numeric: function(v) { return CS.Call(3, 88, 16, false, this, v); },
        get_functionKey: function() { return CS.Call(2, 88, 17, false, this); },
        set_functionKey: function(v) { return CS.Call(3, 88, 17, false, this, v); },
        get_isKey: function() { return CS.Call(2, 88, 19, false, this); },
        set_isKey: function(v) { return CS.Call(3, 88, 19, false, this, v); },
        get_isMouse: function() { return CS.Call(2, 88, 20, false, this); },
        set_isMouse: function(v) { return CS.Call(3, 88, 20, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 88, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 88, 1, false, this); //Ret: Int32
        },
        GetTypeForControl: function(a0/*Int32*/) { 
            return CS.Call(4, 88, 2, false, this, a0); //Ret: EventType
        },
        toString: function() { 
            return CS.Call(4, 88, 3, false, this); //Ret: String
        },
        Use: function() { 
            return CS.Call(4, 88, 4, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Event);

// UnityEngine.LightProbeGroup
var UnityEngine$LightProbeGroup = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LightProbeGroup",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 89, 0, true, this); },
        get_probePositions: function() { return CS.Call(2, 89, 0, false, this); },
        set_probePositions: function(v) { return CS.Call(3, 89, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LightProbeGroup);

// UnityEngine.Vector2
var UnityEngine$Vector2 = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Vector2",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticFields: {
        kEpsilon: {
            get: function() { return CS.Call(0, 90, 0, true); }, 
            set: function(v) { return CS.Call(1, 90, 0, true, v); }
        },
    },
    fields: {
        x: {
            get: function() { return CS.Call(0, 90, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 90, 1, false, this, v); }
        },
        y: {
            get: function() { return CS.Call(0, 90, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 90, 2, false, this, v); }
        },
    },
    staticDefinition: {
        get_zero: function() { return CS.Call(2, 90, 4, true); },
        set_zero: function(v) { return CS.Call(3, 90, 4, true, v); },
        get_one: function() { return CS.Call(2, 90, 5, true); },
        set_one: function(v) { return CS.Call(3, 90, 5, true, v); },
        get_up: function() { return CS.Call(2, 90, 6, true); },
        set_up: function(v) { return CS.Call(3, 90, 6, true, v); },
        get_right: function() { return CS.Call(2, 90, 7, true); },
        set_right: function(v) { return CS.Call(3, 90, 7, true, v); },
        Angle: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 90, 8, true, a0, a1); //Ret: Single
        },
        ClampMagnitude: function(a0/*Vector2*/, a1/*Single*/) { 
            return CS.Call(4, 90, 9, true, a0, a1); //Ret: Vector2
        },
        Distance: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 90, 10, true, a0, a1); //Ret: Single
        },
        Dot: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 90, 11, true, a0, a1); //Ret: Single
        },
        Lerp: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 90, 12, true, a0, a1, a2); //Ret: Vector2
        },
        Max: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 90, 13, true, a0, a1); //Ret: Vector2
        },
        Min: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 90, 14, true, a0, a1); //Ret: Vector2
        },
        MoveTowards: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 90, 15, true, a0, a1, a2); //Ret: Vector2
        },
        op_Addition: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 90, 16, true, a0, a1); //Ret: Vector2
        },
        op_Division: function(a0/*Vector2*/, a1/*Single*/) { 
            return CS.Call(4, 90, 17, true, a0, a1); //Ret: Vector2
        },
        op_Equality: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 90, 18, true, a0, a1); //Ret: Boolean
        },
        op_Implicit$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 90, 19, true, a0); //Ret: Vector3
        },
        op_Implicit$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 90, 20, true, a0); //Ret: Vector2
        },
        op_Inequality: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 90, 21, true, a0, a1); //Ret: Boolean
        },
        op_Multiply$$Vector2$$Single: function(a0/*Vector2*/, a1/*Single*/) { 
            return CS.Call(4, 90, 22, true, a0, a1); //Ret: Vector2
        },
        op_Multiply$$Single$$Vector2: function(a0/*Single*/, a1/*Vector2*/) { 
            return CS.Call(4, 90, 23, true, a0, a1); //Ret: Vector2
        },
        op_Subtraction: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 90, 24, true, a0, a1); //Ret: Vector2
        },
        op_UnaryNegation: function(a0/*Vector2*/) { 
            return CS.Call(4, 90, 25, true, a0); //Ret: Vector2
        },
        Scale$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 90, 26, true, a0, a1); //Ret: Vector2
        },
        SmoothDamp$$Vector2$$Vector2$$Vector2$$Single$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Vector2&*/, a3/*Single*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 90, 27, true, a0, a1, a2, a3, a4, a5); //Ret: Vector2
        },
        SmoothDamp$$Vector2$$Vector2$$Vector2$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Vector2&*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 90, 28, true, a0, a1, a2, a3, a4); //Ret: Vector2
        },
        SmoothDamp$$Vector2$$Vector2$$Vector2$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Vector2&*/, a3/*Single*/) { 
            return CS.Call(4, 90, 29, true, a0, a1, a2, a3); //Ret: Vector2
        },
        SqrMagnitude$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 90, 30, true, a0); //Ret: Single
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 90, 0, true, this); },
        ctor$$Single$$Single: function(a0, a1) { CS.Call(5, 90, 1, true, this, a0, a1); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 90, 0, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 90, 0, false, this, ind0, v); },
        get_normalized: function() { return CS.Call(2, 90, 1, false, this); },
        set_normalized: function(v) { return CS.Call(3, 90, 1, false, this, v); },
        get_magnitude: function() { return CS.Call(2, 90, 2, false, this); },
        set_magnitude: function(v) { return CS.Call(3, 90, 2, false, this, v); },
        get_sqrMagnitude: function() { return CS.Call(2, 90, 3, false, this); },
        set_sqrMagnitude: function(v) { return CS.Call(3, 90, 3, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 90, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 90, 1, false, this); //Ret: Int32
        },
        Normalize: function() { 
            return CS.Call(4, 90, 2, false, this); //Ret: Void
        },
        Scale$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 90, 3, false, this, a0); //Ret: Void
        },
        Set: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 90, 4, false, this, a0, a1); //Ret: Void
        },
        SqrMagnitude: function() { 
            return CS.Call(4, 90, 5, false, this); //Ret: Single
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 90, 6, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 90, 7, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Vector2);

// UnityEngine.Vector3
var UnityEngine$Vector3 = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Vector3",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticFields: {
        kEpsilon: {
            get: function() { return CS.Call(0, 91, 0, true); }, 
            set: function(v) { return CS.Call(1, 91, 0, true, v); }
        },
    },
    fields: {
        x: {
            get: function() { return CS.Call(0, 91, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 91, 1, false, this, v); }
        },
        y: {
            get: function() { return CS.Call(0, 91, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 91, 2, false, this, v); }
        },
        z: {
            get: function() { return CS.Call(0, 91, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 91, 3, false, this, v); }
        },
    },
    staticDefinition: {
        get_zero: function() { return CS.Call(2, 91, 4, true); },
        set_zero: function(v) { return CS.Call(3, 91, 4, true, v); },
        get_one: function() { return CS.Call(2, 91, 5, true); },
        set_one: function(v) { return CS.Call(3, 91, 5, true, v); },
        get_forward: function() { return CS.Call(2, 91, 6, true); },
        set_forward: function(v) { return CS.Call(3, 91, 6, true, v); },
        get_back: function() { return CS.Call(2, 91, 7, true); },
        set_back: function(v) { return CS.Call(3, 91, 7, true, v); },
        get_up: function() { return CS.Call(2, 91, 8, true); },
        set_up: function(v) { return CS.Call(3, 91, 8, true, v); },
        get_down: function() { return CS.Call(2, 91, 9, true); },
        set_down: function(v) { return CS.Call(3, 91, 9, true, v); },
        get_left: function() { return CS.Call(2, 91, 10, true); },
        set_left: function(v) { return CS.Call(3, 91, 10, true, v); },
        get_right: function() { return CS.Call(2, 91, 11, true); },
        set_right: function(v) { return CS.Call(3, 91, 11, true, v); },
        Angle: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 7, true, a0, a1); //Ret: Single
        },
        ClampMagnitude: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 91, 8, true, a0, a1); //Ret: Vector3
        },
        Cross: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 9, true, a0, a1); //Ret: Vector3
        },
        Distance: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 10, true, a0, a1); //Ret: Single
        },
        Dot: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 11, true, a0, a1); //Ret: Single
        },
        Lerp: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 91, 12, true, a0, a1, a2); //Ret: Vector3
        },
        Magnitude: function(a0/*Vector3*/) { 
            return CS.Call(4, 91, 13, true, a0); //Ret: Single
        },
        Max: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 14, true, a0, a1); //Ret: Vector3
        },
        Min: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 15, true, a0, a1); //Ret: Vector3
        },
        MoveTowards: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 91, 16, true, a0, a1, a2); //Ret: Vector3
        },
        Normalize$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 91, 17, true, a0); //Ret: Vector3
        },
        op_Addition: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 18, true, a0, a1); //Ret: Vector3
        },
        op_Division: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 91, 19, true, a0, a1); //Ret: Vector3
        },
        op_Equality: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 20, true, a0, a1); //Ret: Boolean
        },
        op_Inequality: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 21, true, a0, a1); //Ret: Boolean
        },
        op_Multiply$$Single$$Vector3: function(a0/*Single*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 22, true, a0, a1); //Ret: Vector3
        },
        op_Multiply$$Vector3$$Single: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 91, 23, true, a0, a1); //Ret: Vector3
        },
        op_Subtraction: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 24, true, a0, a1); //Ret: Vector3
        },
        op_UnaryNegation: function(a0/*Vector3*/) { 
            return CS.Call(4, 91, 25, true, a0); //Ret: Vector3
        },
        OrthoNormalize$$Vector3$$Vector3$$Vector3: function(a0/*Vector3&*/, a1/*Vector3&*/, a2/*Vector3&*/) { 
            return CS.Call(4, 91, 26, true, a0, a1, a2); //Ret: Void
        },
        OrthoNormalize$$Vector3$$Vector3: function(a0/*Vector3&*/, a1/*Vector3&*/) { 
            return CS.Call(4, 91, 27, true, a0, a1); //Ret: Void
        },
        Project: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 28, true, a0, a1); //Ret: Vector3
        },
        ProjectOnPlane: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 29, true, a0, a1); //Ret: Vector3
        },
        Reflect: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 30, true, a0, a1); //Ret: Vector3
        },
        RotateTowards: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 91, 31, true, a0, a1, a2, a3); //Ret: Vector3
        },
        Scale$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 91, 32, true, a0, a1); //Ret: Vector3
        },
        Slerp: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 91, 33, true, a0, a1, a2); //Ret: Vector3
        },
        SmoothDamp$$Vector3$$Vector3$$Vector3$$Single$$Single$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3&*/, a3/*Single*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 91, 34, true, a0, a1, a2, a3, a4, a5); //Ret: Vector3
        },
        SmoothDamp$$Vector3$$Vector3$$Vector3$$Single$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3&*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 91, 35, true, a0, a1, a2, a3, a4); //Ret: Vector3
        },
        SmoothDamp$$Vector3$$Vector3$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3&*/, a3/*Single*/) { 
            return CS.Call(4, 91, 36, true, a0, a1, a2, a3); //Ret: Vector3
        },
        SqrMagnitude: function(a0/*Vector3*/) { 
            return CS.Call(4, 91, 37, true, a0); //Ret: Single
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 91, 0, true, this); },
        ctor$$Single$$Single$$Single: function(a0, a1, a2) { CS.Call(5, 91, 1, true, this, a0, a1, a2); },
        ctor$$Single$$Single: function(a0, a1) { CS.Call(5, 91, 2, true, this, a0, a1); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 91, 0, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 91, 0, false, this, ind0, v); },
        get_normalized: function() { return CS.Call(2, 91, 1, false, this); },
        set_normalized: function(v) { return CS.Call(3, 91, 1, false, this, v); },
        get_magnitude: function() { return CS.Call(2, 91, 2, false, this); },
        set_magnitude: function(v) { return CS.Call(3, 91, 2, false, this, v); },
        get_sqrMagnitude: function() { return CS.Call(2, 91, 3, false, this); },
        set_sqrMagnitude: function(v) { return CS.Call(3, 91, 3, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 91, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 91, 1, false, this); //Ret: Int32
        },
        Normalize: function() { 
            return CS.Call(4, 91, 2, false, this); //Ret: Void
        },
        Scale$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 91, 3, false, this, a0); //Ret: Void
        },
        Set: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 91, 4, false, this, a0, a1, a2); //Ret: Void
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 91, 5, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 91, 6, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Vector3);

// UnityEngine.Color
var UnityEngine$Color = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Color",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        r: {
            get: function() { return CS.Call(0, 92, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 92, 0, false, this, v); }
        },
        g: {
            get: function() { return CS.Call(0, 92, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 92, 1, false, this, v); }
        },
        b: {
            get: function() { return CS.Call(0, 92, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 92, 2, false, this, v); }
        },
        a: {
            get: function() { return CS.Call(0, 92, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 92, 3, false, this, v); }
        },
    },
    staticDefinition: {
        get_red: function() { return CS.Call(2, 92, 0, true); },
        set_red: function(v) { return CS.Call(3, 92, 0, true, v); },
        get_green: function() { return CS.Call(2, 92, 1, true); },
        set_green: function(v) { return CS.Call(3, 92, 1, true, v); },
        get_blue: function() { return CS.Call(2, 92, 2, true); },
        set_blue: function(v) { return CS.Call(3, 92, 2, true, v); },
        get_white: function() { return CS.Call(2, 92, 3, true); },
        set_white: function(v) { return CS.Call(3, 92, 3, true, v); },
        get_black: function() { return CS.Call(2, 92, 4, true); },
        set_black: function(v) { return CS.Call(3, 92, 4, true, v); },
        get_yellow: function() { return CS.Call(2, 92, 5, true); },
        set_yellow: function(v) { return CS.Call(3, 92, 5, true, v); },
        get_cyan: function() { return CS.Call(2, 92, 6, true); },
        set_cyan: function(v) { return CS.Call(3, 92, 6, true, v); },
        get_magenta: function() { return CS.Call(2, 92, 7, true); },
        set_magenta: function(v) { return CS.Call(3, 92, 7, true, v); },
        get_gray: function() { return CS.Call(2, 92, 8, true); },
        set_gray: function(v) { return CS.Call(3, 92, 8, true, v); },
        get_grey: function() { return CS.Call(2, 92, 9, true); },
        set_grey: function(v) { return CS.Call(3, 92, 9, true, v); },
        get_clear: function() { return CS.Call(2, 92, 10, true); },
        set_clear: function(v) { return CS.Call(3, 92, 10, true, v); },
        Lerp: function(a0/*Color*/, a1/*Color*/, a2/*Single*/) { 
            return CS.Call(4, 92, 4, true, a0, a1, a2); //Ret: Color
        },
        op_Addition: function(a0/*Color*/, a1/*Color*/) { 
            return CS.Call(4, 92, 5, true, a0, a1); //Ret: Color
        },
        op_Division: function(a0/*Color*/, a1/*Single*/) { 
            return CS.Call(4, 92, 6, true, a0, a1); //Ret: Color
        },
        op_Equality: function(a0/*Color*/, a1/*Color*/) { 
            return CS.Call(4, 92, 7, true, a0, a1); //Ret: Boolean
        },
        op_Implicit$$Vector4: function(a0/*Vector4*/) { 
            return CS.Call(4, 92, 8, true, a0); //Ret: Color
        },
        op_Implicit$$Color: function(a0/*Color*/) { 
            return CS.Call(4, 92, 9, true, a0); //Ret: Vector4
        },
        op_Inequality: function(a0/*Color*/, a1/*Color*/) { 
            return CS.Call(4, 92, 10, true, a0, a1); //Ret: Boolean
        },
        op_Multiply$$Color$$Color: function(a0/*Color*/, a1/*Color*/) { 
            return CS.Call(4, 92, 11, true, a0, a1); //Ret: Color
        },
        op_Multiply$$Color$$Single: function(a0/*Color*/, a1/*Single*/) { 
            return CS.Call(4, 92, 12, true, a0, a1); //Ret: Color
        },
        op_Multiply$$Single$$Color: function(a0/*Single*/, a1/*Color*/) { 
            return CS.Call(4, 92, 13, true, a0, a1); //Ret: Color
        },
        op_Subtraction: function(a0/*Color*/, a1/*Color*/) { 
            return CS.Call(4, 92, 14, true, a0, a1); //Ret: Color
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 92, 0, true, this); },
        ctor$$Single$$Single$$Single$$Single: function(a0, a1, a2, a3) { CS.Call(5, 92, 1, true, this, a0, a1, a2, a3); },
        ctor$$Single$$Single$$Single: function(a0, a1, a2) { CS.Call(5, 92, 2, true, this, a0, a1, a2); },
        get_grayscale: function() { return CS.Call(2, 92, 11, false, this); },
        set_grayscale: function(v) { return CS.Call(3, 92, 11, false, this, v); },
        get_linear: function() { return CS.Call(2, 92, 12, false, this); },
        set_linear: function(v) { return CS.Call(3, 92, 12, false, this, v); },
        get_gamma: function() { return CS.Call(2, 92, 13, false, this); },
        set_gamma: function(v) { return CS.Call(3, 92, 13, false, this, v); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 92, 14, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 92, 14, false, this, ind0, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 92, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 92, 1, false, this); //Ret: Int32
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 92, 2, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 92, 3, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Color);

// UnityEngine.Color32
var UnityEngine$Color32 = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Color32",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        r: {
            get: function() { return CS.Call(0, 93, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 93, 0, false, this, v); }
        },
        g: {
            get: function() { return CS.Call(0, 93, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 93, 1, false, this, v); }
        },
        b: {
            get: function() { return CS.Call(0, 93, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 93, 2, false, this, v); }
        },
        a: {
            get: function() { return CS.Call(0, 93, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 93, 3, false, this, v); }
        },
    },
    staticDefinition: {
        Lerp: function(a0/*Color32*/, a1/*Color32*/, a2/*Single*/) { 
            return CS.Call(4, 93, 2, true, a0, a1, a2); //Ret: Color32
        },
        op_Implicit$$Color32: function(a0/*Color32*/) { 
            return CS.Call(4, 93, 3, true, a0); //Ret: Color
        },
        op_Implicit$$Color: function(a0/*Color*/) { 
            return CS.Call(4, 93, 4, true, a0); //Ret: Color32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 93, 0, true, this); },
        ctor$$Byte$$Byte$$Byte$$Byte: function(a0, a1, a2, a3) { CS.Call(5, 93, 1, true, this, a0, a1, a2, a3); },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 93, 0, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 93, 1, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Color32);

// UnityEngine.Quaternion
var UnityEngine$Quaternion = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Quaternion",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticFields: {
        kEpsilon: {
            get: function() { return CS.Call(0, 94, 0, true); }, 
            set: function(v) { return CS.Call(1, 94, 0, true, v); }
        },
    },
    fields: {
        x: {
            get: function() { return CS.Call(0, 94, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 94, 1, false, this, v); }
        },
        y: {
            get: function() { return CS.Call(0, 94, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 94, 2, false, this, v); }
        },
        z: {
            get: function() { return CS.Call(0, 94, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 94, 3, false, this, v); }
        },
        w: {
            get: function() { return CS.Call(0, 94, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 94, 4, false, this, v); }
        },
    },
    staticDefinition: {
        get_identity: function() { return CS.Call(2, 94, 1, true); },
        set_identity: function(v) { return CS.Call(3, 94, 1, true, v); },
        Angle: function(a0/*Quaternion*/, a1/*Quaternion*/) { 
            return CS.Call(4, 94, 9, true, a0, a1); //Ret: Single
        },
        AngleAxis: function(a0/*Single*/, a1/*Vector3*/) { 
            return CS.Call(4, 94, 10, true, a0, a1); //Ret: Quaternion
        },
        Dot: function(a0/*Quaternion*/, a1/*Quaternion*/) { 
            return CS.Call(4, 94, 11, true, a0, a1); //Ret: Single
        },
        Euler$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 94, 12, true, a0, a1, a2); //Ret: Quaternion
        },
        Euler$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 94, 13, true, a0); //Ret: Quaternion
        },
        FromToRotation: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 94, 14, true, a0, a1); //Ret: Quaternion
        },
        Inverse: function(a0/*Quaternion*/) { 
            return CS.Call(4, 94, 15, true, a0); //Ret: Quaternion
        },
        Lerp: function(a0/*Quaternion*/, a1/*Quaternion*/, a2/*Single*/) { 
            return CS.Call(4, 94, 16, true, a0, a1, a2); //Ret: Quaternion
        },
        LookRotation$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 94, 17, true, a0, a1); //Ret: Quaternion
        },
        LookRotation$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 94, 18, true, a0); //Ret: Quaternion
        },
        op_Equality: function(a0/*Quaternion*/, a1/*Quaternion*/) { 
            return CS.Call(4, 94, 19, true, a0, a1); //Ret: Boolean
        },
        op_Inequality: function(a0/*Quaternion*/, a1/*Quaternion*/) { 
            return CS.Call(4, 94, 20, true, a0, a1); //Ret: Boolean
        },
        op_Multiply$$Quaternion$$Vector3: function(a0/*Quaternion*/, a1/*Vector3*/) { 
            return CS.Call(4, 94, 21, true, a0, a1); //Ret: Vector3
        },
        op_Multiply$$Quaternion$$Quaternion: function(a0/*Quaternion*/, a1/*Quaternion*/) { 
            return CS.Call(4, 94, 22, true, a0, a1); //Ret: Quaternion
        },
        RotateTowards: function(a0/*Quaternion*/, a1/*Quaternion*/, a2/*Single*/) { 
            return CS.Call(4, 94, 23, true, a0, a1, a2); //Ret: Quaternion
        },
        Slerp: function(a0/*Quaternion*/, a1/*Quaternion*/, a2/*Single*/) { 
            return CS.Call(4, 94, 24, true, a0, a1, a2); //Ret: Quaternion
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 94, 0, true, this); },
        ctor$$Single$$Single$$Single$$Single: function(a0, a1, a2, a3) { CS.Call(5, 94, 1, true, this, a0, a1, a2, a3); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 94, 0, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 94, 0, false, this, ind0, v); },
        get_eulerAngles: function() { return CS.Call(2, 94, 2, false, this); },
        set_eulerAngles: function(v) { return CS.Call(3, 94, 2, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 94, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 94, 1, false, this); //Ret: Int32
        },
        Set: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 94, 2, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SetFromToRotation: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 94, 3, false, this, a0, a1); //Ret: Void
        },
        SetLookRotation$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 94, 4, false, this, a0, a1); //Ret: Void
        },
        SetLookRotation$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 94, 5, false, this, a0); //Ret: Void
        },
        ToAngleAxis: function(a0/*Single&*/, a1/*Vector3&*/) { 
            return CS.Call(4, 94, 6, false, this, a0, a1); //Ret: Void
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 94, 7, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 94, 8, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Quaternion);

// UnityEngine.Rect
var UnityEngine$Rect = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Rect",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        MinMaxRect: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 95, 10, true, a0, a1, a2, a3); //Ret: Rect
        },
        NormalizedToPoint: function(a0/*Rect*/, a1/*Vector2*/) { 
            return CS.Call(4, 95, 11, true, a0, a1); //Ret: Vector2
        },
        op_Equality: function(a0/*Rect*/, a1/*Rect*/) { 
            return CS.Call(4, 95, 12, true, a0, a1); //Ret: Boolean
        },
        op_Inequality: function(a0/*Rect*/, a1/*Rect*/) { 
            return CS.Call(4, 95, 13, true, a0, a1); //Ret: Boolean
        },
        PointToNormalized: function(a0/*Rect*/, a1/*Vector2*/) { 
            return CS.Call(4, 95, 14, true, a0, a1); //Ret: Vector2
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 95, 0, true, this); },
        ctor$$Single$$Single$$Single$$Single: function(a0, a1, a2, a3) { CS.Call(5, 95, 1, true, this, a0, a1, a2, a3); },
        ctor$$Rect: function(a0) { CS.Call(5, 95, 2, true, this, a0); },
        get_x: function() { return CS.Call(2, 95, 0, false, this); },
        set_x: function(v) { return CS.Call(3, 95, 0, false, this, v); },
        get_y: function() { return CS.Call(2, 95, 1, false, this); },
        set_y: function(v) { return CS.Call(3, 95, 1, false, this, v); },
        get_position: function() { return CS.Call(2, 95, 2, false, this); },
        set_position: function(v) { return CS.Call(3, 95, 2, false, this, v); },
        get_center: function() { return CS.Call(2, 95, 3, false, this); },
        set_center: function(v) { return CS.Call(3, 95, 3, false, this, v); },
        get_min: function() { return CS.Call(2, 95, 4, false, this); },
        set_min: function(v) { return CS.Call(3, 95, 4, false, this, v); },
        get_max: function() { return CS.Call(2, 95, 5, false, this); },
        set_max: function(v) { return CS.Call(3, 95, 5, false, this, v); },
        get_width: function() { return CS.Call(2, 95, 6, false, this); },
        set_width: function(v) { return CS.Call(3, 95, 6, false, this, v); },
        get_height: function() { return CS.Call(2, 95, 7, false, this); },
        set_height: function(v) { return CS.Call(3, 95, 7, false, this, v); },
        get_size: function() { return CS.Call(2, 95, 8, false, this); },
        set_size: function(v) { return CS.Call(3, 95, 8, false, this, v); },
        get_xMin: function() { return CS.Call(2, 95, 9, false, this); },
        set_xMin: function(v) { return CS.Call(3, 95, 9, false, this, v); },
        get_yMin: function() { return CS.Call(2, 95, 10, false, this); },
        set_yMin: function(v) { return CS.Call(3, 95, 10, false, this, v); },
        get_xMax: function() { return CS.Call(2, 95, 11, false, this); },
        set_xMax: function(v) { return CS.Call(3, 95, 11, false, this, v); },
        get_yMax: function() { return CS.Call(2, 95, 12, false, this); },
        set_yMax: function(v) { return CS.Call(3, 95, 12, false, this, v); },
        Contains$$Vector3$$Boolean: function(a0/*Vector3*/, a1/*Boolean*/) { 
            return CS.Call(4, 95, 0, false, this, a0, a1); //Ret: Boolean
        },
        Contains$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 95, 1, false, this, a0); //Ret: Boolean
        },
        Contains$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 95, 2, false, this, a0); //Ret: Boolean
        },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 95, 3, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 95, 4, false, this); //Ret: Int32
        },
        Overlaps$$Rect$$Boolean: function(a0/*Rect*/, a1/*Boolean*/) { 
            return CS.Call(4, 95, 5, false, this, a0, a1); //Ret: Boolean
        },
        Overlaps$$Rect: function(a0/*Rect*/) { 
            return CS.Call(4, 95, 6, false, this, a0); //Ret: Boolean
        },
        Set: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 95, 7, false, this, a0, a1, a2, a3); //Ret: Void
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 95, 8, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 95, 9, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Rect);

// UnityEngine.Matrix4x4
var UnityEngine$Matrix4x4 = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Matrix4x4",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        m00: {
            get: function() { return CS.Call(0, 96, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 0, false, this, v); }
        },
        m10: {
            get: function() { return CS.Call(0, 96, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 1, false, this, v); }
        },
        m20: {
            get: function() { return CS.Call(0, 96, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 2, false, this, v); }
        },
        m30: {
            get: function() { return CS.Call(0, 96, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 3, false, this, v); }
        },
        m01: {
            get: function() { return CS.Call(0, 96, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 4, false, this, v); }
        },
        m11: {
            get: function() { return CS.Call(0, 96, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 5, false, this, v); }
        },
        m21: {
            get: function() { return CS.Call(0, 96, 6, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 6, false, this, v); }
        },
        m31: {
            get: function() { return CS.Call(0, 96, 7, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 7, false, this, v); }
        },
        m02: {
            get: function() { return CS.Call(0, 96, 8, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 8, false, this, v); }
        },
        m12: {
            get: function() { return CS.Call(0, 96, 9, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 9, false, this, v); }
        },
        m22: {
            get: function() { return CS.Call(0, 96, 10, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 10, false, this, v); }
        },
        m32: {
            get: function() { return CS.Call(0, 96, 11, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 11, false, this, v); }
        },
        m03: {
            get: function() { return CS.Call(0, 96, 12, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 12, false, this, v); }
        },
        m13: {
            get: function() { return CS.Call(0, 96, 13, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 13, false, this, v); }
        },
        m23: {
            get: function() { return CS.Call(0, 96, 14, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 14, false, this, v); }
        },
        m33: {
            get: function() { return CS.Call(0, 96, 15, false, this); }, 
            set: function(v) { return CS.Call(1, 96, 15, false, this, v); }
        },
    },
    staticDefinition: {
        get_zero: function() { return CS.Call(2, 96, 5, true); },
        set_zero: function(v) { return CS.Call(3, 96, 5, true, v); },
        get_identity: function() { return CS.Call(2, 96, 6, true); },
        set_identity: function(v) { return CS.Call(3, 96, 6, true, v); },
        Inverse: function(a0/*Matrix4x4*/) { 
            return CS.Call(4, 96, 12, true, a0); //Ret: Matrix4x4
        },
        op_Equality: function(a0/*Matrix4x4*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 96, 13, true, a0, a1); //Ret: Boolean
        },
        op_Inequality: function(a0/*Matrix4x4*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 96, 14, true, a0, a1); //Ret: Boolean
        },
        op_Multiply$$Matrix4x4$$Matrix4x4: function(a0/*Matrix4x4*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 96, 15, true, a0, a1); //Ret: Matrix4x4
        },
        op_Multiply$$Matrix4x4$$Vector4: function(a0/*Matrix4x4*/, a1/*Vector4*/) { 
            return CS.Call(4, 96, 16, true, a0, a1); //Ret: Vector4
        },
        Ortho: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 96, 17, true, a0, a1, a2, a3, a4, a5); //Ret: Matrix4x4
        },
        Perspective: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 96, 18, true, a0, a1, a2, a3); //Ret: Matrix4x4
        },
        Scale: function(a0/*Vector3*/) { 
            return CS.Call(4, 96, 19, true, a0); //Ret: Matrix4x4
        },
        Transpose: function(a0/*Matrix4x4*/) { 
            return CS.Call(4, 96, 20, true, a0); //Ret: Matrix4x4
        },
        TRS: function(a0/*Vector3*/, a1/*Quaternion*/, a2/*Vector3*/) { 
            return CS.Call(4, 96, 21, true, a0, a1, a2); //Ret: Matrix4x4
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 96, 0, true, this); },
        get_Item$$Int32$$Int32: function(ind0, ind1) { return CS.Call(2, 96, 0, false, this, ind0, ind1); },
        set_Item$$Int32$$Int32: function(ind0, ind1, v) { return CS.Call(3, 96, 0, false, this, ind0, ind1, v); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 96, 1, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 96, 1, false, this, ind0, v); },
        get_inverse: function() { return CS.Call(2, 96, 2, false, this); },
        set_inverse: function(v) { return CS.Call(3, 96, 2, false, this, v); },
        get_transpose: function() { return CS.Call(2, 96, 3, false, this); },
        set_transpose: function(v) { return CS.Call(3, 96, 3, false, this, v); },
        get_isIdentity: function() { return CS.Call(2, 96, 4, false, this); },
        set_isIdentity: function(v) { return CS.Call(3, 96, 4, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 96, 0, false, this, a0); //Ret: Boolean
        },
        GetColumn: function(a0/*Int32*/) { 
            return CS.Call(4, 96, 1, false, this, a0); //Ret: Vector4
        },
        GetHashCode: function() { 
            return CS.Call(4, 96, 2, false, this); //Ret: Int32
        },
        GetRow: function(a0/*Int32*/) { 
            return CS.Call(4, 96, 3, false, this, a0); //Ret: Vector4
        },
        MultiplyPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 96, 4, false, this, a0); //Ret: Vector3
        },
        MultiplyPoint3x4: function(a0/*Vector3*/) { 
            return CS.Call(4, 96, 5, false, this, a0); //Ret: Vector3
        },
        MultiplyVector: function(a0/*Vector3*/) { 
            return CS.Call(4, 96, 6, false, this, a0); //Ret: Vector3
        },
        SetColumn: function(a0/*Int32*/, a1/*Vector4*/) { 
            return CS.Call(4, 96, 7, false, this, a0, a1); //Ret: Void
        },
        SetRow: function(a0/*Int32*/, a1/*Vector4*/) { 
            return CS.Call(4, 96, 8, false, this, a0, a1); //Ret: Void
        },
        SetTRS: function(a0/*Vector3*/, a1/*Quaternion*/, a2/*Vector3*/) { 
            return CS.Call(4, 96, 9, false, this, a0, a1, a2); //Ret: Void
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 96, 10, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 96, 11, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Matrix4x4);

// UnityEngine.Bounds
var UnityEngine$Bounds = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Bounds",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        op_Equality: function(a0/*Bounds*/, a1/*Bounds*/) { 
            return CS.Call(4, 97, 14, true, a0, a1); //Ret: Boolean
        },
        op_Inequality: function(a0/*Bounds*/, a1/*Bounds*/) { 
            return CS.Call(4, 97, 15, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 97, 0, true, this); },
        ctor$$Vector3$$Vector3: function(a0, a1) { CS.Call(5, 97, 1, true, this, a0, a1); },
        get_center: function() { return CS.Call(2, 97, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 97, 0, false, this, v); },
        get_size: function() { return CS.Call(2, 97, 1, false, this); },
        set_size: function(v) { return CS.Call(3, 97, 1, false, this, v); },
        get_extents: function() { return CS.Call(2, 97, 2, false, this); },
        set_extents: function(v) { return CS.Call(3, 97, 2, false, this, v); },
        get_min: function() { return CS.Call(2, 97, 3, false, this); },
        set_min: function(v) { return CS.Call(3, 97, 3, false, this, v); },
        get_max: function() { return CS.Call(2, 97, 4, false, this); },
        set_max: function(v) { return CS.Call(3, 97, 4, false, this, v); },
        Contains: function(a0/*Vector3*/) { 
            return CS.Call(4, 97, 0, false, this, a0); //Ret: Boolean
        },
        Encapsulate$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 97, 1, false, this, a0); //Ret: Void
        },
        Encapsulate$$Bounds: function(a0/*Bounds*/) { 
            return CS.Call(4, 97, 2, false, this, a0); //Ret: Void
        },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 97, 3, false, this, a0); //Ret: Boolean
        },
        Expand$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 97, 4, false, this, a0); //Ret: Void
        },
        Expand$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 97, 5, false, this, a0); //Ret: Void
        },
        GetHashCode: function() { 
            return CS.Call(4, 97, 6, false, this); //Ret: Int32
        },
        IntersectRay$$Ray$$Single: function(a0/*Ray*/, a1/*Single&*/) { 
            return CS.Call(4, 97, 7, false, this, a0, a1); //Ret: Boolean
        },
        IntersectRay$$Ray: function(a0/*Ray*/) { 
            return CS.Call(4, 97, 8, false, this, a0); //Ret: Boolean
        },
        Intersects: function(a0/*Bounds*/) { 
            return CS.Call(4, 97, 9, false, this, a0); //Ret: Boolean
        },
        SetMinMax: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 97, 10, false, this, a0, a1); //Ret: Void
        },
        SqrDistance: function(a0/*Vector3*/) { 
            return CS.Call(4, 97, 11, false, this, a0); //Ret: Single
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 97, 12, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 97, 13, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Bounds);

// UnityEngine.Vector4
var UnityEngine$Vector4 = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Vector4",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticFields: {
        kEpsilon: {
            get: function() { return CS.Call(0, 98, 0, true); }, 
            set: function(v) { return CS.Call(1, 98, 0, true, v); }
        },
    },
    fields: {
        x: {
            get: function() { return CS.Call(0, 98, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 98, 1, false, this, v); }
        },
        y: {
            get: function() { return CS.Call(0, 98, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 98, 2, false, this, v); }
        },
        z: {
            get: function() { return CS.Call(0, 98, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 98, 3, false, this, v); }
        },
        w: {
            get: function() { return CS.Call(0, 98, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 98, 4, false, this, v); }
        },
    },
    staticDefinition: {
        get_zero: function() { return CS.Call(2, 98, 4, true); },
        set_zero: function(v) { return CS.Call(3, 98, 4, true, v); },
        get_one: function() { return CS.Call(2, 98, 5, true); },
        set_one: function(v) { return CS.Call(3, 98, 5, true, v); },
        Distance: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 98, 8, true, a0, a1); //Ret: Single
        },
        Dot: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 98, 9, true, a0, a1); //Ret: Single
        },
        Lerp: function(a0/*Vector4*/, a1/*Vector4*/, a2/*Single*/) { 
            return CS.Call(4, 98, 10, true, a0, a1, a2); //Ret: Vector4
        },
        Magnitude: function(a0/*Vector4*/) { 
            return CS.Call(4, 98, 11, true, a0); //Ret: Single
        },
        Max: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 98, 12, true, a0, a1); //Ret: Vector4
        },
        Min: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 98, 13, true, a0, a1); //Ret: Vector4
        },
        MoveTowards: function(a0/*Vector4*/, a1/*Vector4*/, a2/*Single*/) { 
            return CS.Call(4, 98, 14, true, a0, a1, a2); //Ret: Vector4
        },
        Normalize$$Vector4: function(a0/*Vector4*/) { 
            return CS.Call(4, 98, 15, true, a0); //Ret: Vector4
        },
        op_Addition: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 98, 16, true, a0, a1); //Ret: Vector4
        },
        op_Division: function(a0/*Vector4*/, a1/*Single*/) { 
            return CS.Call(4, 98, 17, true, a0, a1); //Ret: Vector4
        },
        op_Equality: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 98, 18, true, a0, a1); //Ret: Boolean
        },
        op_Implicit$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 98, 19, true, a0); //Ret: Vector4
        },
        op_Implicit$$Vector4: function(a0/*Vector4*/) { 
            return CS.Call(4, 98, 20, true, a0); //Ret: Vector2
        },
        op_Implicit$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 98, 21, true, a0); //Ret: Vector4
        },
        op_Implicit$$Vector4: function(a0/*Vector4*/) { 
            return CS.Call(4, 98, 22, true, a0); //Ret: Vector3
        },
        op_Inequality: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 98, 23, true, a0, a1); //Ret: Boolean
        },
        op_Multiply$$Vector4$$Single: function(a0/*Vector4*/, a1/*Single*/) { 
            return CS.Call(4, 98, 24, true, a0, a1); //Ret: Vector4
        },
        op_Multiply$$Single$$Vector4: function(a0/*Single*/, a1/*Vector4*/) { 
            return CS.Call(4, 98, 25, true, a0, a1); //Ret: Vector4
        },
        op_Subtraction: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 98, 26, true, a0, a1); //Ret: Vector4
        },
        op_UnaryNegation: function(a0/*Vector4*/) { 
            return CS.Call(4, 98, 27, true, a0); //Ret: Vector4
        },
        Project: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 98, 28, true, a0, a1); //Ret: Vector4
        },
        Scale$$Vector4$$Vector4: function(a0/*Vector4*/, a1/*Vector4*/) { 
            return CS.Call(4, 98, 29, true, a0, a1); //Ret: Vector4
        },
        SqrMagnitude$$Vector4: function(a0/*Vector4*/) { 
            return CS.Call(4, 98, 30, true, a0); //Ret: Single
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 98, 0, true, this); },
        ctor$$Single$$Single$$Single$$Single: function(a0, a1, a2, a3) { CS.Call(5, 98, 1, true, this, a0, a1, a2, a3); },
        ctor$$Single$$Single$$Single: function(a0, a1, a2) { CS.Call(5, 98, 2, true, this, a0, a1, a2); },
        ctor$$Single$$Single: function(a0, a1) { CS.Call(5, 98, 3, true, this, a0, a1); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 98, 0, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 98, 0, false, this, ind0, v); },
        get_normalized: function() { return CS.Call(2, 98, 1, false, this); },
        set_normalized: function(v) { return CS.Call(3, 98, 1, false, this, v); },
        get_magnitude: function() { return CS.Call(2, 98, 2, false, this); },
        set_magnitude: function(v) { return CS.Call(3, 98, 2, false, this, v); },
        get_sqrMagnitude: function() { return CS.Call(2, 98, 3, false, this); },
        set_sqrMagnitude: function(v) { return CS.Call(3, 98, 3, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 98, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 98, 1, false, this); //Ret: Int32
        },
        Normalize: function() { 
            return CS.Call(4, 98, 2, false, this); //Ret: Void
        },
        Scale$$Vector4: function(a0/*Vector4*/) { 
            return CS.Call(4, 98, 3, false, this, a0); //Ret: Void
        },
        Set: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 98, 4, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SqrMagnitude: function() { 
            return CS.Call(4, 98, 5, false, this); //Ret: Single
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 98, 6, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 98, 7, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Vector4);

// UnityEngine.Ray
var UnityEngine$Ray = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Ray",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 99, 0, true, this); },
        ctor$$Vector3$$Vector3: function(a0, a1) { CS.Call(5, 99, 1, true, this, a0, a1); },
        get_origin: function() { return CS.Call(2, 99, 0, false, this); },
        set_origin: function(v) { return CS.Call(3, 99, 0, false, this, v); },
        get_direction: function() { return CS.Call(2, 99, 1, false, this); },
        set_direction: function(v) { return CS.Call(3, 99, 1, false, this, v); },
        GetPoint: function(a0/*Single*/) { 
            return CS.Call(4, 99, 0, false, this, a0); //Ret: Vector3
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 99, 1, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 99, 2, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Ray);

// UnityEngine.Ray2D
var UnityEngine$Ray2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Ray2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 100, 0, true, this); },
        ctor$$Vector2$$Vector2: function(a0, a1) { CS.Call(5, 100, 1, true, this, a0, a1); },
        get_origin: function() { return CS.Call(2, 100, 0, false, this); },
        set_origin: function(v) { return CS.Call(3, 100, 0, false, this, v); },
        get_direction: function() { return CS.Call(2, 100, 1, false, this); },
        set_direction: function(v) { return CS.Call(3, 100, 1, false, this, v); },
        GetPoint: function(a0/*Single*/) { 
            return CS.Call(4, 100, 0, false, this, a0); //Ret: Vector2
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 100, 1, false, this, a0); //Ret: String
        },
        toString: function() { 
            return CS.Call(4, 100, 2, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Ray2D);

// UnityEngine.Plane
var UnityEngine$Plane = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Plane",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 101, 0, true, this); },
        ctor$$Vector3$$Vector3: function(a0, a1) { CS.Call(5, 101, 1, true, this, a0, a1); },
        ctor$$Vector3$$Single: function(a0, a1) { CS.Call(5, 101, 2, true, this, a0, a1); },
        ctor$$Vector3$$Vector3$$Vector3: function(a0, a1, a2) { CS.Call(5, 101, 3, true, this, a0, a1, a2); },
        get_normal: function() { return CS.Call(2, 101, 0, false, this); },
        set_normal: function(v) { return CS.Call(3, 101, 0, false, this, v); },
        get_distance: function() { return CS.Call(2, 101, 1, false, this); },
        set_distance: function(v) { return CS.Call(3, 101, 1, false, this, v); },
        GetDistanceToPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 101, 0, false, this, a0); //Ret: Single
        },
        GetSide: function(a0/*Vector3*/) { 
            return CS.Call(4, 101, 1, false, this, a0); //Ret: Boolean
        },
        Raycast: function(a0/*Ray*/, a1/*Single&*/) { 
            return CS.Call(4, 101, 2, false, this, a0, a1); //Ret: Boolean
        },
        SameSide: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 101, 3, false, this, a0, a1); //Ret: Boolean
        },
        Set3Points: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Vector3*/) { 
            return CS.Call(4, 101, 4, false, this, a0, a1, a2); //Ret: Void
        },
        SetNormalAndPosition: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 101, 5, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Plane);

// UnityEngine.Mathf
var UnityEngine$Mathf = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Mathf",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticFields: {
        PI: {
            get: function() { return CS.Call(0, 102, 0, true); }, 
            set: function(v) { return CS.Call(1, 102, 0, true, v); }
        },
        Infinity: {
            get: function() { return CS.Call(0, 102, 1, true); }, 
            set: function(v) { return CS.Call(1, 102, 1, true, v); }
        },
        NegativeInfinity: {
            get: function() { return CS.Call(0, 102, 2, true); }, 
            set: function(v) { return CS.Call(1, 102, 2, true, v); }
        },
        Deg2Rad: {
            get: function() { return CS.Call(0, 102, 3, true); }, 
            set: function(v) { return CS.Call(1, 102, 3, true, v); }
        },
        Rad2Deg: {
            get: function() { return CS.Call(0, 102, 4, true); }, 
            set: function(v) { return CS.Call(1, 102, 4, true, v); }
        },
        Epsilon: {
            get: function() { return CS.Call(0, 102, 5, true); }, 
            set: function(v) { return CS.Call(1, 102, 5, true, v); }
        },
    },
    staticDefinition: {
        Abs$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 102, 0, true, a0); //Ret: Single
        },
        Abs$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 102, 1, true, a0); //Ret: Int32
        },
        Acos: function(a0/*Single*/) { 
            return CS.Call(4, 102, 2, true, a0); //Ret: Single
        },
        Approximately: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 102, 3, true, a0, a1); //Ret: Boolean
        },
        Asin: function(a0/*Single*/) { 
            return CS.Call(4, 102, 4, true, a0); //Ret: Single
        },
        Atan: function(a0/*Single*/) { 
            return CS.Call(4, 102, 5, true, a0); //Ret: Single
        },
        Atan2: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 102, 6, true, a0, a1); //Ret: Single
        },
        Ceil: function(a0/*Single*/) { 
            return CS.Call(4, 102, 7, true, a0); //Ret: Single
        },
        CeilToInt: function(a0/*Single*/) { 
            return CS.Call(4, 102, 8, true, a0); //Ret: Int32
        },
        Clamp$$Int32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 102, 9, true, a0, a1, a2); //Ret: Int32
        },
        Clamp$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 102, 10, true, a0, a1, a2); //Ret: Single
        },
        Clamp01: function(a0/*Single*/) { 
            return CS.Call(4, 102, 11, true, a0); //Ret: Single
        },
        ClosestPowerOfTwo: function(a0/*Int32*/) { 
            return CS.Call(4, 102, 12, true, a0); //Ret: Int32
        },
        Cos: function(a0/*Single*/) { 
            return CS.Call(4, 102, 13, true, a0); //Ret: Single
        },
        DeltaAngle: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 102, 14, true, a0, a1); //Ret: Single
        },
        Exp: function(a0/*Single*/) { 
            return CS.Call(4, 102, 15, true, a0); //Ret: Single
        },
        Floor: function(a0/*Single*/) { 
            return CS.Call(4, 102, 16, true, a0); //Ret: Single
        },
        FloorToInt: function(a0/*Single*/) { 
            return CS.Call(4, 102, 17, true, a0); //Ret: Int32
        },
        Gamma: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 102, 18, true, a0, a1, a2); //Ret: Single
        },
        GammaToLinearSpace: function(a0/*Single*/) { 
            return CS.Call(4, 102, 19, true, a0); //Ret: Single
        },
        InverseLerp: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 102, 20, true, a0, a1, a2); //Ret: Single
        },
        IsPowerOfTwo: function(a0/*Int32*/) { 
            return CS.Call(4, 102, 21, true, a0); //Ret: Boolean
        },
        Lerp: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 102, 22, true, a0, a1, a2); //Ret: Single
        },
        LerpAngle: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 102, 23, true, a0, a1, a2); //Ret: Single
        },
        LinearToGammaSpace: function(a0/*Single*/) { 
            return CS.Call(4, 102, 24, true, a0); //Ret: Single
        },
        Log$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 102, 25, true, a0, a1); //Ret: Single
        },
        Log$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 102, 26, true, a0); //Ret: Single
        },
        Log10: function(a0/*Single*/) { 
            return CS.Call(4, 102, 27, true, a0); //Ret: Single
        },
        Max$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 102, 28, true, a0, a1); //Ret: Single
        },
        Max$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 102, 29, true, a0, a1); //Ret: Int32
        },
        Max$$Single$Array: function(a0/*Single[]*/) { 
            return CS.Call(4, 102, 30, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Single
        },
        Max$$Int32$Array: function(a0/*Int32[]*/) { 
            return CS.Call(4, 102, 31, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Int32
        },
        Min$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 102, 32, true, a0, a1); //Ret: Single
        },
        Min$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 102, 33, true, a0, a1); //Ret: Int32
        },
        Min$$Int32$Array: function(a0/*Int32[]*/) { 
            return CS.Call(4, 102, 34, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Int32
        },
        Min$$Single$Array: function(a0/*Single[]*/) { 
            return CS.Call(4, 102, 35, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Single
        },
        MoveTowards: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 102, 36, true, a0, a1, a2); //Ret: Single
        },
        MoveTowardsAngle: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 102, 37, true, a0, a1, a2); //Ret: Single
        },
        NextPowerOfTwo: function(a0/*Int32*/) { 
            return CS.Call(4, 102, 38, true, a0); //Ret: Int32
        },
        PerlinNoise: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 102, 39, true, a0, a1); //Ret: Single
        },
        PingPong: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 102, 40, true, a0, a1); //Ret: Single
        },
        Pow: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 102, 41, true, a0, a1); //Ret: Single
        },
        Repeat: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 102, 42, true, a0, a1); //Ret: Single
        },
        Round: function(a0/*Single*/) { 
            return CS.Call(4, 102, 43, true, a0); //Ret: Single
        },
        RoundToInt: function(a0/*Single*/) { 
            return CS.Call(4, 102, 44, true, a0); //Ret: Int32
        },
        Sign: function(a0/*Single*/) { 
            return CS.Call(4, 102, 45, true, a0); //Ret: Single
        },
        Sin: function(a0/*Single*/) { 
            return CS.Call(4, 102, 46, true, a0); //Ret: Single
        },
        SmoothDamp$$Single$$Single$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single&*/, a3/*Single*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 102, 47, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        SmoothDamp$$Single$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single&*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 102, 48, true, a0, a1, a2, a3, a4); //Ret: Single
        },
        SmoothDamp$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single&*/, a3/*Single*/) { 
            return CS.Call(4, 102, 49, true, a0, a1, a2, a3); //Ret: Single
        },
        SmoothDampAngle$$Single$$Single$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single&*/, a3/*Single*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 102, 50, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        SmoothDampAngle$$Single$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single&*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 102, 51, true, a0, a1, a2, a3, a4); //Ret: Single
        },
        SmoothDampAngle$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single&*/, a3/*Single*/) { 
            return CS.Call(4, 102, 52, true, a0, a1, a2, a3); //Ret: Single
        },
        SmoothStep: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 102, 53, true, a0, a1, a2); //Ret: Single
        },
        Sqrt: function(a0/*Single*/) { 
            return CS.Call(4, 102, 54, true, a0); //Ret: Single
        },
        Tan: function(a0/*Single*/) { 
            return CS.Call(4, 102, 55, true, a0); //Ret: Single
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 102, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Mathf);

// UnityEngine.ParticleSystem
var UnityEngine$ParticleSystem = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 103, 0, true, this); },
        get_startDelay: function() { return CS.Call(2, 103, 0, false, this); },
        set_startDelay: function(v) { return CS.Call(3, 103, 0, false, this, v); },
        get_isPlaying: function() { return CS.Call(2, 103, 1, false, this); },
        set_isPlaying: function(v) { return CS.Call(3, 103, 1, false, this, v); },
        get_isStopped: function() { return CS.Call(2, 103, 2, false, this); },
        set_isStopped: function(v) { return CS.Call(3, 103, 2, false, this, v); },
        get_isPaused: function() { return CS.Call(2, 103, 3, false, this); },
        set_isPaused: function(v) { return CS.Call(3, 103, 3, false, this, v); },
        get_loop: function() { return CS.Call(2, 103, 4, false, this); },
        set_loop: function(v) { return CS.Call(3, 103, 4, false, this, v); },
        get_playOnAwake: function() { return CS.Call(2, 103, 5, false, this); },
        set_playOnAwake: function(v) { return CS.Call(3, 103, 5, false, this, v); },
        get_time: function() { return CS.Call(2, 103, 6, false, this); },
        set_time: function(v) { return CS.Call(3, 103, 6, false, this, v); },
        get_duration: function() { return CS.Call(2, 103, 7, false, this); },
        set_duration: function(v) { return CS.Call(3, 103, 7, false, this, v); },
        get_playbackSpeed: function() { return CS.Call(2, 103, 8, false, this); },
        set_playbackSpeed: function(v) { return CS.Call(3, 103, 8, false, this, v); },
        get_particleCount: function() { return CS.Call(2, 103, 9, false, this); },
        set_particleCount: function(v) { return CS.Call(3, 103, 9, false, this, v); },
        get_safeCollisionEventSize: function() { return CS.Call(2, 103, 10, false, this); },
        set_safeCollisionEventSize: function(v) { return CS.Call(3, 103, 10, false, this, v); },
        get_enableEmission: function() { return CS.Call(2, 103, 11, false, this); },
        set_enableEmission: function(v) { return CS.Call(3, 103, 11, false, this, v); },
        get_emissionRate: function() { return CS.Call(2, 103, 12, false, this); },
        set_emissionRate: function(v) { return CS.Call(3, 103, 12, false, this, v); },
        get_startSpeed: function() { return CS.Call(2, 103, 13, false, this); },
        set_startSpeed: function(v) { return CS.Call(3, 103, 13, false, this, v); },
        get_startSize: function() { return CS.Call(2, 103, 14, false, this); },
        set_startSize: function(v) { return CS.Call(3, 103, 14, false, this, v); },
        get_startColor: function() { return CS.Call(2, 103, 15, false, this); },
        set_startColor: function(v) { return CS.Call(3, 103, 15, false, this, v); },
        get_startRotation: function() { return CS.Call(2, 103, 16, false, this); },
        set_startRotation: function(v) { return CS.Call(3, 103, 16, false, this, v); },
        get_startLifetime: function() { return CS.Call(2, 103, 17, false, this); },
        set_startLifetime: function(v) { return CS.Call(3, 103, 17, false, this, v); },
        get_gravityModifier: function() { return CS.Call(2, 103, 18, false, this); },
        set_gravityModifier: function(v) { return CS.Call(3, 103, 18, false, this, v); },
        get_maxParticles: function() { return CS.Call(2, 103, 19, false, this); },
        set_maxParticles: function(v) { return CS.Call(3, 103, 19, false, this, v); },
        get_simulationSpace: function() { return CS.Call(2, 103, 20, false, this); },
        set_simulationSpace: function(v) { return CS.Call(3, 103, 20, false, this, v); },
        get_randomSeed: function() { return CS.Call(2, 103, 21, false, this); },
        set_randomSeed: function(v) { return CS.Call(3, 103, 21, false, this, v); },
        Clear$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 103, 0, false, this, a0); //Ret: Void
        },
        Clear: function() { 
            return CS.Call(4, 103, 1, false, this); //Ret: Void
        },
        Emit$$Vector3$$Vector3$$Single$$Single$$Color32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Single*/, a4/*Color32*/) { 
            return CS.Call(4, 103, 2, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        Emit$$Particle: function(a0/*Particle*/) { 
            return CS.Call(4, 103, 3, false, this, a0); //Ret: Void
        },
        Emit$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 103, 4, false, this, a0); //Ret: Void
        },
        GetCollisionEvents: function(a0/*GameObject*/, a1/*CollisionEvent[]*/) { 
            return CS.Call(4, 103, 5, false, this, a0, a1); //Ret: Int32
        },
        GetParticles: function(a0/*Particle[]*/) { 
            return CS.Call(4, 103, 6, false, this, a0); //Ret: Int32
        },
        IsAlive$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 103, 7, false, this, a0); //Ret: Boolean
        },
        IsAlive: function() { 
            return CS.Call(4, 103, 8, false, this); //Ret: Boolean
        },
        Pause$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 103, 9, false, this, a0); //Ret: Void
        },
        Pause: function() { 
            return CS.Call(4, 103, 10, false, this); //Ret: Void
        },
        Play$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 103, 11, false, this, a0); //Ret: Void
        },
        Play: function() { 
            return CS.Call(4, 103, 12, false, this); //Ret: Void
        },
        SetParticles: function(a0/*Particle[]*/, a1/*Int32*/) { 
            return CS.Call(4, 103, 13, false, this, a0, a1); //Ret: Void
        },
        Simulate$$Single$$Boolean$$Boolean: function(a0/*Single*/, a1/*Boolean*/, a2/*Boolean*/) { 
            return CS.Call(4, 103, 14, false, this, a0, a1, a2); //Ret: Void
        },
        Simulate$$Single$$Boolean: function(a0/*Single*/, a1/*Boolean*/) { 
            return CS.Call(4, 103, 15, false, this, a0, a1); //Ret: Void
        },
        Simulate$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 103, 16, false, this, a0); //Ret: Void
        },
        Stop$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 103, 17, false, this, a0); //Ret: Void
        },
        Stop: function() { 
            return CS.Call(4, 103, 18, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem);

// UnityEngine.ParticleSystem+Particle
var UnityEngine$ParticleSystem$Particle = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.Particle",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 104, 0, true, this); },
        get_position: function() { return CS.Call(2, 104, 0, false, this); },
        set_position: function(v) { return CS.Call(3, 104, 0, false, this, v); },
        get_velocity: function() { return CS.Call(2, 104, 1, false, this); },
        set_velocity: function(v) { return CS.Call(3, 104, 1, false, this, v); },
        get_lifetime: function() { return CS.Call(2, 104, 2, false, this); },
        set_lifetime: function(v) { return CS.Call(3, 104, 2, false, this, v); },
        get_startLifetime: function() { return CS.Call(2, 104, 3, false, this); },
        set_startLifetime: function(v) { return CS.Call(3, 104, 3, false, this, v); },
        get_size: function() { return CS.Call(2, 104, 4, false, this); },
        set_size: function(v) { return CS.Call(3, 104, 4, false, this, v); },
        get_axisOfRotation: function() { return CS.Call(2, 104, 5, false, this); },
        set_axisOfRotation: function(v) { return CS.Call(3, 104, 5, false, this, v); },
        get_rotation: function() { return CS.Call(2, 104, 6, false, this); },
        set_rotation: function(v) { return CS.Call(3, 104, 6, false, this, v); },
        get_angularVelocity: function() { return CS.Call(2, 104, 7, false, this); },
        set_angularVelocity: function(v) { return CS.Call(3, 104, 7, false, this, v); },
        get_color: function() { return CS.Call(2, 104, 8, false, this); },
        set_color: function(v) { return CS.Call(3, 104, 8, false, this, v); },
        get_randomSeed: function() { return CS.Call(2, 104, 9, false, this); },
        set_randomSeed: function(v) { return CS.Call(3, 104, 9, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$Particle);

// UnityEngine.ParticleSystem+CollisionEvent
var UnityEngine$ParticleSystem$CollisionEvent = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystem.CollisionEvent",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 105, 0, true, this); },
        get_intersection: function() { return CS.Call(2, 105, 0, false, this); },
        set_intersection: function(v) { return CS.Call(3, 105, 0, false, this, v); },
        get_normal: function() { return CS.Call(2, 105, 1, false, this); },
        set_normal: function(v) { return CS.Call(3, 105, 1, false, this, v); },
        get_velocity: function() { return CS.Call(2, 105, 2, false, this); },
        set_velocity: function(v) { return CS.Call(3, 105, 2, false, this, v); },
        get_collider: function() { return CS.Call(2, 105, 3, false, this); },
        set_collider: function(v) { return CS.Call(3, 105, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystem$CollisionEvent);

// UnityEngine.ParticleSystemRenderer
var UnityEngine$ParticleSystemRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ParticleSystemRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 106, 0, true, this); },
        get_renderMode: function() { return CS.Call(2, 106, 0, false, this); },
        set_renderMode: function(v) { return CS.Call(3, 106, 0, false, this, v); },
        get_lengthScale: function() { return CS.Call(2, 106, 1, false, this); },
        set_lengthScale: function(v) { return CS.Call(3, 106, 1, false, this, v); },
        get_velocityScale: function() { return CS.Call(2, 106, 2, false, this); },
        set_velocityScale: function(v) { return CS.Call(3, 106, 2, false, this, v); },
        get_cameraVelocityScale: function() { return CS.Call(2, 106, 3, false, this); },
        set_cameraVelocityScale: function(v) { return CS.Call(3, 106, 3, false, this, v); },
        get_maxParticleSize: function() { return CS.Call(2, 106, 4, false, this); },
        set_maxParticleSize: function(v) { return CS.Call(3, 106, 4, false, this, v); },
        get_mesh: function() { return CS.Call(2, 106, 5, false, this); },
        set_mesh: function(v) { return CS.Call(3, 106, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ParticleSystemRenderer);

// UnityEngine.TextAsset
var UnityEngine$TextAsset = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.TextAsset",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 107, 0, true, this); },
        get_text: function() { return CS.Call(2, 107, 0, false, this); },
        set_text: function(v) { return CS.Call(3, 107, 0, false, this, v); },
        get_bytes: function() { return CS.Call(2, 107, 1, false, this); },
        set_bytes: function(v) { return CS.Call(3, 107, 1, false, this, v); },
        toString: function() { 
            return CS.Call(4, 107, 0, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$TextAsset);

// UnityEngine.Shader
var UnityEngine$Shader = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Shader",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        get_globalMaximumLOD: function() { return CS.Call(2, 108, 2, true); },
        set_globalMaximumLOD: function(v) { return CS.Call(3, 108, 2, true, v); },
        DisableKeyword: function(a0/*String*/) { 
            return CS.Call(4, 108, 0, true, a0); //Ret: Void
        },
        EnableKeyword: function(a0/*String*/) { 
            return CS.Call(4, 108, 1, true, a0); //Ret: Void
        },
        Find: function(a0/*String*/) { 
            return CS.Call(4, 108, 2, true, a0); //Ret: Shader
        },
        PropertyToID: function(a0/*String*/) { 
            return CS.Call(4, 108, 3, true, a0); //Ret: Int32
        },
        SetGlobalBuffer: function(a0/*String*/, a1/*ComputeBuffer*/) { 
            return CS.Call(4, 108, 4, true, a0, a1); //Ret: Void
        },
        SetGlobalColor$$String$$Color: function(a0/*String*/, a1/*Color*/) { 
            return CS.Call(4, 108, 5, true, a0, a1); //Ret: Void
        },
        SetGlobalColor$$Int32$$Color: function(a0/*Int32*/, a1/*Color*/) { 
            return CS.Call(4, 108, 6, true, a0, a1); //Ret: Void
        },
        SetGlobalFloat$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 108, 7, true, a0, a1); //Ret: Void
        },
        SetGlobalFloat$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 108, 8, true, a0, a1); //Ret: Void
        },
        SetGlobalInt$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 108, 9, true, a0, a1); //Ret: Void
        },
        SetGlobalInt$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 108, 10, true, a0, a1); //Ret: Void
        },
        SetGlobalMatrix$$String$$Matrix4x4: function(a0/*String*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 108, 11, true, a0, a1); //Ret: Void
        },
        SetGlobalMatrix$$Int32$$Matrix4x4: function(a0/*Int32*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 108, 12, true, a0, a1); //Ret: Void
        },
        SetGlobalTexGenMode: function(a0/*String*/, a1/*TexGenMode*/) { 
            return CS.Call(4, 108, 13, true, a0, a1); //Ret: Void
        },
        SetGlobalTexture$$String$$Texture: function(a0/*String*/, a1/*Texture*/) { 
            return CS.Call(4, 108, 14, true, a0, a1); //Ret: Void
        },
        SetGlobalTexture$$Int32$$Texture: function(a0/*Int32*/, a1/*Texture*/) { 
            return CS.Call(4, 108, 15, true, a0, a1); //Ret: Void
        },
        SetGlobalTextureMatrixName: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 108, 16, true, a0, a1); //Ret: Void
        },
        SetGlobalVector$$String$$Vector4: function(a0/*String*/, a1/*Vector4*/) { 
            return CS.Call(4, 108, 17, true, a0, a1); //Ret: Void
        },
        SetGlobalVector$$Int32$$Vector4: function(a0/*Int32*/, a1/*Vector4*/) { 
            return CS.Call(4, 108, 18, true, a0, a1); //Ret: Void
        },
        WarmupAllShaders: function() { 
            return CS.Call(4, 108, 19, true); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 108, 0, true, this); },
        get_isSupported: function() { return CS.Call(2, 108, 0, false, this); },
        set_isSupported: function(v) { return CS.Call(3, 108, 0, false, this, v); },
        get_maximumLOD: function() { return CS.Call(2, 108, 1, false, this); },
        set_maximumLOD: function(v) { return CS.Call(3, 108, 1, false, this, v); },
        get_renderQueue: function() { return CS.Call(2, 108, 3, false, this); },
        set_renderQueue: function(v) { return CS.Call(3, 108, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Shader);

// UnityEngine.Material
var UnityEngine$Material = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Material",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor$$String: function(a0) { CS.Call(5, 109, 0, true, this, a0); },
        ctor$$Shader: function(a0) { CS.Call(5, 109, 1, true, this, a0); },
        ctor$$Material: function(a0) { CS.Call(5, 109, 2, true, this, a0); },
        get_shader: function() { return CS.Call(2, 109, 0, false, this); },
        set_shader: function(v) { return CS.Call(3, 109, 0, false, this, v); },
        get_color: function() { return CS.Call(2, 109, 1, false, this); },
        set_color: function(v) { return CS.Call(3, 109, 1, false, this, v); },
        get_mainTexture: function() { return CS.Call(2, 109, 2, false, this); },
        set_mainTexture: function(v) { return CS.Call(3, 109, 2, false, this, v); },
        get_mainTextureOffset: function() { return CS.Call(2, 109, 3, false, this); },
        set_mainTextureOffset: function(v) { return CS.Call(3, 109, 3, false, this, v); },
        get_mainTextureScale: function() { return CS.Call(2, 109, 4, false, this); },
        set_mainTextureScale: function(v) { return CS.Call(3, 109, 4, false, this, v); },
        get_passCount: function() { return CS.Call(2, 109, 5, false, this); },
        set_passCount: function(v) { return CS.Call(3, 109, 5, false, this, v); },
        get_renderQueue: function() { return CS.Call(2, 109, 6, false, this); },
        set_renderQueue: function(v) { return CS.Call(3, 109, 6, false, this, v); },
        get_shaderKeywords: function() { return CS.Call(2, 109, 7, false, this); },
        set_shaderKeywords: function(v) { return CS.Call(3, 109, 7, false, this, v); },
        CopyPropertiesFromMaterial: function(a0/*Material*/) { 
            return CS.Call(4, 109, 0, false, this, a0); //Ret: Void
        },
        DisableKeyword: function(a0/*String*/) { 
            return CS.Call(4, 109, 1, false, this, a0); //Ret: Void
        },
        EnableKeyword: function(a0/*String*/) { 
            return CS.Call(4, 109, 2, false, this, a0); //Ret: Void
        },
        GetColor$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 109, 3, false, this, a0); //Ret: Color
        },
        GetColor$$String: function(a0/*String*/) { 
            return CS.Call(4, 109, 4, false, this, a0); //Ret: Color
        },
        GetFloat$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 109, 5, false, this, a0); //Ret: Single
        },
        GetFloat$$String: function(a0/*String*/) { 
            return CS.Call(4, 109, 6, false, this, a0); //Ret: Single
        },
        GetInt$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 109, 7, false, this, a0); //Ret: Int32
        },
        GetInt$$String: function(a0/*String*/) { 
            return CS.Call(4, 109, 8, false, this, a0); //Ret: Int32
        },
        GetMatrix$$String: function(a0/*String*/) { 
            return CS.Call(4, 109, 9, false, this, a0); //Ret: Matrix4x4
        },
        GetMatrix$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 109, 10, false, this, a0); //Ret: Matrix4x4
        },
        GetTag$$String$$Boolean$$String: function(a0/*String*/, a1/*Boolean*/, a2/*String*/) { 
            return CS.Call(4, 109, 11, false, this, a0, a1, a2); //Ret: String
        },
        GetTag$$String$$Boolean: function(a0/*String*/, a1/*Boolean*/) { 
            return CS.Call(4, 109, 12, false, this, a0, a1); //Ret: String
        },
        GetTexture$$String: function(a0/*String*/) { 
            return CS.Call(4, 109, 13, false, this, a0); //Ret: Texture
        },
        GetTexture$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 109, 14, false, this, a0); //Ret: Texture
        },
        GetTextureOffset: function(a0/*String*/) { 
            return CS.Call(4, 109, 15, false, this, a0); //Ret: Vector2
        },
        GetTextureScale: function(a0/*String*/) { 
            return CS.Call(4, 109, 16, false, this, a0); //Ret: Vector2
        },
        GetVector$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 109, 17, false, this, a0); //Ret: Vector4
        },
        GetVector$$String: function(a0/*String*/) { 
            return CS.Call(4, 109, 18, false, this, a0); //Ret: Vector4
        },
        HasProperty$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 109, 19, false, this, a0); //Ret: Boolean
        },
        HasProperty$$String: function(a0/*String*/) { 
            return CS.Call(4, 109, 20, false, this, a0); //Ret: Boolean
        },
        Lerp: function(a0/*Material*/, a1/*Material*/, a2/*Single*/) { 
            return CS.Call(4, 109, 21, false, this, a0, a1, a2); //Ret: Void
        },
        SetBuffer: function(a0/*String*/, a1/*ComputeBuffer*/) { 
            return CS.Call(4, 109, 22, false, this, a0, a1); //Ret: Void
        },
        SetColor$$String$$Color: function(a0/*String*/, a1/*Color*/) { 
            return CS.Call(4, 109, 23, false, this, a0, a1); //Ret: Void
        },
        SetColor$$Int32$$Color: function(a0/*Int32*/, a1/*Color*/) { 
            return CS.Call(4, 109, 24, false, this, a0, a1); //Ret: Void
        },
        SetFloat$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 109, 25, false, this, a0, a1); //Ret: Void
        },
        SetFloat$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 109, 26, false, this, a0, a1); //Ret: Void
        },
        SetInt$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 109, 27, false, this, a0, a1); //Ret: Void
        },
        SetInt$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 109, 28, false, this, a0, a1); //Ret: Void
        },
        SetMatrix$$Int32$$Matrix4x4: function(a0/*Int32*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 109, 29, false, this, a0, a1); //Ret: Void
        },
        SetMatrix$$String$$Matrix4x4: function(a0/*String*/, a1/*Matrix4x4*/) { 
            return CS.Call(4, 109, 30, false, this, a0, a1); //Ret: Void
        },
        SetPass: function(a0/*Int32*/) { 
            return CS.Call(4, 109, 31, false, this, a0); //Ret: Boolean
        },
        SetTexture$$Int32$$Texture: function(a0/*Int32*/, a1/*Texture*/) { 
            return CS.Call(4, 109, 32, false, this, a0, a1); //Ret: Void
        },
        SetTexture$$String$$Texture: function(a0/*String*/, a1/*Texture*/) { 
            return CS.Call(4, 109, 33, false, this, a0, a1); //Ret: Void
        },
        SetTextureOffset: function(a0/*String*/, a1/*Vector2*/) { 
            return CS.Call(4, 109, 34, false, this, a0, a1); //Ret: Void
        },
        SetTextureScale: function(a0/*String*/, a1/*Vector2*/) { 
            return CS.Call(4, 109, 35, false, this, a0, a1); //Ret: Void
        },
        SetVector$$Int32$$Vector4: function(a0/*Int32*/, a1/*Vector4*/) { 
            return CS.Call(4, 109, 36, false, this, a0, a1); //Ret: Void
        },
        SetVector$$String$$Vector4: function(a0/*String*/, a1/*Vector4*/) { 
            return CS.Call(4, 109, 37, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Material);

// UnityEngine.ProceduralPropertyDescription
var UnityEngine$ProceduralPropertyDescription = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ProceduralPropertyDescription",
    Kind: "Class",
    baseTypeName: "System.Object",
    fields: {
        name: {
            get: function() { return CS.Call(0, 110, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 110, 0, false, this, v); }
        },
        label: {
            get: function() { return CS.Call(0, 110, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 110, 1, false, this, v); }
        },
        group: {
            get: function() { return CS.Call(0, 110, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 110, 2, false, this, v); }
        },
        type: {
            get: function() { return CS.Call(0, 110, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 110, 3, false, this, v); }
        },
        hasRange: {
            get: function() { return CS.Call(0, 110, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 110, 4, false, this, v); }
        },
        minimum: {
            get: function() { return CS.Call(0, 110, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 110, 5, false, this, v); }
        },
        maximum: {
            get: function() { return CS.Call(0, 110, 6, false, this); }, 
            set: function(v) { return CS.Call(1, 110, 6, false, this, v); }
        },
        step: {
            get: function() { return CS.Call(0, 110, 7, false, this); }, 
            set: function(v) { return CS.Call(1, 110, 7, false, this, v); }
        },
        enumOptions: {
            get: function() { return CS.Call(0, 110, 8, false, this); }, 
            set: function(v) { return CS.Call(1, 110, 8, false, this, v); }
        },
        componentLabels: {
            get: function() { return CS.Call(0, 110, 9, false, this); }, 
            set: function(v) { return CS.Call(1, 110, 9, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 110, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ProceduralPropertyDescription);

// UnityEngine.ProceduralMaterial
var UnityEngine$ProceduralMaterial = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ProceduralMaterial",
    Kind: "Class",
    baseTypeName: "UnityEngine.Material",
    staticDefinition: {
        get_isSupported: function() { return CS.Call(2, 111, 6, true); },
        set_isSupported: function(v) { return CS.Call(3, 111, 6, true, v); },
        get_substanceProcessorUsage: function() { return CS.Call(2, 111, 7, true); },
        set_substanceProcessorUsage: function(v) { return CS.Call(3, 111, 7, true, v); },
        StopRebuilds: function() { 
            return CS.Call(4, 111, 21, true); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 111, 0, true, this); },
        get_cacheSize: function() { return CS.Call(2, 111, 0, false, this); },
        set_cacheSize: function(v) { return CS.Call(3, 111, 0, false, this, v); },
        get_animationUpdateRate: function() { return CS.Call(2, 111, 1, false, this); },
        set_animationUpdateRate: function(v) { return CS.Call(3, 111, 1, false, this, v); },
        get_isProcessing: function() { return CS.Call(2, 111, 2, false, this); },
        set_isProcessing: function(v) { return CS.Call(3, 111, 2, false, this, v); },
        get_isCachedDataAvailable: function() { return CS.Call(2, 111, 3, false, this); },
        set_isCachedDataAvailable: function(v) { return CS.Call(3, 111, 3, false, this, v); },
        get_isLoadTimeGenerated: function() { return CS.Call(2, 111, 4, false, this); },
        set_isLoadTimeGenerated: function(v) { return CS.Call(3, 111, 4, false, this, v); },
        get_loadingBehavior: function() { return CS.Call(2, 111, 5, false, this); },
        set_loadingBehavior: function(v) { return CS.Call(3, 111, 5, false, this, v); },
        get_preset: function() { return CS.Call(2, 111, 8, false, this); },
        set_preset: function(v) { return CS.Call(3, 111, 8, false, this, v); },
        get_isReadable: function() { return CS.Call(2, 111, 9, false, this); },
        set_isReadable: function(v) { return CS.Call(3, 111, 9, false, this, v); },
        CacheProceduralProperty: function(a0/*String*/, a1/*Boolean*/) { 
            return CS.Call(4, 111, 0, false, this, a0, a1); //Ret: Void
        },
        ClearCache: function() { 
            return CS.Call(4, 111, 1, false, this); //Ret: Void
        },
        GetGeneratedTexture: function(a0/*String*/) { 
            return CS.Call(4, 111, 2, false, this, a0); //Ret: ProceduralTexture
        },
        GetGeneratedTextures: function() { 
            return CS.Call(4, 111, 3, false, this); //Ret: Texture[]
        },
        GetProceduralBoolean: function(a0/*String*/) { 
            return CS.Call(4, 111, 4, false, this, a0); //Ret: Boolean
        },
        GetProceduralColor: function(a0/*String*/) { 
            return CS.Call(4, 111, 5, false, this, a0); //Ret: Color
        },
        GetProceduralEnum: function(a0/*String*/) { 
            return CS.Call(4, 111, 6, false, this, a0); //Ret: Int32
        },
        GetProceduralFloat: function(a0/*String*/) { 
            return CS.Call(4, 111, 7, false, this, a0); //Ret: Single
        },
        GetProceduralPropertyDescriptions: function() { 
            return CS.Call(4, 111, 8, false, this); //Ret: ProceduralPropertyDescription[]
        },
        GetProceduralTexture: function(a0/*String*/) { 
            return CS.Call(4, 111, 9, false, this, a0); //Ret: Texture2D
        },
        GetProceduralVector: function(a0/*String*/) { 
            return CS.Call(4, 111, 10, false, this, a0); //Ret: Vector4
        },
        HasProceduralProperty: function(a0/*String*/) { 
            return CS.Call(4, 111, 11, false, this, a0); //Ret: Boolean
        },
        IsProceduralPropertyCached: function(a0/*String*/) { 
            return CS.Call(4, 111, 12, false, this, a0); //Ret: Boolean
        },
        RebuildTextures: function() { 
            return CS.Call(4, 111, 13, false, this); //Ret: Void
        },
        RebuildTexturesImmediately: function() { 
            return CS.Call(4, 111, 14, false, this); //Ret: Void
        },
        SetProceduralBoolean: function(a0/*String*/, a1/*Boolean*/) { 
            return CS.Call(4, 111, 15, false, this, a0, a1); //Ret: Void
        },
        SetProceduralColor: function(a0/*String*/, a1/*Color*/) { 
            return CS.Call(4, 111, 16, false, this, a0, a1); //Ret: Void
        },
        SetProceduralEnum: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 111, 17, false, this, a0, a1); //Ret: Void
        },
        SetProceduralFloat: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 111, 18, false, this, a0, a1); //Ret: Void
        },
        SetProceduralTexture: function(a0/*String*/, a1/*Texture2D*/) { 
            return CS.Call(4, 111, 19, false, this, a0, a1); //Ret: Void
        },
        SetProceduralVector: function(a0/*String*/, a1/*Vector4*/) { 
            return CS.Call(4, 111, 20, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ProceduralMaterial);

// UnityEngine.ProceduralTexture
var UnityEngine$ProceduralTexture = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ProceduralTexture",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    definition: {
        ctor: function() { CS.Call(5, 112, 0, true, this); },
        get_hasAlpha: function() { return CS.Call(2, 112, 0, false, this); },
        set_hasAlpha: function(v) { return CS.Call(3, 112, 0, false, this, v); },
        get_format: function() { return CS.Call(2, 112, 1, false, this); },
        set_format: function(v) { return CS.Call(3, 112, 1, false, this, v); },
        GetPixels32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 112, 0, false, this, a0, a1, a2, a3); //Ret: Color32[]
        },
        GetProceduralOutputType: function() { 
            return CS.Call(4, 112, 1, false, this); //Ret: ProceduralOutputType
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ProceduralTexture);

// UnityEngine.Sprite
var UnityEngine$Sprite = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Sprite",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        Create$$Texture2D$$Rect$$Vector2$$Single$$UInt32$$SpriteMeshType$$Vector4: function(a0/*Texture2D*/, a1/*Rect*/, a2/*Vector2*/, a3/*Single*/, a4/*UInt32*/, a5/*SpriteMeshType*/, a6/*Vector4*/) { 
            return CS.Call(4, 113, 0, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Sprite
        },
        Create$$Texture2D$$Rect$$Vector2$$Single$$UInt32$$SpriteMeshType: function(a0/*Texture2D*/, a1/*Rect*/, a2/*Vector2*/, a3/*Single*/, a4/*UInt32*/, a5/*SpriteMeshType*/) { 
            return CS.Call(4, 113, 1, true, a0, a1, a2, a3, a4, a5); //Ret: Sprite
        },
        Create$$Texture2D$$Rect$$Vector2$$Single$$UInt32: function(a0/*Texture2D*/, a1/*Rect*/, a2/*Vector2*/, a3/*Single*/, a4/*UInt32*/) { 
            return CS.Call(4, 113, 2, true, a0, a1, a2, a3, a4); //Ret: Sprite
        },
        Create$$Texture2D$$Rect$$Vector2$$Single: function(a0/*Texture2D*/, a1/*Rect*/, a2/*Vector2*/, a3/*Single*/) { 
            return CS.Call(4, 113, 3, true, a0, a1, a2, a3); //Ret: Sprite
        },
        Create$$Texture2D$$Rect$$Vector2: function(a0/*Texture2D*/, a1/*Rect*/, a2/*Vector2*/) { 
            return CS.Call(4, 113, 4, true, a0, a1, a2); //Ret: Sprite
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 113, 0, true, this); },
        get_bounds: function() { return CS.Call(2, 113, 0, false, this); },
        set_bounds: function(v) { return CS.Call(3, 113, 0, false, this, v); },
        get_rect: function() { return CS.Call(2, 113, 1, false, this); },
        set_rect: function(v) { return CS.Call(3, 113, 1, false, this, v); },
        get_pixelsPerUnit: function() { return CS.Call(2, 113, 2, false, this); },
        set_pixelsPerUnit: function(v) { return CS.Call(3, 113, 2, false, this, v); },
        get_texture: function() { return CS.Call(2, 113, 3, false, this); },
        set_texture: function(v) { return CS.Call(3, 113, 3, false, this, v); },
        get_textureRect: function() { return CS.Call(2, 113, 4, false, this); },
        set_textureRect: function(v) { return CS.Call(3, 113, 4, false, this, v); },
        get_textureRectOffset: function() { return CS.Call(2, 113, 5, false, this); },
        set_textureRectOffset: function(v) { return CS.Call(3, 113, 5, false, this, v); },
        get_packed: function() { return CS.Call(2, 113, 6, false, this); },
        set_packed: function(v) { return CS.Call(3, 113, 6, false, this, v); },
        get_packingMode: function() { return CS.Call(2, 113, 7, false, this); },
        set_packingMode: function(v) { return CS.Call(3, 113, 7, false, this, v); },
        get_packingRotation: function() { return CS.Call(2, 113, 8, false, this); },
        set_packingRotation: function(v) { return CS.Call(3, 113, 8, false, this, v); },
        get_border: function() { return CS.Call(2, 113, 9, false, this); },
        set_border: function(v) { return CS.Call(3, 113, 9, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Sprite);

// UnityEngine.SpriteRenderer
var UnityEngine$SpriteRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SpriteRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 114, 0, true, this); },
        get_sprite: function() { return CS.Call(2, 114, 0, false, this); },
        set_sprite: function(v) { return CS.Call(3, 114, 0, false, this, v); },
        get_color: function() { return CS.Call(2, 114, 1, false, this); },
        set_color: function(v) { return CS.Call(3, 114, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SpriteRenderer);

// UnityEngine.WWWForm
var UnityEngine$WWWForm = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WWWForm",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 115, 0, true, this); },
        get_headers: function() { return CS.Call(2, 115, 0, false, this); },
        set_headers: function(v) { return CS.Call(3, 115, 0, false, this, v); },
        get_data: function() { return CS.Call(2, 115, 1, false, this); },
        set_data: function(v) { return CS.Call(3, 115, 1, false, this, v); },
        AddBinaryData$$String$$Byte$Array$$String$$String: function(a0/*String*/, a1/*Byte[]*/, a2/*String*/, a3/*String*/) { 
            return CS.Call(4, 115, 0, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddBinaryData$$String$$Byte$Array$$String: function(a0/*String*/, a1/*Byte[]*/, a2/*String*/) { 
            return CS.Call(4, 115, 1, false, this, a0, a1, a2); //Ret: Void
        },
        AddBinaryData$$String$$Byte$Array: function(a0/*String*/, a1/*Byte[]*/) { 
            return CS.Call(4, 115, 2, false, this, a0, a1); //Ret: Void
        },
        AddField$$String$$String$$Encoding: function(a0/*String*/, a1/*String*/, a2/*Encoding*/) { 
            return CS.Call(4, 115, 3, false, this, a0, a1, a2); //Ret: Void
        },
        AddField$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 115, 4, false, this, a0, a1); //Ret: Void
        },
        AddField$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 115, 5, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WWWForm);

// UnityEngine.Caching
var UnityEngine$Caching = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Caching",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_spaceFree: function() { return CS.Call(2, 116, 0, true); },
        set_spaceFree: function(v) { return CS.Call(3, 116, 0, true, v); },
        get_maximumAvailableDiskSpace: function() { return CS.Call(2, 116, 1, true); },
        set_maximumAvailableDiskSpace: function(v) { return CS.Call(3, 116, 1, true, v); },
        get_spaceOccupied: function() { return CS.Call(2, 116, 2, true); },
        set_spaceOccupied: function(v) { return CS.Call(3, 116, 2, true, v); },
        get_expirationDelay: function() { return CS.Call(2, 116, 3, true); },
        set_expirationDelay: function(v) { return CS.Call(3, 116, 3, true, v); },
        get_enabled: function() { return CS.Call(2, 116, 4, true); },
        set_enabled: function(v) { return CS.Call(3, 116, 4, true, v); },
        get_ready: function() { return CS.Call(2, 116, 5, true); },
        set_ready: function(v) { return CS.Call(3, 116, 5, true, v); },
        Authorize$$String$$String$$Int64$$Int32$$String: function(a0/*String*/, a1/*String*/, a2/*Int64*/, a3/*Int32*/, a4/*String*/) { 
            return CS.Call(4, 116, 0, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        Authorize$$String$$String$$Int64$$String: function(a0/*String*/, a1/*String*/, a2/*Int64*/, a3/*String*/) { 
            return CS.Call(4, 116, 1, true, a0, a1, a2, a3); //Ret: Boolean
        },
        CleanCache: function() { 
            return CS.Call(4, 116, 2, true); //Ret: Boolean
        },
        IsVersionCached: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 116, 3, true, a0, a1); //Ret: Boolean
        },
        MarkAsUsed: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 116, 4, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 116, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Caching);

// UnityEngine.AsyncOperation
var UnityEngine$AsyncOperation = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AsyncOperation",
    Kind: "Class",
    baseTypeName: "UnityEngine.YieldInstruction",
    definition: {
        ctor: function() { CS.Call(5, 117, 0, true, this); },
        get_isDone: function() { return CS.Call(2, 117, 0, false, this); },
        set_isDone: function(v) { return CS.Call(3, 117, 0, false, this, v); },
        get_progress: function() { return CS.Call(2, 117, 1, false, this); },
        set_progress: function(v) { return CS.Call(3, 117, 1, false, this, v); },
        get_priority: function() { return CS.Call(2, 117, 2, false, this); },
        set_priority: function(v) { return CS.Call(3, 117, 2, false, this, v); },
        get_allowSceneActivation: function() { return CS.Call(2, 117, 3, false, this); },
        set_allowSceneActivation: function(v) { return CS.Call(3, 117, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AsyncOperation);

// UnityEngine.Application
var UnityEngine$Application = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Application",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_loadedLevel: function() { return CS.Call(2, 118, 0, true); },
        set_loadedLevel: function(v) { return CS.Call(3, 118, 0, true, v); },
        get_loadedLevelName: function() { return CS.Call(2, 118, 1, true); },
        set_loadedLevelName: function(v) { return CS.Call(3, 118, 1, true, v); },
        get_isLoadingLevel: function() { return CS.Call(2, 118, 2, true); },
        set_isLoadingLevel: function(v) { return CS.Call(3, 118, 2, true, v); },
        get_levelCount: function() { return CS.Call(2, 118, 3, true); },
        set_levelCount: function(v) { return CS.Call(3, 118, 3, true, v); },
        get_streamedBytes: function() { return CS.Call(2, 118, 4, true); },
        set_streamedBytes: function(v) { return CS.Call(3, 118, 4, true, v); },
        get_isPlaying: function() { return CS.Call(2, 118, 5, true); },
        set_isPlaying: function(v) { return CS.Call(3, 118, 5, true, v); },
        get_isEditor: function() { return CS.Call(2, 118, 6, true); },
        set_isEditor: function(v) { return CS.Call(3, 118, 6, true, v); },
        get_isWebPlayer: function() { return CS.Call(2, 118, 7, true); },
        set_isWebPlayer: function(v) { return CS.Call(3, 118, 7, true, v); },
        get_platform: function() { return CS.Call(2, 118, 8, true); },
        set_platform: function(v) { return CS.Call(3, 118, 8, true, v); },
        get_isMobilePlatform: function() { return CS.Call(2, 118, 9, true); },
        set_isMobilePlatform: function(v) { return CS.Call(3, 118, 9, true, v); },
        get_isConsolePlatform: function() { return CS.Call(2, 118, 10, true); },
        set_isConsolePlatform: function(v) { return CS.Call(3, 118, 10, true, v); },
        get_runInBackground: function() { return CS.Call(2, 118, 11, true); },
        set_runInBackground: function(v) { return CS.Call(3, 118, 11, true, v); },
        get_dataPath: function() { return CS.Call(2, 118, 12, true); },
        set_dataPath: function(v) { return CS.Call(3, 118, 12, true, v); },
        get_streamingAssetsPath: function() { return CS.Call(2, 118, 13, true); },
        set_streamingAssetsPath: function(v) { return CS.Call(3, 118, 13, true, v); },
        get_persistentDataPath: function() { return CS.Call(2, 118, 14, true); },
        set_persistentDataPath: function(v) { return CS.Call(3, 118, 14, true, v); },
        get_temporaryCachePath: function() { return CS.Call(2, 118, 15, true); },
        set_temporaryCachePath: function(v) { return CS.Call(3, 118, 15, true, v); },
        get_srcValue: function() { return CS.Call(2, 118, 16, true); },
        set_srcValue: function(v) { return CS.Call(3, 118, 16, true, v); },
        get_absoluteURL: function() { return CS.Call(2, 118, 17, true); },
        set_absoluteURL: function(v) { return CS.Call(3, 118, 17, true, v); },
        get_unityVersion: function() { return CS.Call(2, 118, 18, true); },
        set_unityVersion: function(v) { return CS.Call(3, 118, 18, true, v); },
        get_webSecurityEnabled: function() { return CS.Call(2, 118, 19, true); },
        set_webSecurityEnabled: function(v) { return CS.Call(3, 118, 19, true, v); },
        get_webSecurityHostUrl: function() { return CS.Call(2, 118, 20, true); },
        set_webSecurityHostUrl: function(v) { return CS.Call(3, 118, 20, true, v); },
        get_targetFrameRate: function() { return CS.Call(2, 118, 21, true); },
        set_targetFrameRate: function(v) { return CS.Call(3, 118, 21, true, v); },
        get_systemLanguage: function() { return CS.Call(2, 118, 22, true); },
        set_systemLanguage: function(v) { return CS.Call(3, 118, 22, true, v); },
        get_backgroundLoadingPriority: function() { return CS.Call(2, 118, 23, true); },
        set_backgroundLoadingPriority: function(v) { return CS.Call(3, 118, 23, true, v); },
        get_internetReachability: function() { return CS.Call(2, 118, 24, true); },
        set_internetReachability: function(v) { return CS.Call(3, 118, 24, true, v); },
        get_genuine: function() { return CS.Call(2, 118, 25, true); },
        set_genuine: function(v) { return CS.Call(3, 118, 25, true, v); },
        get_genuineCheckAvailable: function() { return CS.Call(2, 118, 26, true); },
        set_genuineCheckAvailable: function(v) { return CS.Call(3, 118, 26, true, v); },
        CancelQuit: function() { 
            return CS.Call(4, 118, 0, true); //Ret: Void
        },
        CanStreamedLevelBeLoaded$$String: function(a0/*String*/) { 
            return CS.Call(4, 118, 1, true, a0); //Ret: Boolean
        },
        CanStreamedLevelBeLoaded$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 118, 2, true, a0); //Ret: Boolean
        },
        CaptureScreenshot$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 118, 3, true, a0, a1); //Ret: Void
        },
        CaptureScreenshot$$String: function(a0/*String*/) { 
            return CS.Call(4, 118, 4, true, a0); //Ret: Void
        },
        ExternalCall: function(a0/*String*/, a1/*Object[]*/) { 
            return CS.Call(4, 118, 5, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        GetStreamProgressForLevel$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 118, 6, true, a0); //Ret: Single
        },
        GetStreamProgressForLevel$$String: function(a0/*String*/) { 
            return CS.Call(4, 118, 7, true, a0); //Ret: Single
        },
        HasProLicense: function() { 
            return CS.Call(4, 118, 8, true); //Ret: Boolean
        },
        HasUserAuthorization: function(a0/*UserAuthorization*/) { 
            return CS.Call(4, 118, 9, true, a0); //Ret: Boolean
        },
        LoadLevel$$String: function(a0/*String*/) { 
            return CS.Call(4, 118, 10, true, a0); //Ret: Void
        },
        LoadLevel$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 118, 11, true, a0); //Ret: Void
        },
        LoadLevelAdditive$$String: function(a0/*String*/) { 
            return CS.Call(4, 118, 12, true, a0); //Ret: Void
        },
        LoadLevelAdditive$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 118, 13, true, a0); //Ret: Void
        },
        LoadLevelAdditiveAsync$$String: function(a0/*String*/) { 
            return CS.Call(4, 118, 14, true, a0); //Ret: AsyncOperation
        },
        LoadLevelAdditiveAsync$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 118, 15, true, a0); //Ret: AsyncOperation
        },
        LoadLevelAsync$$String: function(a0/*String*/) { 
            return CS.Call(4, 118, 16, true, a0); //Ret: AsyncOperation
        },
        LoadLevelAsync$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 118, 17, true, a0); //Ret: AsyncOperation
        },
        OpenURL: function(a0/*String*/) { 
            return CS.Call(4, 118, 18, true, a0); //Ret: Void
        },
        Quit: function() { 
            return CS.Call(4, 118, 19, true); //Ret: Void
        },
        RegisterLogCallback: function(a0/*LogCallback*/) { 
            return CS.Call(4, 118, 20, true, a0); //Ret: Void
        },
        RegisterLogCallbackThreaded: function(a0/*LogCallback*/) { 
            return CS.Call(4, 118, 21, true, a0); //Ret: Void
        },
        RequestUserAuthorization: function(a0/*UserAuthorization*/) { 
            return CS.Call(4, 118, 22, true, a0); //Ret: AsyncOperation
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 118, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Application);

// UnityEngine.Behaviour
var UnityEngine$Behaviour = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Behaviour",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 119, 0, true, this); },
        get_enabled: function() { return CS.Call(2, 119, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 119, 0, false, this, v); },
        get_isActiveAndEnabled: function() { return CS.Call(2, 119, 1, false, this); },
        set_isActiveAndEnabled: function(v) { return CS.Call(3, 119, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Behaviour);

// UnityEngine.Camera
var UnityEngine$Camera = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Camera",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    staticDefinition: {
        get_main: function() { return CS.Call(2, 120, 28, true); },
        set_main: function(v) { return CS.Call(3, 120, 28, true, v); },
        get_current: function() { return CS.Call(2, 120, 29, true); },
        set_current: function(v) { return CS.Call(3, 120, 29, true, v); },
        get_allCameras: function() { return CS.Call(2, 120, 30, true); },
        set_allCameras: function(v) { return CS.Call(3, 120, 30, true, v); },
        get_allCamerasCount: function() { return CS.Call(2, 120, 31, true); },
        set_allCamerasCount: function(v) { return CS.Call(3, 120, 31, true, v); },
        GetAllCameras: function(a0/*Camera[]*/) { 
            return CS.Call(4, 120, 24, true, a0); //Ret: Int32
        },
        SetupCurrent: function(a0/*Camera*/) { 
            return CS.Call(4, 120, 25, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 120, 0, true, this); },
        get_fieldOfView: function() { return CS.Call(2, 120, 0, false, this); },
        set_fieldOfView: function(v) { return CS.Call(3, 120, 0, false, this, v); },
        get_nearClipPlane: function() { return CS.Call(2, 120, 1, false, this); },
        set_nearClipPlane: function(v) { return CS.Call(3, 120, 1, false, this, v); },
        get_farClipPlane: function() { return CS.Call(2, 120, 2, false, this); },
        set_farClipPlane: function(v) { return CS.Call(3, 120, 2, false, this, v); },
        get_renderingPath: function() { return CS.Call(2, 120, 3, false, this); },
        set_renderingPath: function(v) { return CS.Call(3, 120, 3, false, this, v); },
        get_actualRenderingPath: function() { return CS.Call(2, 120, 4, false, this); },
        set_actualRenderingPath: function(v) { return CS.Call(3, 120, 4, false, this, v); },
        get_hdr: function() { return CS.Call(2, 120, 5, false, this); },
        set_hdr: function(v) { return CS.Call(3, 120, 5, false, this, v); },
        get_orthographicSize: function() { return CS.Call(2, 120, 6, false, this); },
        set_orthographicSize: function(v) { return CS.Call(3, 120, 6, false, this, v); },
        get_orthographic: function() { return CS.Call(2, 120, 7, false, this); },
        set_orthographic: function(v) { return CS.Call(3, 120, 7, false, this, v); },
        get_transparencySortMode: function() { return CS.Call(2, 120, 8, false, this); },
        set_transparencySortMode: function(v) { return CS.Call(3, 120, 8, false, this, v); },
        get_isOrthoGraphic: function() { return CS.Call(2, 120, 9, false, this); },
        set_isOrthoGraphic: function(v) { return CS.Call(3, 120, 9, false, this, v); },
        get_depth: function() { return CS.Call(2, 120, 10, false, this); },
        set_depth: function(v) { return CS.Call(3, 120, 10, false, this, v); },
        get_aspect: function() { return CS.Call(2, 120, 11, false, this); },
        set_aspect: function(v) { return CS.Call(3, 120, 11, false, this, v); },
        get_cullingMask: function() { return CS.Call(2, 120, 12, false, this); },
        set_cullingMask: function(v) { return CS.Call(3, 120, 12, false, this, v); },
        get_eventMask: function() { return CS.Call(2, 120, 13, false, this); },
        set_eventMask: function(v) { return CS.Call(3, 120, 13, false, this, v); },
        get_backgroundColor: function() { return CS.Call(2, 120, 14, false, this); },
        set_backgroundColor: function(v) { return CS.Call(3, 120, 14, false, this, v); },
        get_rect: function() { return CS.Call(2, 120, 15, false, this); },
        set_rect: function(v) { return CS.Call(3, 120, 15, false, this, v); },
        get_pixelRect: function() { return CS.Call(2, 120, 16, false, this); },
        set_pixelRect: function(v) { return CS.Call(3, 120, 16, false, this, v); },
        get_targetTexture: function() { return CS.Call(2, 120, 17, false, this); },
        set_targetTexture: function(v) { return CS.Call(3, 120, 17, false, this, v); },
        get_pixelWidth: function() { return CS.Call(2, 120, 18, false, this); },
        set_pixelWidth: function(v) { return CS.Call(3, 120, 18, false, this, v); },
        get_pixelHeight: function() { return CS.Call(2, 120, 19, false, this); },
        set_pixelHeight: function(v) { return CS.Call(3, 120, 19, false, this, v); },
        get_cameraToWorldMatrix: function() { return CS.Call(2, 120, 20, false, this); },
        set_cameraToWorldMatrix: function(v) { return CS.Call(3, 120, 20, false, this, v); },
        get_worldToCameraMatrix: function() { return CS.Call(2, 120, 21, false, this); },
        set_worldToCameraMatrix: function(v) { return CS.Call(3, 120, 21, false, this, v); },
        get_projectionMatrix: function() { return CS.Call(2, 120, 22, false, this); },
        set_projectionMatrix: function(v) { return CS.Call(3, 120, 22, false, this, v); },
        get_velocity: function() { return CS.Call(2, 120, 23, false, this); },
        set_velocity: function(v) { return CS.Call(3, 120, 23, false, this, v); },
        get_clearFlags: function() { return CS.Call(2, 120, 24, false, this); },
        set_clearFlags: function(v) { return CS.Call(3, 120, 24, false, this, v); },
        get_stereoEnabled: function() { return CS.Call(2, 120, 25, false, this); },
        set_stereoEnabled: function(v) { return CS.Call(3, 120, 25, false, this, v); },
        get_stereoSeparation: function() { return CS.Call(2, 120, 26, false, this); },
        set_stereoSeparation: function(v) { return CS.Call(3, 120, 26, false, this, v); },
        get_stereoConvergence: function() { return CS.Call(2, 120, 27, false, this); },
        set_stereoConvergence: function(v) { return CS.Call(3, 120, 27, false, this, v); },
        get_useOcclusionCulling: function() { return CS.Call(2, 120, 32, false, this); },
        set_useOcclusionCulling: function(v) { return CS.Call(3, 120, 32, false, this, v); },
        get_layerCullDistances: function() { return CS.Call(2, 120, 33, false, this); },
        set_layerCullDistances: function(v) { return CS.Call(3, 120, 33, false, this, v); },
        get_layerCullSpherical: function() { return CS.Call(2, 120, 34, false, this); },
        set_layerCullSpherical: function(v) { return CS.Call(3, 120, 34, false, this, v); },
        get_depthTextureMode: function() { return CS.Call(2, 120, 35, false, this); },
        set_depthTextureMode: function(v) { return CS.Call(3, 120, 35, false, this, v); },
        get_clearStencilAfterLightingPass: function() { return CS.Call(2, 120, 36, false, this); },
        set_clearStencilAfterLightingPass: function(v) { return CS.Call(3, 120, 36, false, this, v); },
        CalculateObliqueMatrix: function(a0/*Vector4*/) { 
            return CS.Call(4, 120, 0, false, this, a0); //Ret: Matrix4x4
        },
        CopyFrom: function(a0/*Camera*/) { 
            return CS.Call(4, 120, 1, false, this, a0); //Ret: Void
        },
        Render: function() { 
            return CS.Call(4, 120, 2, false, this); //Ret: Void
        },
        RenderDontRestore: function() { 
            return CS.Call(4, 120, 3, false, this); //Ret: Void
        },
        RenderToCubemap$$Cubemap$$Int32: function(a0/*Cubemap*/, a1/*Int32*/) { 
            return CS.Call(4, 120, 4, false, this, a0, a1); //Ret: Boolean
        },
        RenderToCubemap$$RenderTexture$$Int32: function(a0/*RenderTexture*/, a1/*Int32*/) { 
            return CS.Call(4, 120, 5, false, this, a0, a1); //Ret: Boolean
        },
        RenderToCubemap$$Cubemap: function(a0/*Cubemap*/) { 
            return CS.Call(4, 120, 6, false, this, a0); //Ret: Boolean
        },
        RenderToCubemap$$RenderTexture: function(a0/*RenderTexture*/) { 
            return CS.Call(4, 120, 7, false, this, a0); //Ret: Boolean
        },
        RenderWithShader: function(a0/*Shader*/, a1/*String*/) { 
            return CS.Call(4, 120, 8, false, this, a0, a1); //Ret: Void
        },
        ResetAspect: function() { 
            return CS.Call(4, 120, 9, false, this); //Ret: Void
        },
        ResetProjectionMatrix: function() { 
            return CS.Call(4, 120, 10, false, this); //Ret: Void
        },
        ResetReplacementShader: function() { 
            return CS.Call(4, 120, 11, false, this); //Ret: Void
        },
        ResetWorldToCameraMatrix: function() { 
            return CS.Call(4, 120, 12, false, this); //Ret: Void
        },
        ScreenPointToRay: function(a0/*Vector3*/) { 
            return CS.Call(4, 120, 13, false, this, a0); //Ret: Ray
        },
        ScreenToViewportPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 120, 14, false, this, a0); //Ret: Vector3
        },
        ScreenToWorldPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 120, 15, false, this, a0); //Ret: Vector3
        },
        SetReplacementShader: function(a0/*Shader*/, a1/*String*/) { 
            return CS.Call(4, 120, 16, false, this, a0, a1); //Ret: Void
        },
        SetTargetBuffers$$RenderBuffer$$RenderBuffer: function(a0/*RenderBuffer*/, a1/*RenderBuffer*/) { 
            return CS.Call(4, 120, 17, false, this, a0, a1); //Ret: Void
        },
        SetTargetBuffers$$RenderBuffer$Array$$RenderBuffer: function(a0/*RenderBuffer[]*/, a1/*RenderBuffer*/) { 
            return CS.Call(4, 120, 18, false, this, a0, a1); //Ret: Void
        },
        ViewportPointToRay: function(a0/*Vector3*/) { 
            return CS.Call(4, 120, 19, false, this, a0); //Ret: Ray
        },
        ViewportToScreenPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 120, 20, false, this, a0); //Ret: Vector3
        },
        ViewportToWorldPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 120, 21, false, this, a0); //Ret: Vector3
        },
        WorldToScreenPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 120, 22, false, this, a0); //Ret: Vector3
        },
        WorldToViewportPoint: function(a0/*Vector3*/) { 
            return CS.Call(4, 120, 23, false, this, a0); //Ret: Vector3
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Camera);

// UnityEngine.ComputeShader
var UnityEngine$ComputeShader = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ComputeShader",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 121, 0, true, this); },
        Dispatch: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 121, 0, false, this, a0, a1, a2, a3); //Ret: Void
        },
        FindKernel: function(a0/*String*/) { 
            return CS.Call(4, 121, 1, false, this, a0); //Ret: Int32
        },
        SetBuffer: function(a0/*Int32*/, a1/*String*/, a2/*ComputeBuffer*/) { 
            return CS.Call(4, 121, 2, false, this, a0, a1, a2); //Ret: Void
        },
        SetFloat: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 121, 3, false, this, a0, a1); //Ret: Void
        },
        SetFloats: function(a0/*String*/, a1/*Single[]*/) { 
            return CS.Call(4, 121, 4, false, this, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        SetInt: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 121, 5, false, this, a0, a1); //Ret: Void
        },
        SetInts: function(a0/*String*/, a1/*Int32[]*/) { 
            return CS.Call(4, 121, 6, false, this, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Void
        },
        SetTexture: function(a0/*Int32*/, a1/*String*/, a2/*Texture*/) { 
            return CS.Call(4, 121, 7, false, this, a0, a1, a2); //Ret: Void
        },
        SetVector: function(a0/*String*/, a1/*Vector4*/) { 
            return CS.Call(4, 121, 8, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ComputeShader);

// UnityEngine.ComputeBuffer
var UnityEngine$ComputeBuffer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ComputeBuffer",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.IDisposable"],
    staticDefinition: {
        CopyCount: function(a0/*ComputeBuffer*/, a1/*ComputeBuffer*/, a2/*Int32*/) { 
            return CS.Call(4, 122, 4, true, a0, a1, a2); //Ret: Void
        },
    },
    definition: {
        ctor$$Int32$$Int32: function(a0, a1) { CS.Call(5, 122, 0, true, this, a0, a1); },
        ctor$$Int32$$Int32$$ComputeBufferType: function(a0, a1, a2) { CS.Call(5, 122, 1, true, this, a0, a1, a2); },
        get_count: function() { return CS.Call(2, 122, 0, false, this); },
        set_count: function(v) { return CS.Call(3, 122, 0, false, this, v); },
        get_stride: function() { return CS.Call(2, 122, 1, false, this); },
        set_stride: function(v) { return CS.Call(3, 122, 1, false, this, v); },
        Dispose: function() { 
            return CS.Call(4, 122, 0, false, this); //Ret: Void
        },
        GetData: function(a0/*Array*/) { 
            return CS.Call(4, 122, 1, false, this, a0); //Ret: Void
        },
        Release: function() { 
            return CS.Call(4, 122, 2, false, this); //Ret: Void
        },
        SetData: function(a0/*Array*/) { 
            return CS.Call(4, 122, 3, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ComputeBuffer);

// UnityEngine.Debug
var UnityEngine$Debug = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Debug",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_developerConsoleVisible: function() { return CS.Call(2, 123, 0, true); },
        set_developerConsoleVisible: function(v) { return CS.Call(3, 123, 0, true, v); },
        get_isDebugBuild: function() { return CS.Call(2, 123, 1, true); },
        set_isDebugBuild: function(v) { return CS.Call(3, 123, 1, true, v); },
        Break: function() { 
            return CS.Call(4, 123, 0, true); //Ret: Void
        },
        ClearDeveloperConsole: function() { 
            return CS.Call(4, 123, 1, true); //Ret: Void
        },
        DebugBreak: function() { 
            return CS.Call(4, 123, 2, true); //Ret: Void
        },
        DrawLine$$Vector3$$Vector3$$Color$$Single$$Boolean: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Color*/, a3/*Single*/, a4/*Boolean*/) { 
            return CS.Call(4, 123, 3, true, a0, a1, a2, a3, a4); //Ret: Void
        },
        DrawLine$$Vector3$$Vector3$$Color$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Color*/, a3/*Single*/) { 
            return CS.Call(4, 123, 4, true, a0, a1, a2, a3); //Ret: Void
        },
        DrawLine$$Vector3$$Vector3$$Color: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Color*/) { 
            return CS.Call(4, 123, 5, true, a0, a1, a2); //Ret: Void
        },
        DrawLine$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 123, 6, true, a0, a1); //Ret: Void
        },
        DrawRay$$Vector3$$Vector3$$Color$$Single$$Boolean: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Color*/, a3/*Single*/, a4/*Boolean*/) { 
            return CS.Call(4, 123, 7, true, a0, a1, a2, a3, a4); //Ret: Void
        },
        DrawRay$$Vector3$$Vector3$$Color$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Color*/, a3/*Single*/) { 
            return CS.Call(4, 123, 8, true, a0, a1, a2, a3); //Ret: Void
        },
        DrawRay$$Vector3$$Vector3$$Color: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Color*/) { 
            return CS.Call(4, 123, 9, true, a0, a1, a2); //Ret: Void
        },
        DrawRay$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 123, 10, true, a0, a1); //Ret: Void
        },
        Log$$Object$$Object: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 123, 11, true, a0, a1); //Ret: Void
        },
        Log$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 123, 12, true, a0); //Ret: Void
        },
        LogError$$Object$$Object: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 123, 13, true, a0, a1); //Ret: Void
        },
        LogError$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 123, 14, true, a0); //Ret: Void
        },
        LogException$$Exception$$Object: function(a0/*Exception*/, a1/*Object*/) { 
            return CS.Call(4, 123, 15, true, a0, a1); //Ret: Void
        },
        LogException$$Exception: function(a0/*Exception*/) { 
            return CS.Call(4, 123, 16, true, a0); //Ret: Void
        },
        LogWarning$$Object$$Object: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 123, 17, true, a0, a1); //Ret: Void
        },
        LogWarning$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 123, 18, true, a0); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 123, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Debug);

// UnityEngine.Display
var UnityEngine$Display = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Display",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        displays: {
            get: function() { return CS.Call(0, 124, 0, true); }, 
            set: function(v) { return CS.Call(1, 124, 0, true, v); }
        },
    },
    staticDefinition: {
        get_main: function() { return CS.Call(2, 124, 6, true); },
        set_main: function(v) { return CS.Call(3, 124, 6, true, v); },
        add_onDisplaysUpdated: function(a0/*DisplaysUpdatedDelegate*/) { 
            return CS.Call(4, 124, 2, true, a0); //Ret: Void
        },
        remove_onDisplaysUpdated: function(a0/*DisplaysUpdatedDelegate*/) { 
            return CS.Call(4, 124, 3, true, a0); //Ret: Void
        },
    },
    definition: {
        get_renderingWidth: function() { return CS.Call(2, 124, 0, false, this); },
        set_renderingWidth: function(v) { return CS.Call(3, 124, 0, false, this, v); },
        get_renderingHeight: function() { return CS.Call(2, 124, 1, false, this); },
        set_renderingHeight: function(v) { return CS.Call(3, 124, 1, false, this, v); },
        get_systemWidth: function() { return CS.Call(2, 124, 2, false, this); },
        set_systemWidth: function(v) { return CS.Call(3, 124, 2, false, this, v); },
        get_systemHeight: function() { return CS.Call(2, 124, 3, false, this); },
        set_systemHeight: function(v) { return CS.Call(3, 124, 3, false, this, v); },
        get_colorBuffer: function() { return CS.Call(2, 124, 4, false, this); },
        set_colorBuffer: function(v) { return CS.Call(3, 124, 4, false, this, v); },
        get_depthBuffer: function() { return CS.Call(2, 124, 5, false, this); },
        set_depthBuffer: function(v) { return CS.Call(3, 124, 5, false, this, v); },
        Activate: function() { 
            return CS.Call(4, 124, 0, false, this); //Ret: Void
        },
        SetRenderingResolution: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 124, 1, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Display);

// UnityEngine.MonoBehaviour
var UnityEngine$MonoBehaviour = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MonoBehaviour",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    staticDefinition: {
        print: function(a0/*Object*/) { 
            return CS.Call(4, 125, 14, true, a0); //Ret: Void
        },
    },
    definition: {
        get_useGUILayout: function() { return CS.Call(2, 125, 0, false, this); },
        set_useGUILayout: function(v) { return CS.Call(3, 125, 0, false, this, v); },
        CancelInvoke$$String: function(a0/*String*/) { 
            return CS.Call(4, 125, 0, false, this, a0); //Ret: Void
        },
        CancelInvoke: function() { 
            return CS.Call(4, 125, 1, false, this); //Ret: Void
        },
        Invoke: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 125, 2, false, this, a0, a1); //Ret: Void
        },
        InvokeRepeating: function(a0/*String*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 125, 3, false, this, a0, a1, a2); //Ret: Void
        },
        IsInvoking$$String: function(a0/*String*/) { 
            return CS.Call(4, 125, 4, false, this, a0); //Ret: Boolean
        },
        IsInvoking: function() { 
            return CS.Call(4, 125, 5, false, this); //Ret: Boolean
        },
        StartCoroutine$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 125, 6, false, this, a0, a1); //Ret: Coroutine
        },
        StartCoroutine$$String: function(a0/*String*/) { 
            return CS.Call(4, 125, 7, false, this, a0); //Ret: Coroutine
        },
        StartCoroutine$$IEnumerator: function(a0/*IEnumerator*/) { 
            return CS.Call(4, 125, 8, false, this, a0); //Ret: Coroutine
        },
        StartCoroutine_Auto: function(a0/*IEnumerator*/) { 
            return CS.Call(4, 125, 9, false, this, a0); //Ret: Coroutine
        },
        StopAllCoroutines: function() { 
            return CS.Call(4, 125, 10, false, this); //Ret: Void
        },
        StopCoroutine$$Coroutine: function(a0/*Coroutine*/) { 
            return CS.Call(4, 125, 11, false, this, a0); //Ret: Void
        },
        StopCoroutine$$String: function(a0/*String*/) { 
            return CS.Call(4, 125, 12, false, this, a0); //Ret: Void
        },
        StopCoroutine$$IEnumerator: function(a0/*IEnumerator*/) { 
            return CS.Call(4, 125, 13, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MonoBehaviour);

// UnityEngine.Touch
var UnityEngine$Touch = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Touch",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 126, 0, true, this); },
        get_fingerId: function() { return CS.Call(2, 126, 0, false, this); },
        set_fingerId: function(v) { return CS.Call(3, 126, 0, false, this, v); },
        get_position: function() { return CS.Call(2, 126, 1, false, this); },
        set_position: function(v) { return CS.Call(3, 126, 1, false, this, v); },
        get_rawPosition: function() { return CS.Call(2, 126, 2, false, this); },
        set_rawPosition: function(v) { return CS.Call(3, 126, 2, false, this, v); },
        get_deltaPosition: function() { return CS.Call(2, 126, 3, false, this); },
        set_deltaPosition: function(v) { return CS.Call(3, 126, 3, false, this, v); },
        get_deltaTime: function() { return CS.Call(2, 126, 4, false, this); },
        set_deltaTime: function(v) { return CS.Call(3, 126, 4, false, this, v); },
        get_tapCount: function() { return CS.Call(2, 126, 5, false, this); },
        set_tapCount: function(v) { return CS.Call(3, 126, 5, false, this, v); },
        get_phase: function() { return CS.Call(2, 126, 6, false, this); },
        set_phase: function(v) { return CS.Call(3, 126, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Touch);

// UnityEngine.AccelerationEvent
var UnityEngine$AccelerationEvent = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AccelerationEvent",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 127, 0, true, this); },
        get_acceleration: function() { return CS.Call(2, 127, 0, false, this); },
        set_acceleration: function(v) { return CS.Call(3, 127, 0, false, this, v); },
        get_deltaTime: function() { return CS.Call(2, 127, 1, false, this); },
        set_deltaTime: function(v) { return CS.Call(3, 127, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AccelerationEvent);

// UnityEngine.Gyroscope
var UnityEngine$Gyroscope = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Gyroscope",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        get_rotationRate: function() { return CS.Call(2, 128, 0, false, this); },
        set_rotationRate: function(v) { return CS.Call(3, 128, 0, false, this, v); },
        get_rotationRateUnbiased: function() { return CS.Call(2, 128, 1, false, this); },
        set_rotationRateUnbiased: function(v) { return CS.Call(3, 128, 1, false, this, v); },
        get_gravity: function() { return CS.Call(2, 128, 2, false, this); },
        set_gravity: function(v) { return CS.Call(3, 128, 2, false, this, v); },
        get_userAcceleration: function() { return CS.Call(2, 128, 3, false, this); },
        set_userAcceleration: function(v) { return CS.Call(3, 128, 3, false, this, v); },
        get_attitude: function() { return CS.Call(2, 128, 4, false, this); },
        set_attitude: function(v) { return CS.Call(3, 128, 4, false, this, v); },
        get_enabled: function() { return CS.Call(2, 128, 5, false, this); },
        set_enabled: function(v) { return CS.Call(3, 128, 5, false, this, v); },
        get_updateInterval: function() { return CS.Call(2, 128, 6, false, this); },
        set_updateInterval: function(v) { return CS.Call(3, 128, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Gyroscope);

// UnityEngine.LocationInfo
var UnityEngine$LocationInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LocationInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 129, 0, true, this); },
        get_latitude: function() { return CS.Call(2, 129, 0, false, this); },
        set_latitude: function(v) { return CS.Call(3, 129, 0, false, this, v); },
        get_longitude: function() { return CS.Call(2, 129, 1, false, this); },
        set_longitude: function(v) { return CS.Call(3, 129, 1, false, this, v); },
        get_altitude: function() { return CS.Call(2, 129, 2, false, this); },
        set_altitude: function(v) { return CS.Call(3, 129, 2, false, this, v); },
        get_horizontalAccuracy: function() { return CS.Call(2, 129, 3, false, this); },
        set_horizontalAccuracy: function(v) { return CS.Call(3, 129, 3, false, this, v); },
        get_verticalAccuracy: function() { return CS.Call(2, 129, 4, false, this); },
        set_verticalAccuracy: function(v) { return CS.Call(3, 129, 4, false, this, v); },
        get_timestamp: function() { return CS.Call(2, 129, 5, false, this); },
        set_timestamp: function(v) { return CS.Call(3, 129, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LocationInfo);

// UnityEngine.LocationService
var UnityEngine$LocationService = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.LocationService",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 130, 0, true, this); },
        get_isEnabledByUser: function() { return CS.Call(2, 130, 0, false, this); },
        set_isEnabledByUser: function(v) { return CS.Call(3, 130, 0, false, this, v); },
        get_status: function() { return CS.Call(2, 130, 1, false, this); },
        set_status: function(v) { return CS.Call(3, 130, 1, false, this, v); },
        get_lastData: function() { return CS.Call(2, 130, 2, false, this); },
        set_lastData: function(v) { return CS.Call(3, 130, 2, false, this, v); },
        Start$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 130, 0, false, this, a0, a1); //Ret: Void
        },
        Start$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 130, 1, false, this, a0); //Ret: Void
        },
        Start: function() { 
            return CS.Call(4, 130, 2, false, this); //Ret: Void
        },
        Stop: function() { 
            return CS.Call(4, 130, 3, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$LocationService);

// UnityEngine.Compass
var UnityEngine$Compass = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Compass",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 131, 0, true, this); },
        get_magneticHeading: function() { return CS.Call(2, 131, 0, false, this); },
        set_magneticHeading: function(v) { return CS.Call(3, 131, 0, false, this, v); },
        get_trueHeading: function() { return CS.Call(2, 131, 1, false, this); },
        set_trueHeading: function(v) { return CS.Call(3, 131, 1, false, this, v); },
        get_headingAccuracy: function() { return CS.Call(2, 131, 2, false, this); },
        set_headingAccuracy: function(v) { return CS.Call(3, 131, 2, false, this, v); },
        get_rawVector: function() { return CS.Call(2, 131, 3, false, this); },
        set_rawVector: function(v) { return CS.Call(3, 131, 3, false, this, v); },
        get_timestamp: function() { return CS.Call(2, 131, 4, false, this); },
        set_timestamp: function(v) { return CS.Call(3, 131, 4, false, this, v); },
        get_enabled: function() { return CS.Call(2, 131, 5, false, this); },
        set_enabled: function(v) { return CS.Call(3, 131, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Compass);

// UnityEngine.Input
var UnityEngine$Input = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Input",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_compensateSensors: function() { return CS.Call(2, 132, 0, true); },
        set_compensateSensors: function(v) { return CS.Call(3, 132, 0, true, v); },
        get_gyro: function() { return CS.Call(2, 132, 1, true); },
        set_gyro: function(v) { return CS.Call(3, 132, 1, true, v); },
        get_mousePosition: function() { return CS.Call(2, 132, 2, true); },
        set_mousePosition: function(v) { return CS.Call(3, 132, 2, true, v); },
        get_mouseScrollDelta: function() { return CS.Call(2, 132, 3, true); },
        set_mouseScrollDelta: function(v) { return CS.Call(3, 132, 3, true, v); },
        get_mousePresent: function() { return CS.Call(2, 132, 4, true); },
        set_mousePresent: function(v) { return CS.Call(3, 132, 4, true, v); },
        get_simulateMouseWithTouches: function() { return CS.Call(2, 132, 5, true); },
        set_simulateMouseWithTouches: function(v) { return CS.Call(3, 132, 5, true, v); },
        get_anyKey: function() { return CS.Call(2, 132, 6, true); },
        set_anyKey: function(v) { return CS.Call(3, 132, 6, true, v); },
        get_anyKeyDown: function() { return CS.Call(2, 132, 7, true); },
        set_anyKeyDown: function(v) { return CS.Call(3, 132, 7, true, v); },
        get_inputString: function() { return CS.Call(2, 132, 8, true); },
        set_inputString: function(v) { return CS.Call(3, 132, 8, true, v); },
        get_acceleration: function() { return CS.Call(2, 132, 9, true); },
        set_acceleration: function(v) { return CS.Call(3, 132, 9, true, v); },
        get_accelerationEvents: function() { return CS.Call(2, 132, 10, true); },
        set_accelerationEvents: function(v) { return CS.Call(3, 132, 10, true, v); },
        get_accelerationEventCount: function() { return CS.Call(2, 132, 11, true); },
        set_accelerationEventCount: function(v) { return CS.Call(3, 132, 11, true, v); },
        get_touches: function() { return CS.Call(2, 132, 12, true); },
        set_touches: function(v) { return CS.Call(3, 132, 12, true, v); },
        get_touchCount: function() { return CS.Call(2, 132, 13, true); },
        set_touchCount: function(v) { return CS.Call(3, 132, 13, true, v); },
        get_touchSupported: function() { return CS.Call(2, 132, 14, true); },
        set_touchSupported: function(v) { return CS.Call(3, 132, 14, true, v); },
        get_multiTouchEnabled: function() { return CS.Call(2, 132, 15, true); },
        set_multiTouchEnabled: function(v) { return CS.Call(3, 132, 15, true, v); },
        get_location: function() { return CS.Call(2, 132, 16, true); },
        set_location: function(v) { return CS.Call(3, 132, 16, true, v); },
        get_compass: function() { return CS.Call(2, 132, 17, true); },
        set_compass: function(v) { return CS.Call(3, 132, 17, true, v); },
        get_deviceOrientation: function() { return CS.Call(2, 132, 18, true); },
        set_deviceOrientation: function(v) { return CS.Call(3, 132, 18, true, v); },
        get_imeCompositionMode: function() { return CS.Call(2, 132, 19, true); },
        set_imeCompositionMode: function(v) { return CS.Call(3, 132, 19, true, v); },
        get_compositionString: function() { return CS.Call(2, 132, 20, true); },
        set_compositionString: function(v) { return CS.Call(3, 132, 20, true, v); },
        get_imeIsSelected: function() { return CS.Call(2, 132, 21, true); },
        set_imeIsSelected: function(v) { return CS.Call(3, 132, 21, true, v); },
        get_compositionCursorPos: function() { return CS.Call(2, 132, 22, true); },
        set_compositionCursorPos: function(v) { return CS.Call(3, 132, 22, true, v); },
        GetAccelerationEvent: function(a0/*Int32*/) { 
            return CS.Call(4, 132, 0, true, a0); //Ret: AccelerationEvent
        },
        GetAxis: function(a0/*String*/) { 
            return CS.Call(4, 132, 1, true, a0); //Ret: Single
        },
        GetAxisRaw: function(a0/*String*/) { 
            return CS.Call(4, 132, 2, true, a0); //Ret: Single
        },
        GetButton: function(a0/*String*/) { 
            return CS.Call(4, 132, 3, true, a0); //Ret: Boolean
        },
        GetButtonDown: function(a0/*String*/) { 
            return CS.Call(4, 132, 4, true, a0); //Ret: Boolean
        },
        GetButtonUp: function(a0/*String*/) { 
            return CS.Call(4, 132, 5, true, a0); //Ret: Boolean
        },
        GetJoystickNames: function() { 
            return CS.Call(4, 132, 6, true); //Ret: String[]
        },
        GetKey$$String: function(a0/*String*/) { 
            return CS.Call(4, 132, 7, true, a0); //Ret: Boolean
        },
        GetKey$$KeyCode: function(a0/*KeyCode*/) { 
            return CS.Call(4, 132, 8, true, a0); //Ret: Boolean
        },
        GetKeyDown$$KeyCode: function(a0/*KeyCode*/) { 
            return CS.Call(4, 132, 9, true, a0); //Ret: Boolean
        },
        GetKeyDown$$String: function(a0/*String*/) { 
            return CS.Call(4, 132, 10, true, a0); //Ret: Boolean
        },
        GetKeyUp$$String: function(a0/*String*/) { 
            return CS.Call(4, 132, 11, true, a0); //Ret: Boolean
        },
        GetKeyUp$$KeyCode: function(a0/*KeyCode*/) { 
            return CS.Call(4, 132, 12, true, a0); //Ret: Boolean
        },
        GetMouseButton: function(a0/*Int32*/) { 
            return CS.Call(4, 132, 13, true, a0); //Ret: Boolean
        },
        GetMouseButtonDown: function(a0/*Int32*/) { 
            return CS.Call(4, 132, 14, true, a0); //Ret: Boolean
        },
        GetMouseButtonUp: function(a0/*Int32*/) { 
            return CS.Call(4, 132, 15, true, a0); //Ret: Boolean
        },
        GetTouch: function(a0/*Int32*/) { 
            return CS.Call(4, 132, 16, true, a0); //Ret: Touch
        },
        ResetInputAxes: function() { 
            return CS.Call(4, 132, 17, true); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 132, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Input);

// UnityEngine.Object
var UnityEngine$Object = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Object",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        Destroy$$Object$$Single: function(a0/*Object*/, a1/*Single*/) { 
            return CS.Call(4, 133, 4, true, a0, a1); //Ret: Void
        },
        Destroy$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 133, 5, true, a0); //Ret: Void
        },
        DestroyImmediate$$Object$$Boolean: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 133, 6, true, a0, a1); //Ret: Void
        },
        DestroyImmediate$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 133, 7, true, a0); //Ret: Void
        },
        DestroyObject$$Object$$Single: function(a0/*Object*/, a1/*Single*/) { 
            return CS.Call(4, 133, 8, true, a0, a1); //Ret: Void
        },
        DestroyObject$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 133, 9, true, a0); //Ret: Void
        },
        DontDestroyOnLoad: function(a0/*Object*/) { 
            return CS.Call(4, 133, 10, true, a0); //Ret: Void
        },
        FindObjectOfType$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 133, 11, true, a0.get_FullName()); //Ret: Object
        },
        FindObjectOfType$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 133, 12, true, native_t0); //Ret: T
        },
        FindObjectsOfType$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 133, 13, true, a0.get_FullName()); //Ret: Object[]
        },
        FindObjectsOfType$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 133, 14, true, native_t0); //Ret: T[]
        },
        Instantiate$$Object$$Vector3$$Quaternion: function(a0/*Object*/, a1/*Vector3*/, a2/*Quaternion*/) { 
            return CS.Call(4, 133, 15, true, a0, a1, a2); //Ret: Object
        },
        Instantiate$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 133, 16, true, a0); //Ret: Object
        },
        op_Equality: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 133, 17, true, a0, a1); //Ret: Boolean
        },
        op_Implicit: function(a0/*Object*/) { 
            return CS.Call(4, 133, 18, true, a0); //Ret: Boolean
        },
        op_Inequality: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 133, 19, true, a0, a1); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 133, 0, true, this); },
        get_name: function() { return CS.Call(2, 133, 0, false, this); },
        set_name: function(v) { return CS.Call(3, 133, 0, false, this, v); },
        get_hideFlags: function() { return CS.Call(2, 133, 1, false, this); },
        set_hideFlags: function(v) { return CS.Call(3, 133, 1, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 133, 0, false, this, a0); //Ret: Boolean
        },
        GetHashCode: function() { 
            return CS.Call(4, 133, 1, false, this); //Ret: Int32
        },
        GetInstanceID: function() { 
            return CS.Call(4, 133, 2, false, this); //Ret: Int32
        },
        toString: function() { 
            return CS.Call(4, 133, 3, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Object);

// UnityEngine.Component
var UnityEngine$Component = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Component",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 134, 0, true, this); },
        get_transform: function() { return CS.Call(2, 134, 0, false, this); },
        set_transform: function(v) { return CS.Call(3, 134, 0, false, this, v); },
        get_rigidbody: function() { return CS.Call(2, 134, 1, false, this); },
        set_rigidbody: function(v) { return CS.Call(3, 134, 1, false, this, v); },
        get_rigidbody2D: function() { return CS.Call(2, 134, 2, false, this); },
        set_rigidbody2D: function(v) { return CS.Call(3, 134, 2, false, this, v); },
        get_camera: function() { return CS.Call(2, 134, 3, false, this); },
        set_camera: function(v) { return CS.Call(3, 134, 3, false, this, v); },
        get_light: function() { return CS.Call(2, 134, 4, false, this); },
        set_light: function(v) { return CS.Call(3, 134, 4, false, this, v); },
        get_animation: function() { return CS.Call(2, 134, 5, false, this); },
        set_animation: function(v) { return CS.Call(3, 134, 5, false, this, v); },
        get_constantForce: function() { return CS.Call(2, 134, 6, false, this); },
        set_constantForce: function(v) { return CS.Call(3, 134, 6, false, this, v); },
        get_renderer: function() { return CS.Call(2, 134, 7, false, this); },
        set_renderer: function(v) { return CS.Call(3, 134, 7, false, this, v); },
        get_audio: function() { return CS.Call(2, 134, 8, false, this); },
        set_audio: function(v) { return CS.Call(3, 134, 8, false, this, v); },
        get_guiText: function() { return CS.Call(2, 134, 9, false, this); },
        set_guiText: function(v) { return CS.Call(3, 134, 9, false, this, v); },
        get_guiTexture: function() { return CS.Call(2, 134, 10, false, this); },
        set_guiTexture: function(v) { return CS.Call(3, 134, 10, false, this, v); },
        get_collider: function() { return CS.Call(2, 134, 11, false, this); },
        set_collider: function(v) { return CS.Call(3, 134, 11, false, this, v); },
        get_collider2D: function() { return CS.Call(2, 134, 12, false, this); },
        set_collider2D: function(v) { return CS.Call(3, 134, 12, false, this, v); },
        get_hingeJoint: function() { return CS.Call(2, 134, 13, false, this); },
        set_hingeJoint: function(v) { return CS.Call(3, 134, 13, false, this, v); },
        get_particleEmitter: function() { return CS.Call(2, 134, 14, false, this); },
        set_particleEmitter: function(v) { return CS.Call(3, 134, 14, false, this, v); },
        get_particleSystem: function() { return CS.Call(2, 134, 15, false, this); },
        set_particleSystem: function(v) { return CS.Call(3, 134, 15, false, this, v); },
        get_gameObject: function() { return CS.Call(2, 134, 16, false, this); },
        set_gameObject: function(v) { return CS.Call(3, 134, 16, false, this, v); },
        get_tag: function() { return CS.Call(2, 134, 17, false, this); },
        set_tag: function(v) { return CS.Call(3, 134, 17, false, this, v); },
        BroadcastMessage$$String$$Object$$SendMessageOptions: function(a0/*String*/, a1/*Object*/, a2/*SendMessageOptions*/) { 
            return CS.Call(4, 134, 0, false, this, a0, a1, a2); //Ret: Void
        },
        BroadcastMessage$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 134, 1, false, this, a0, a1); //Ret: Void
        },
        BroadcastMessage$$String$$SendMessageOptions: function(a0/*String*/, a1/*SendMessageOptions*/) { 
            return CS.Call(4, 134, 2, false, this, a0, a1); //Ret: Void
        },
        BroadcastMessage$$String: function(a0/*String*/) { 
            return CS.Call(4, 134, 3, false, this, a0); //Ret: Void
        },
        CompareTag: function(a0/*String*/) { 
            return CS.Call(4, 134, 4, false, this, a0); //Ret: Boolean
        },
        GetComponent$$String: function(a0/*String*/) { 
            return CS.Call(4, 134, 5, false, this, a0); //Ret: Component
        },
        GetComponent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 134, 6, false, this, a0.get_FullName()); //Ret: Component
        },
        GetComponent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 134, 7, false, this, native_t0); //Ret: T
        },
        GetComponentInChildren$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 134, 8, false, this, a0.get_FullName()); //Ret: Component
        },
        GetComponentInChildren$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 134, 9, false, this, native_t0); //Ret: T
        },
        GetComponentInParent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 134, 10, false, this, a0.get_FullName()); //Ret: Component
        },
        GetComponentInParent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 134, 11, false, this, native_t0); //Ret: T
        },
        GetComponents$$Type$$List$1$Component: function(a0/*Type*/, a1/*List`1*/) { 
            return CS.Call(4, 134, 12, false, this, a0.get_FullName(), a1); //Ret: Void
        },
        GetComponents$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 134, 13, false, this, a0.get_FullName()); //Ret: Component[]
        },
        GetComponents$1$$List$1: function(t0, a0/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 134, 14, false, this, native_t0, a0); //Ret: Void
        },
        GetComponents$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 134, 15, false, this, native_t0); //Ret: T[]
        },
        GetComponentsInChildren$1$$Boolean$$List$1: function(t0, a0/*Boolean*/, a1/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 134, 16, false, this, native_t0, a0, a1); //Ret: Void
        },
        GetComponentsInChildren$$Type$$Boolean: function(a0/*Type*/, a1/*Boolean*/) { 
            return CS.Call(4, 134, 17, false, this, a0.get_FullName(), a1); //Ret: Component[]
        },
        GetComponentsInChildren$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 134, 18, false, this, a0.get_FullName()); //Ret: Component[]
        },
        GetComponentsInChildren$1$$Boolean: function(t0, a0/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 134, 19, false, this, native_t0, a0); //Ret: T[]
        },
        GetComponentsInChildren$1$$List$1: function(t0, a0/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 134, 20, false, this, native_t0, a0); //Ret: Void
        },
        GetComponentsInChildren$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 134, 21, false, this, native_t0); //Ret: T[]
        },
        GetComponentsInParent$$Type$$Boolean: function(a0/*Type*/, a1/*Boolean*/) { 
            return CS.Call(4, 134, 22, false, this, a0.get_FullName(), a1); //Ret: Component[]
        },
        GetComponentsInParent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 134, 23, false, this, a0.get_FullName()); //Ret: Component[]
        },
        GetComponentsInParent$1$$Boolean: function(t0, a0/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 134, 24, false, this, native_t0, a0); //Ret: T[]
        },
        GetComponentsInParent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 134, 25, false, this, native_t0); //Ret: T[]
        },
        SendMessage$$String$$Object$$SendMessageOptions: function(a0/*String*/, a1/*Object*/, a2/*SendMessageOptions*/) { 
            return CS.Call(4, 134, 26, false, this, a0, a1, a2); //Ret: Void
        },
        SendMessage$$String$$SendMessageOptions: function(a0/*String*/, a1/*SendMessageOptions*/) { 
            return CS.Call(4, 134, 27, false, this, a0, a1); //Ret: Void
        },
        SendMessage$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 134, 28, false, this, a0, a1); //Ret: Void
        },
        SendMessage$$String: function(a0/*String*/) { 
            return CS.Call(4, 134, 29, false, this, a0); //Ret: Void
        },
        SendMessageUpwards$$String$$Object$$SendMessageOptions: function(a0/*String*/, a1/*Object*/, a2/*SendMessageOptions*/) { 
            return CS.Call(4, 134, 30, false, this, a0, a1, a2); //Ret: Void
        },
        SendMessageUpwards$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 134, 31, false, this, a0, a1); //Ret: Void
        },
        SendMessageUpwards$$String$$SendMessageOptions: function(a0/*String*/, a1/*SendMessageOptions*/) { 
            return CS.Call(4, 134, 32, false, this, a0, a1); //Ret: Void
        },
        SendMessageUpwards$$String: function(a0/*String*/) { 
            return CS.Call(4, 134, 33, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Component);

// UnityEngine.Light
var UnityEngine$Light = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Light",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    staticDefinition: {
        GetLights: function(a0/*LightType*/, a1/*Int32*/) { 
            return CS.Call(4, 135, 0, true, a0, a1); //Ret: Light[]
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 135, 0, true, this); },
        get_type: function() { return CS.Call(2, 135, 0, false, this); },
        set_type: function(v) { return CS.Call(3, 135, 0, false, this, v); },
        get_color: function() { return CS.Call(2, 135, 1, false, this); },
        set_color: function(v) { return CS.Call(3, 135, 1, false, this, v); },
        get_intensity: function() { return CS.Call(2, 135, 2, false, this); },
        set_intensity: function(v) { return CS.Call(3, 135, 2, false, this, v); },
        get_shadows: function() { return CS.Call(2, 135, 3, false, this); },
        set_shadows: function(v) { return CS.Call(3, 135, 3, false, this, v); },
        get_shadowStrength: function() { return CS.Call(2, 135, 4, false, this); },
        set_shadowStrength: function(v) { return CS.Call(3, 135, 4, false, this, v); },
        get_shadowBias: function() { return CS.Call(2, 135, 5, false, this); },
        set_shadowBias: function(v) { return CS.Call(3, 135, 5, false, this, v); },
        get_shadowSoftness: function() { return CS.Call(2, 135, 6, false, this); },
        set_shadowSoftness: function(v) { return CS.Call(3, 135, 6, false, this, v); },
        get_shadowSoftnessFade: function() { return CS.Call(2, 135, 7, false, this); },
        set_shadowSoftnessFade: function(v) { return CS.Call(3, 135, 7, false, this, v); },
        get_range: function() { return CS.Call(2, 135, 8, false, this); },
        set_range: function(v) { return CS.Call(3, 135, 8, false, this, v); },
        get_spotAngle: function() { return CS.Call(2, 135, 9, false, this); },
        set_spotAngle: function(v) { return CS.Call(3, 135, 9, false, this, v); },
        get_cookieSize: function() { return CS.Call(2, 135, 10, false, this); },
        set_cookieSize: function(v) { return CS.Call(3, 135, 10, false, this, v); },
        get_cookie: function() { return CS.Call(2, 135, 11, false, this); },
        set_cookie: function(v) { return CS.Call(3, 135, 11, false, this, v); },
        get_flare: function() { return CS.Call(2, 135, 12, false, this); },
        set_flare: function(v) { return CS.Call(3, 135, 12, false, this, v); },
        get_renderMode: function() { return CS.Call(2, 135, 13, false, this); },
        set_renderMode: function(v) { return CS.Call(3, 135, 13, false, this, v); },
        get_alreadyLightmapped: function() { return CS.Call(2, 135, 14, false, this); },
        set_alreadyLightmapped: function(v) { return CS.Call(3, 135, 14, false, this, v); },
        get_cullingMask: function() { return CS.Call(2, 135, 15, false, this); },
        set_cullingMask: function(v) { return CS.Call(3, 135, 15, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Light);

// UnityEngine.GameObject
var UnityEngine$GameObject = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.GameObject",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        CreatePrimitive: function(a0/*PrimitiveType*/) { 
            return CS.Call(4, 136, 40, true, a0); //Ret: GameObject
        },
        Find: function(a0/*String*/) { 
            return CS.Call(4, 136, 41, true, a0); //Ret: GameObject
        },
        FindGameObjectsWithTag: function(a0/*String*/) { 
            return CS.Call(4, 136, 42, true, a0); //Ret: GameObject[]
        },
        FindGameObjectWithTag: function(a0/*String*/) { 
            return CS.Call(4, 136, 43, true, a0); //Ret: GameObject
        },
        FindWithTag: function(a0/*String*/) { 
            return CS.Call(4, 136, 44, true, a0); //Ret: GameObject
        },
    },
    definition: {
        ctor$$String: function(a0) { CS.Call(5, 136, 0, true, this, a0); },
        ctor: function() { CS.Call(5, 136, 1, true, this); },
        ctor$$String$$Type$Array: function(a0, a1) { CS.Call(5, 136, 2, true, this, a0, jsb_convertTypeParamsArray(a1)); },
        get_isStatic: function() { return CS.Call(2, 136, 0, false, this); },
        set_isStatic: function(v) { return CS.Call(3, 136, 0, false, this, v); },
        get_transform: function() { return CS.Call(2, 136, 1, false, this); },
        set_transform: function(v) { return CS.Call(3, 136, 1, false, this, v); },
        get_rigidbody: function() { return CS.Call(2, 136, 2, false, this); },
        set_rigidbody: function(v) { return CS.Call(3, 136, 2, false, this, v); },
        get_rigidbody2D: function() { return CS.Call(2, 136, 3, false, this); },
        set_rigidbody2D: function(v) { return CS.Call(3, 136, 3, false, this, v); },
        get_camera: function() { return CS.Call(2, 136, 4, false, this); },
        set_camera: function(v) { return CS.Call(3, 136, 4, false, this, v); },
        get_light: function() { return CS.Call(2, 136, 5, false, this); },
        set_light: function(v) { return CS.Call(3, 136, 5, false, this, v); },
        get_animation: function() { return CS.Call(2, 136, 6, false, this); },
        set_animation: function(v) { return CS.Call(3, 136, 6, false, this, v); },
        get_constantForce: function() { return CS.Call(2, 136, 7, false, this); },
        set_constantForce: function(v) { return CS.Call(3, 136, 7, false, this, v); },
        get_renderer: function() { return CS.Call(2, 136, 8, false, this); },
        set_renderer: function(v) { return CS.Call(3, 136, 8, false, this, v); },
        get_audio: function() { return CS.Call(2, 136, 9, false, this); },
        set_audio: function(v) { return CS.Call(3, 136, 9, false, this, v); },
        get_guiText: function() { return CS.Call(2, 136, 10, false, this); },
        set_guiText: function(v) { return CS.Call(3, 136, 10, false, this, v); },
        get_guiTexture: function() { return CS.Call(2, 136, 11, false, this); },
        set_guiTexture: function(v) { return CS.Call(3, 136, 11, false, this, v); },
        get_collider: function() { return CS.Call(2, 136, 12, false, this); },
        set_collider: function(v) { return CS.Call(3, 136, 12, false, this, v); },
        get_collider2D: function() { return CS.Call(2, 136, 13, false, this); },
        set_collider2D: function(v) { return CS.Call(3, 136, 13, false, this, v); },
        get_hingeJoint: function() { return CS.Call(2, 136, 14, false, this); },
        set_hingeJoint: function(v) { return CS.Call(3, 136, 14, false, this, v); },
        get_particleEmitter: function() { return CS.Call(2, 136, 15, false, this); },
        set_particleEmitter: function(v) { return CS.Call(3, 136, 15, false, this, v); },
        get_particleSystem: function() { return CS.Call(2, 136, 16, false, this); },
        set_particleSystem: function(v) { return CS.Call(3, 136, 16, false, this, v); },
        get_layer: function() { return CS.Call(2, 136, 17, false, this); },
        set_layer: function(v) { return CS.Call(3, 136, 17, false, this, v); },
        get_activeSelf: function() { return CS.Call(2, 136, 18, false, this); },
        set_activeSelf: function(v) { return CS.Call(3, 136, 18, false, this, v); },
        get_activeInHierarchy: function() { return CS.Call(2, 136, 19, false, this); },
        set_activeInHierarchy: function(v) { return CS.Call(3, 136, 19, false, this, v); },
        get_tag: function() { return CS.Call(2, 136, 20, false, this); },
        set_tag: function(v) { return CS.Call(3, 136, 20, false, this, v); },
        get_gameObject: function() { return CS.Call(2, 136, 21, false, this); },
        set_gameObject: function(v) { return CS.Call(3, 136, 21, false, this, v); },
        AddComponent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 136, 0, false, this, a0.get_FullName()); //Ret: Component
        },
        AddComponent$$String: function(a0/*String*/) { 
            return CS.Call(4, 136, 1, false, this, a0); //Ret: Component
        },
        AddComponent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 136, 2, false, this, native_t0); //Ret: T
        },
        BroadcastMessage$$String$$Object$$SendMessageOptions: function(a0/*String*/, a1/*Object*/, a2/*SendMessageOptions*/) { 
            return CS.Call(4, 136, 3, false, this, a0, a1, a2); //Ret: Void
        },
        BroadcastMessage$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 136, 4, false, this, a0, a1); //Ret: Void
        },
        BroadcastMessage$$String$$SendMessageOptions: function(a0/*String*/, a1/*SendMessageOptions*/) { 
            return CS.Call(4, 136, 5, false, this, a0, a1); //Ret: Void
        },
        BroadcastMessage$$String: function(a0/*String*/) { 
            return CS.Call(4, 136, 6, false, this, a0); //Ret: Void
        },
        CompareTag: function(a0/*String*/) { 
            return CS.Call(4, 136, 7, false, this, a0); //Ret: Boolean
        },
        GetComponent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 136, 8, false, this, a0.get_FullName()); //Ret: Component
        },
        GetComponent$$String: function(a0/*String*/) { 
            return CS.Call(4, 136, 9, false, this, a0); //Ret: Component
        },
        GetComponent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 136, 10, false, this, native_t0); //Ret: T
        },
        GetComponentInChildren$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 136, 11, false, this, a0.get_FullName()); //Ret: Component
        },
        GetComponentInChildren$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 136, 12, false, this, native_t0); //Ret: T
        },
        GetComponentInParent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 136, 13, false, this, a0.get_FullName()); //Ret: Component
        },
        GetComponentInParent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 136, 14, false, this, native_t0); //Ret: T
        },
        GetComponents$$Type$$List$1$Component: function(a0/*Type*/, a1/*List`1*/) { 
            return CS.Call(4, 136, 15, false, this, a0.get_FullName(), a1); //Ret: Void
        },
        GetComponents$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 136, 16, false, this, a0.get_FullName()); //Ret: Component[]
        },
        GetComponents$1$$List$1: function(t0, a0/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 136, 17, false, this, native_t0, a0); //Ret: Void
        },
        GetComponents$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 136, 18, false, this, native_t0); //Ret: T[]
        },
        GetComponentsInChildren$$Type$$Boolean: function(a0/*Type*/, a1/*Boolean*/) { 
            return CS.Call(4, 136, 19, false, this, a0.get_FullName(), a1); //Ret: Component[]
        },
        GetComponentsInChildren$1$$Boolean$$List$1: function(t0, a0/*Boolean*/, a1/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 136, 20, false, this, native_t0, a0, a1); //Ret: Void
        },
        GetComponentsInChildren$1$$List$1: function(t0, a0/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 136, 21, false, this, native_t0, a0); //Ret: Void
        },
        GetComponentsInChildren$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 136, 22, false, this, a0.get_FullName()); //Ret: Component[]
        },
        GetComponentsInChildren$1$$Boolean: function(t0, a0/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 136, 23, false, this, native_t0, a0); //Ret: T[]
        },
        GetComponentsInChildren$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 136, 24, false, this, native_t0); //Ret: T[]
        },
        GetComponentsInParent$1$$Boolean$$List$1: function(t0, a0/*Boolean*/, a1/*List`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 136, 25, false, this, native_t0, a0, a1); //Ret: Void
        },
        GetComponentsInParent$$Type$$Boolean: function(a0/*Type*/, a1/*Boolean*/) { 
            return CS.Call(4, 136, 26, false, this, a0.get_FullName(), a1); //Ret: Component[]
        },
        GetComponentsInParent$1$$Boolean: function(t0, a0/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 136, 27, false, this, native_t0, a0); //Ret: T[]
        },
        GetComponentsInParent$$Type: function(a0/*Type*/) { 
            return CS.Call(4, 136, 28, false, this, a0.get_FullName()); //Ret: Component[]
        },
        GetComponentsInParent$1: function(t0) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 136, 29, false, this, native_t0); //Ret: T[]
        },
        SampleAnimation: function(a0/*AnimationClip*/, a1/*Single*/) { 
            return CS.Call(4, 136, 30, false, this, a0, a1); //Ret: Void
        },
        SendMessage$$String$$Object$$SendMessageOptions: function(a0/*String*/, a1/*Object*/, a2/*SendMessageOptions*/) { 
            return CS.Call(4, 136, 31, false, this, a0, a1, a2); //Ret: Void
        },
        SendMessage$$String$$SendMessageOptions: function(a0/*String*/, a1/*SendMessageOptions*/) { 
            return CS.Call(4, 136, 32, false, this, a0, a1); //Ret: Void
        },
        SendMessage$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 136, 33, false, this, a0, a1); //Ret: Void
        },
        SendMessage$$String: function(a0/*String*/) { 
            return CS.Call(4, 136, 34, false, this, a0); //Ret: Void
        },
        SendMessageUpwards$$String$$Object$$SendMessageOptions: function(a0/*String*/, a1/*Object*/, a2/*SendMessageOptions*/) { 
            return CS.Call(4, 136, 35, false, this, a0, a1, a2); //Ret: Void
        },
        SendMessageUpwards$$String$$Object: function(a0/*String*/, a1/*Object*/) { 
            return CS.Call(4, 136, 36, false, this, a0, a1); //Ret: Void
        },
        SendMessageUpwards$$String$$SendMessageOptions: function(a0/*String*/, a1/*SendMessageOptions*/) { 
            return CS.Call(4, 136, 37, false, this, a0, a1); //Ret: Void
        },
        SendMessageUpwards$$String: function(a0/*String*/) { 
            return CS.Call(4, 136, 38, false, this, a0); //Ret: Void
        },
        SetActive: function(a0/*Boolean*/) { 
            return CS.Call(4, 136, 39, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$GameObject);

// UnityEngine.Transform
var UnityEngine$Transform = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Transform",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    interfaceNames: ["System.Collections.IEnumerable"],
    definition: {
        get_position: function() { return CS.Call(2, 137, 0, false, this); },
        set_position: function(v) { return CS.Call(3, 137, 0, false, this, v); },
        get_localPosition: function() { return CS.Call(2, 137, 1, false, this); },
        set_localPosition: function(v) { return CS.Call(3, 137, 1, false, this, v); },
        get_eulerAngles: function() { return CS.Call(2, 137, 2, false, this); },
        set_eulerAngles: function(v) { return CS.Call(3, 137, 2, false, this, v); },
        get_localEulerAngles: function() { return CS.Call(2, 137, 3, false, this); },
        set_localEulerAngles: function(v) { return CS.Call(3, 137, 3, false, this, v); },
        get_right: function() { return CS.Call(2, 137, 4, false, this); },
        set_right: function(v) { return CS.Call(3, 137, 4, false, this, v); },
        get_up: function() { return CS.Call(2, 137, 5, false, this); },
        set_up: function(v) { return CS.Call(3, 137, 5, false, this, v); },
        get_forward: function() { return CS.Call(2, 137, 6, false, this); },
        set_forward: function(v) { return CS.Call(3, 137, 6, false, this, v); },
        get_rotation: function() { return CS.Call(2, 137, 7, false, this); },
        set_rotation: function(v) { return CS.Call(3, 137, 7, false, this, v); },
        get_localRotation: function() { return CS.Call(2, 137, 8, false, this); },
        set_localRotation: function(v) { return CS.Call(3, 137, 8, false, this, v); },
        get_localScale: function() { return CS.Call(2, 137, 9, false, this); },
        set_localScale: function(v) { return CS.Call(3, 137, 9, false, this, v); },
        get_parent: function() { return CS.Call(2, 137, 10, false, this); },
        set_parent: function(v) { return CS.Call(3, 137, 10, false, this, v); },
        get_worldToLocalMatrix: function() { return CS.Call(2, 137, 11, false, this); },
        set_worldToLocalMatrix: function(v) { return CS.Call(3, 137, 11, false, this, v); },
        get_localToWorldMatrix: function() { return CS.Call(2, 137, 12, false, this); },
        set_localToWorldMatrix: function(v) { return CS.Call(3, 137, 12, false, this, v); },
        get_root: function() { return CS.Call(2, 137, 13, false, this); },
        set_root: function(v) { return CS.Call(3, 137, 13, false, this, v); },
        get_childCount: function() { return CS.Call(2, 137, 14, false, this); },
        set_childCount: function(v) { return CS.Call(3, 137, 14, false, this, v); },
        get_lossyScale: function() { return CS.Call(2, 137, 15, false, this); },
        set_lossyScale: function(v) { return CS.Call(3, 137, 15, false, this, v); },
        get_hasChanged: function() { return CS.Call(2, 137, 16, false, this); },
        set_hasChanged: function(v) { return CS.Call(3, 137, 16, false, this, v); },
        DetachChildren: function() { 
            return CS.Call(4, 137, 0, false, this); //Ret: Void
        },
        Find: function(a0/*String*/) { 
            return CS.Call(4, 137, 1, false, this, a0); //Ret: Transform
        },
        FindChild: function(a0/*String*/) { 
            return CS.Call(4, 137, 2, false, this, a0); //Ret: Transform
        },
        GetChild: function(a0/*Int32*/) { 
            return CS.Call(4, 137, 3, false, this, a0); //Ret: Transform
        },
        GetEnumerator: function() { 
            return CS.Call(4, 137, 4, false, this); //Ret: IEnumerator
        },
        GetSiblingIndex: function() { 
            return CS.Call(4, 137, 5, false, this); //Ret: Int32
        },
        InverseTransformDirection$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 137, 6, false, this, a0, a1, a2); //Ret: Vector3
        },
        InverseTransformDirection$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 137, 7, false, this, a0); //Ret: Vector3
        },
        InverseTransformPoint$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 137, 8, false, this, a0, a1, a2); //Ret: Vector3
        },
        InverseTransformPoint$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 137, 9, false, this, a0); //Ret: Vector3
        },
        InverseTransformVector$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 137, 10, false, this, a0, a1, a2); //Ret: Vector3
        },
        InverseTransformVector$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 137, 11, false, this, a0); //Ret: Vector3
        },
        IsChildOf: function(a0/*Transform*/) { 
            return CS.Call(4, 137, 12, false, this, a0); //Ret: Boolean
        },
        LookAt$$Transform$$Vector3: function(a0/*Transform*/, a1/*Vector3*/) { 
            return CS.Call(4, 137, 13, false, this, a0, a1); //Ret: Void
        },
        LookAt$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 137, 14, false, this, a0, a1); //Ret: Void
        },
        LookAt$$Transform: function(a0/*Transform*/) { 
            return CS.Call(4, 137, 15, false, this, a0); //Ret: Void
        },
        LookAt$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 137, 16, false, this, a0); //Ret: Void
        },
        Rotate$$Single$$Single$$Single$$Space: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Space*/) { 
            return CS.Call(4, 137, 17, false, this, a0, a1, a2, a3); //Ret: Void
        },
        Rotate$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 137, 18, false, this, a0, a1, a2); //Ret: Void
        },
        Rotate$$Vector3$$Single$$Space: function(a0/*Vector3*/, a1/*Single*/, a2/*Space*/) { 
            return CS.Call(4, 137, 19, false, this, a0, a1, a2); //Ret: Void
        },
        Rotate$$Vector3$$Space: function(a0/*Vector3*/, a1/*Space*/) { 
            return CS.Call(4, 137, 20, false, this, a0, a1); //Ret: Void
        },
        Rotate$$Vector3$$Single: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 137, 21, false, this, a0, a1); //Ret: Void
        },
        Rotate$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 137, 22, false, this, a0); //Ret: Void
        },
        RotateAround$$Vector3$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 137, 23, false, this, a0, a1, a2); //Ret: Void
        },
        SetAsFirstSibling: function() { 
            return CS.Call(4, 137, 24, false, this); //Ret: Void
        },
        SetAsLastSibling: function() { 
            return CS.Call(4, 137, 25, false, this); //Ret: Void
        },
        SetParent$$Transform$$Boolean: function(a0/*Transform*/, a1/*Boolean*/) { 
            return CS.Call(4, 137, 26, false, this, a0, a1); //Ret: Void
        },
        SetParent$$Transform: function(a0/*Transform*/) { 
            return CS.Call(4, 137, 27, false, this, a0); //Ret: Void
        },
        SetSiblingIndex: function(a0/*Int32*/) { 
            return CS.Call(4, 137, 28, false, this, a0); //Ret: Void
        },
        TransformDirection$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 137, 29, false, this, a0, a1, a2); //Ret: Vector3
        },
        TransformDirection$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 137, 30, false, this, a0); //Ret: Vector3
        },
        TransformPoint$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 137, 31, false, this, a0, a1, a2); //Ret: Vector3
        },
        TransformPoint$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 137, 32, false, this, a0); //Ret: Vector3
        },
        TransformVector$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 137, 33, false, this, a0, a1, a2); //Ret: Vector3
        },
        TransformVector$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 137, 34, false, this, a0); //Ret: Vector3
        },
        Translate$$Single$$Single$$Single$$Space: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Space*/) { 
            return CS.Call(4, 137, 35, false, this, a0, a1, a2, a3); //Ret: Void
        },
        Translate$$Single$$Single$$Single$$Transform: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Transform*/) { 
            return CS.Call(4, 137, 36, false, this, a0, a1, a2, a3); //Ret: Void
        },
        Translate$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 137, 37, false, this, a0, a1, a2); //Ret: Void
        },
        Translate$$Vector3$$Space: function(a0/*Vector3*/, a1/*Space*/) { 
            return CS.Call(4, 137, 38, false, this, a0, a1); //Ret: Void
        },
        Translate$$Vector3$$Transform: function(a0/*Vector3*/, a1/*Transform*/) { 
            return CS.Call(4, 137, 39, false, this, a0, a1); //Ret: Void
        },
        Translate$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 137, 40, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Transform);

// UnityEngine.Time
var UnityEngine$Time = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Time",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_time: function() { return CS.Call(2, 138, 0, true); },
        set_time: function(v) { return CS.Call(3, 138, 0, true, v); },
        get_timeSinceLevelLoad: function() { return CS.Call(2, 138, 1, true); },
        set_timeSinceLevelLoad: function(v) { return CS.Call(3, 138, 1, true, v); },
        get_deltaTime: function() { return CS.Call(2, 138, 2, true); },
        set_deltaTime: function(v) { return CS.Call(3, 138, 2, true, v); },
        get_fixedTime: function() { return CS.Call(2, 138, 3, true); },
        set_fixedTime: function(v) { return CS.Call(3, 138, 3, true, v); },
        get_unscaledTime: function() { return CS.Call(2, 138, 4, true); },
        set_unscaledTime: function(v) { return CS.Call(3, 138, 4, true, v); },
        get_unscaledDeltaTime: function() { return CS.Call(2, 138, 5, true); },
        set_unscaledDeltaTime: function(v) { return CS.Call(3, 138, 5, true, v); },
        get_fixedDeltaTime: function() { return CS.Call(2, 138, 6, true); },
        set_fixedDeltaTime: function(v) { return CS.Call(3, 138, 6, true, v); },
        get_maximumDeltaTime: function() { return CS.Call(2, 138, 7, true); },
        set_maximumDeltaTime: function(v) { return CS.Call(3, 138, 7, true, v); },
        get_smoothDeltaTime: function() { return CS.Call(2, 138, 8, true); },
        set_smoothDeltaTime: function(v) { return CS.Call(3, 138, 8, true, v); },
        get_timeScale: function() { return CS.Call(2, 138, 9, true); },
        set_timeScale: function(v) { return CS.Call(3, 138, 9, true, v); },
        get_frameCount: function() { return CS.Call(2, 138, 10, true); },
        set_frameCount: function(v) { return CS.Call(3, 138, 10, true, v); },
        get_renderedFrameCount: function() { return CS.Call(2, 138, 11, true); },
        set_renderedFrameCount: function(v) { return CS.Call(3, 138, 11, true, v); },
        get_realtimeSinceStartup: function() { return CS.Call(2, 138, 12, true); },
        set_realtimeSinceStartup: function(v) { return CS.Call(3, 138, 12, true, v); },
        get_captureFramerate: function() { return CS.Call(2, 138, 13, true); },
        set_captureFramerate: function(v) { return CS.Call(3, 138, 13, true, v); },
    },
    definition: {
        ctor: function() { CS.Call(5, 138, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Time);

// UnityEngine.Random
var UnityEngine$Random = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Random",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_seed: function() { return CS.Call(2, 139, 0, true); },
        set_seed: function(v) { return CS.Call(3, 139, 0, true, v); },
        get_value: function() { return CS.Call(2, 139, 1, true); },
        set_value: function(v) { return CS.Call(3, 139, 1, true, v); },
        get_insideUnitSphere: function() { return CS.Call(2, 139, 2, true); },
        set_insideUnitSphere: function(v) { return CS.Call(3, 139, 2, true, v); },
        get_insideUnitCircle: function() { return CS.Call(2, 139, 3, true); },
        set_insideUnitCircle: function(v) { return CS.Call(3, 139, 3, true, v); },
        get_onUnitSphere: function() { return CS.Call(2, 139, 4, true); },
        set_onUnitSphere: function(v) { return CS.Call(3, 139, 4, true, v); },
        get_rotation: function() { return CS.Call(2, 139, 5, true); },
        set_rotation: function(v) { return CS.Call(3, 139, 5, true, v); },
        get_rotationUniform: function() { return CS.Call(2, 139, 6, true); },
        set_rotationUniform: function(v) { return CS.Call(3, 139, 6, true, v); },
        Range$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 139, 0, true, a0, a1); //Ret: Int32
        },
        Range$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 139, 1, true, a0, a1); //Ret: Single
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 139, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Random);

// UnityEngine.YieldInstruction
var UnityEngine$YieldInstruction = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.YieldInstruction",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 140, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$YieldInstruction);

// UnityEngine.PlayerPrefsException
var UnityEngine$PlayerPrefsException = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.PlayerPrefsException",
    Kind: "Class",
    baseTypeName: "System.Exception",
    interfaceNames: ["System.Runtime.Serialization.ISerializable", "System.Runtime.InteropServices._Exception"],
    definition: {
        ctor: function(a0) { CS.Call(5, 141, 0, true, this, a0); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$PlayerPrefsException);

// UnityEngine.PlayerPrefs
var UnityEngine$PlayerPrefs = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.PlayerPrefs",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        DeleteAll: function() { 
            return CS.Call(4, 142, 0, true); //Ret: Void
        },
        DeleteKey: function(a0/*String*/) { 
            return CS.Call(4, 142, 1, true, a0); //Ret: Void
        },
        GetFloat$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 142, 2, true, a0, a1); //Ret: Single
        },
        GetFloat$$String: function(a0/*String*/) { 
            return CS.Call(4, 142, 3, true, a0); //Ret: Single
        },
        GetInt$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 142, 4, true, a0, a1); //Ret: Int32
        },
        GetInt$$String: function(a0/*String*/) { 
            return CS.Call(4, 142, 5, true, a0); //Ret: Int32
        },
        GetString$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 142, 6, true, a0, a1); //Ret: String
        },
        GetString$$String: function(a0/*String*/) { 
            return CS.Call(4, 142, 7, true, a0); //Ret: String
        },
        HasKey: function(a0/*String*/) { 
            return CS.Call(4, 142, 8, true, a0); //Ret: Boolean
        },
        Save: function() { 
            return CS.Call(4, 142, 9, true); //Ret: Void
        },
        SetFloat: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 142, 10, true, a0, a1); //Ret: Void
        },
        SetInt: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 142, 11, true, a0, a1); //Ret: Void
        },
        SetString: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 142, 12, true, a0, a1); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 142, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$PlayerPrefs);

// UnityEngine.Motion
var UnityEngine$Motion = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Motion",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 143, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Motion);

// UnityEngine.Physics
var UnityEngine$Physics = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Physics",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        kIgnoreRaycastLayer: {
            get: function() { return CS.Call(0, 144, 0, true); }, 
            set: function(v) { return CS.Call(1, 144, 0, true, v); }
        },
        kDefaultRaycastLayers: {
            get: function() { return CS.Call(0, 144, 1, true); }, 
            set: function(v) { return CS.Call(1, 144, 1, true, v); }
        },
        kAllLayers: {
            get: function() { return CS.Call(0, 144, 2, true); }, 
            set: function(v) { return CS.Call(1, 144, 2, true, v); }
        },
        IgnoreRaycastLayer: {
            get: function() { return CS.Call(0, 144, 3, true); }, 
            set: function(v) { return CS.Call(1, 144, 3, true, v); }
        },
        DefaultRaycastLayers: {
            get: function() { return CS.Call(0, 144, 4, true); }, 
            set: function(v) { return CS.Call(1, 144, 4, true, v); }
        },
        AllLayers: {
            get: function() { return CS.Call(0, 144, 5, true); }, 
            set: function(v) { return CS.Call(1, 144, 5, true, v); }
        },
    },
    staticDefinition: {
        get_gravity: function() { return CS.Call(2, 144, 0, true); },
        set_gravity: function(v) { return CS.Call(3, 144, 0, true, v); },
        get_minPenetrationForPenalty: function() { return CS.Call(2, 144, 1, true); },
        set_minPenetrationForPenalty: function(v) { return CS.Call(3, 144, 1, true, v); },
        get_bounceThreshold: function() { return CS.Call(2, 144, 2, true); },
        set_bounceThreshold: function(v) { return CS.Call(3, 144, 2, true, v); },
        get_sleepVelocity: function() { return CS.Call(2, 144, 3, true); },
        set_sleepVelocity: function(v) { return CS.Call(3, 144, 3, true, v); },
        get_sleepAngularVelocity: function() { return CS.Call(2, 144, 4, true); },
        set_sleepAngularVelocity: function(v) { return CS.Call(3, 144, 4, true, v); },
        get_maxAngularVelocity: function() { return CS.Call(2, 144, 5, true); },
        set_maxAngularVelocity: function(v) { return CS.Call(3, 144, 5, true, v); },
        get_solverIterationCount: function() { return CS.Call(2, 144, 6, true); },
        set_solverIterationCount: function(v) { return CS.Call(3, 144, 6, true, v); },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3$$RaycastHit$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*RaycastHit&*/, a5/*Single*/, a6/*Int32*/) { 
            return CS.Call(4, 144, 0, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Boolean
        },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 144, 1, true, a0, a1, a2, a3, a4, a5); //Ret: Boolean
        },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3$$RaycastHit$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*RaycastHit&*/, a5/*Single*/) { 
            return CS.Call(4, 144, 2, true, a0, a1, a2, a3, a4, a5); //Ret: Boolean
        },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*Single*/) { 
            return CS.Call(4, 144, 3, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3$$RaycastHit: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*RaycastHit&*/) { 
            return CS.Call(4, 144, 4, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        CapsuleCast$$Vector3$$Vector3$$Single$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/) { 
            return CS.Call(4, 144, 5, true, a0, a1, a2, a3); //Ret: Boolean
        },
        CapsuleCastAll$$Vector3$$Vector3$$Single$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 144, 6, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit[]
        },
        CapsuleCastAll$$Vector3$$Vector3$$Single$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/, a4/*Single*/) { 
            return CS.Call(4, 144, 7, true, a0, a1, a2, a3, a4); //Ret: RaycastHit[]
        },
        CapsuleCastAll$$Vector3$$Vector3$$Single$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Vector3*/) { 
            return CS.Call(4, 144, 8, true, a0, a1, a2, a3); //Ret: RaycastHit[]
        },
        CheckCapsule$$Vector3$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 144, 9, true, a0, a1, a2, a3); //Ret: Boolean
        },
        CheckCapsule$$Vector3$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 144, 10, true, a0, a1, a2); //Ret: Boolean
        },
        CheckSphere$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 144, 11, true, a0, a1, a2); //Ret: Boolean
        },
        CheckSphere$$Vector3$$Single: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 144, 12, true, a0, a1); //Ret: Boolean
        },
        GetIgnoreLayerCollision: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 144, 13, true, a0, a1); //Ret: Boolean
        },
        IgnoreCollision$$Collider$$Collider$$Boolean: function(a0/*Collider*/, a1/*Collider*/, a2/*Boolean*/) { 
            return CS.Call(4, 144, 14, true, a0, a1, a2); //Ret: Void
        },
        IgnoreCollision$$Collider$$Collider: function(a0/*Collider*/, a1/*Collider*/) { 
            return CS.Call(4, 144, 15, true, a0, a1); //Ret: Void
        },
        IgnoreLayerCollision$$Int32$$Int32$$Boolean: function(a0/*Int32*/, a1/*Int32*/, a2/*Boolean*/) { 
            return CS.Call(4, 144, 16, true, a0, a1, a2); //Ret: Void
        },
        IgnoreLayerCollision$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 144, 17, true, a0, a1); //Ret: Void
        },
        Linecast$$Vector3$$Vector3$$RaycastHit$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit&*/, a3/*Int32*/) { 
            return CS.Call(4, 144, 18, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Linecast$$Vector3$$Vector3$$RaycastHit: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit&*/) { 
            return CS.Call(4, 144, 19, true, a0, a1, a2); //Ret: Boolean
        },
        Linecast$$Vector3$$Vector3$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Int32*/) { 
            return CS.Call(4, 144, 20, true, a0, a1, a2); //Ret: Boolean
        },
        Linecast$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 144, 21, true, a0, a1); //Ret: Boolean
        },
        OverlapSphere$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 144, 22, true, a0, a1, a2); //Ret: Collider[]
        },
        OverlapSphere$$Vector3$$Single: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 144, 23, true, a0, a1); //Ret: Collider[]
        },
        Raycast$$Vector3$$Vector3$$RaycastHit$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit&*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 144, 24, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        Raycast$$Vector3$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 144, 25, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Raycast$$Ray$$RaycastHit$$Single$$Int32: function(a0/*Ray*/, a1/*RaycastHit&*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 144, 26, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Raycast$$Vector3$$Vector3$$RaycastHit$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit&*/, a3/*Single*/) { 
            return CS.Call(4, 144, 27, true, a0, a1, a2, a3); //Ret: Boolean
        },
        Raycast$$Ray$$RaycastHit$$Single: function(a0/*Ray*/, a1/*RaycastHit&*/, a2/*Single*/) { 
            return CS.Call(4, 144, 28, true, a0, a1, a2); //Ret: Boolean
        },
        Raycast$$Ray$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 144, 29, true, a0, a1, a2); //Ret: Boolean
        },
        Raycast$$Vector3$$Vector3$$RaycastHit: function(a0/*Vector3*/, a1/*Vector3*/, a2/*RaycastHit&*/) { 
            return CS.Call(4, 144, 30, true, a0, a1, a2); //Ret: Boolean
        },
        Raycast$$Vector3$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 144, 31, true, a0, a1, a2); //Ret: Boolean
        },
        Raycast$$Ray$$RaycastHit: function(a0/*Ray*/, a1/*RaycastHit&*/) { 
            return CS.Call(4, 144, 32, true, a0, a1); //Ret: Boolean
        },
        Raycast$$Ray$$Single: function(a0/*Ray*/, a1/*Single*/) { 
            return CS.Call(4, 144, 33, true, a0, a1); //Ret: Boolean
        },
        Raycast$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 144, 34, true, a0, a1); //Ret: Boolean
        },
        Raycast$$Ray: function(a0/*Ray*/) { 
            return CS.Call(4, 144, 35, true, a0); //Ret: Boolean
        },
        RaycastAll$$Vector3$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 144, 36, true, a0, a1, a2, a3); //Ret: RaycastHit[]
        },
        RaycastAll$$Ray$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 144, 37, true, a0, a1, a2); //Ret: RaycastHit[]
        },
        RaycastAll$$Vector3$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 144, 38, true, a0, a1, a2); //Ret: RaycastHit[]
        },
        RaycastAll$$Ray$$Single: function(a0/*Ray*/, a1/*Single*/) { 
            return CS.Call(4, 144, 39, true, a0, a1); //Ret: RaycastHit[]
        },
        RaycastAll$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 144, 40, true, a0, a1); //Ret: RaycastHit[]
        },
        RaycastAll$$Ray: function(a0/*Ray*/) { 
            return CS.Call(4, 144, 41, true, a0); //Ret: RaycastHit[]
        },
        SphereCast$$Vector3$$Single$$Vector3$$RaycastHit$$Single$$Int32: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*RaycastHit&*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 144, 42, true, a0, a1, a2, a3, a4, a5); //Ret: Boolean
        },
        SphereCast$$Ray$$Single$$RaycastHit$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*RaycastHit&*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 144, 43, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        SphereCast$$Vector3$$Single$$Vector3$$RaycastHit$$Single: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*RaycastHit&*/, a4/*Single*/) { 
            return CS.Call(4, 144, 44, true, a0, a1, a2, a3, a4); //Ret: Boolean
        },
        SphereCast$$Ray$$Single$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 144, 45, true, a0, a1, a2, a3); //Ret: Boolean
        },
        SphereCast$$Ray$$Single$$RaycastHit$$Single: function(a0/*Ray*/, a1/*Single*/, a2/*RaycastHit&*/, a3/*Single*/) { 
            return CS.Call(4, 144, 46, true, a0, a1, a2, a3); //Ret: Boolean
        },
        SphereCast$$Vector3$$Single$$Vector3$$RaycastHit: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*RaycastHit&*/) { 
            return CS.Call(4, 144, 47, true, a0, a1, a2, a3); //Ret: Boolean
        },
        SphereCast$$Ray$$Single$$RaycastHit: function(a0/*Ray*/, a1/*Single*/, a2/*RaycastHit&*/) { 
            return CS.Call(4, 144, 48, true, a0, a1, a2); //Ret: Boolean
        },
        SphereCast$$Ray$$Single$$Single: function(a0/*Ray*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 144, 49, true, a0, a1, a2); //Ret: Boolean
        },
        SphereCast$$Ray$$Single: function(a0/*Ray*/, a1/*Single*/) { 
            return CS.Call(4, 144, 50, true, a0, a1); //Ret: Boolean
        },
        SphereCastAll$$Vector3$$Single$$Vector3$$Single$$Int32: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 144, 51, true, a0, a1, a2, a3, a4); //Ret: RaycastHit[]
        },
        SphereCastAll$$Vector3$$Single$$Vector3$$Single: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/, a3/*Single*/) { 
            return CS.Call(4, 144, 52, true, a0, a1, a2, a3); //Ret: RaycastHit[]
        },
        SphereCastAll$$Ray$$Single$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 144, 53, true, a0, a1, a2, a3); //Ret: RaycastHit[]
        },
        SphereCastAll$$Ray$$Single$$Single: function(a0/*Ray*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 144, 54, true, a0, a1, a2); //Ret: RaycastHit[]
        },
        SphereCastAll$$Vector3$$Single$$Vector3: function(a0/*Vector3*/, a1/*Single*/, a2/*Vector3*/) { 
            return CS.Call(4, 144, 55, true, a0, a1, a2); //Ret: RaycastHit[]
        },
        SphereCastAll$$Ray$$Single: function(a0/*Ray*/, a1/*Single*/) { 
            return CS.Call(4, 144, 56, true, a0, a1); //Ret: RaycastHit[]
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 144, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Physics);

// UnityEngine.Rigidbody
var UnityEngine$Rigidbody = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Rigidbody",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 145, 0, true, this); },
        get_velocity: function() { return CS.Call(2, 145, 0, false, this); },
        set_velocity: function(v) { return CS.Call(3, 145, 0, false, this, v); },
        get_angularVelocity: function() { return CS.Call(2, 145, 1, false, this); },
        set_angularVelocity: function(v) { return CS.Call(3, 145, 1, false, this, v); },
        get_drag: function() { return CS.Call(2, 145, 2, false, this); },
        set_drag: function(v) { return CS.Call(3, 145, 2, false, this, v); },
        get_angularDrag: function() { return CS.Call(2, 145, 3, false, this); },
        set_angularDrag: function(v) { return CS.Call(3, 145, 3, false, this, v); },
        get_mass: function() { return CS.Call(2, 145, 4, false, this); },
        set_mass: function(v) { return CS.Call(3, 145, 4, false, this, v); },
        get_useGravity: function() { return CS.Call(2, 145, 5, false, this); },
        set_useGravity: function(v) { return CS.Call(3, 145, 5, false, this, v); },
        get_isKinematic: function() { return CS.Call(2, 145, 6, false, this); },
        set_isKinematic: function(v) { return CS.Call(3, 145, 6, false, this, v); },
        get_freezeRotation: function() { return CS.Call(2, 145, 7, false, this); },
        set_freezeRotation: function(v) { return CS.Call(3, 145, 7, false, this, v); },
        get_constraints: function() { return CS.Call(2, 145, 8, false, this); },
        set_constraints: function(v) { return CS.Call(3, 145, 8, false, this, v); },
        get_collisionDetectionMode: function() { return CS.Call(2, 145, 9, false, this); },
        set_collisionDetectionMode: function(v) { return CS.Call(3, 145, 9, false, this, v); },
        get_centerOfMass: function() { return CS.Call(2, 145, 10, false, this); },
        set_centerOfMass: function(v) { return CS.Call(3, 145, 10, false, this, v); },
        get_worldCenterOfMass: function() { return CS.Call(2, 145, 11, false, this); },
        set_worldCenterOfMass: function(v) { return CS.Call(3, 145, 11, false, this, v); },
        get_inertiaTensorRotation: function() { return CS.Call(2, 145, 12, false, this); },
        set_inertiaTensorRotation: function(v) { return CS.Call(3, 145, 12, false, this, v); },
        get_inertiaTensor: function() { return CS.Call(2, 145, 13, false, this); },
        set_inertiaTensor: function(v) { return CS.Call(3, 145, 13, false, this, v); },
        get_detectCollisions: function() { return CS.Call(2, 145, 14, false, this); },
        set_detectCollisions: function(v) { return CS.Call(3, 145, 14, false, this, v); },
        get_useConeFriction: function() { return CS.Call(2, 145, 15, false, this); },
        set_useConeFriction: function(v) { return CS.Call(3, 145, 15, false, this, v); },
        get_position: function() { return CS.Call(2, 145, 16, false, this); },
        set_position: function(v) { return CS.Call(3, 145, 16, false, this, v); },
        get_rotation: function() { return CS.Call(2, 145, 17, false, this); },
        set_rotation: function(v) { return CS.Call(3, 145, 17, false, this, v); },
        get_interpolation: function() { return CS.Call(2, 145, 18, false, this); },
        set_interpolation: function(v) { return CS.Call(3, 145, 18, false, this, v); },
        get_solverIterationCount: function() { return CS.Call(2, 145, 19, false, this); },
        set_solverIterationCount: function(v) { return CS.Call(3, 145, 19, false, this, v); },
        get_sleepVelocity: function() { return CS.Call(2, 145, 20, false, this); },
        set_sleepVelocity: function(v) { return CS.Call(3, 145, 20, false, this, v); },
        get_sleepAngularVelocity: function() { return CS.Call(2, 145, 21, false, this); },
        set_sleepAngularVelocity: function(v) { return CS.Call(3, 145, 21, false, this, v); },
        get_maxAngularVelocity: function() { return CS.Call(2, 145, 22, false, this); },
        set_maxAngularVelocity: function(v) { return CS.Call(3, 145, 22, false, this, v); },
        AddExplosionForce$$Single$$Vector3$$Single$$Single$$ForceMode: function(a0/*Single*/, a1/*Vector3*/, a2/*Single*/, a3/*Single*/, a4/*ForceMode*/) { 
            return CS.Call(4, 145, 0, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        AddExplosionForce$$Single$$Vector3$$Single$$Single: function(a0/*Single*/, a1/*Vector3*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 145, 1, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddExplosionForce$$Single$$Vector3$$Single: function(a0/*Single*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 145, 2, false, this, a0, a1, a2); //Ret: Void
        },
        AddForce$$Single$$Single$$Single$$ForceMode: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*ForceMode*/) { 
            return CS.Call(4, 145, 3, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddForce$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 145, 4, false, this, a0, a1, a2); //Ret: Void
        },
        AddForce$$Vector3$$ForceMode: function(a0/*Vector3*/, a1/*ForceMode*/) { 
            return CS.Call(4, 145, 5, false, this, a0, a1); //Ret: Void
        },
        AddForce$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 145, 6, false, this, a0); //Ret: Void
        },
        AddForceAtPosition$$Vector3$$Vector3$$ForceMode: function(a0/*Vector3*/, a1/*Vector3*/, a2/*ForceMode*/) { 
            return CS.Call(4, 145, 7, false, this, a0, a1, a2); //Ret: Void
        },
        AddForceAtPosition$$Vector3$$Vector3: function(a0/*Vector3*/, a1/*Vector3*/) { 
            return CS.Call(4, 145, 8, false, this, a0, a1); //Ret: Void
        },
        AddRelativeForce$$Single$$Single$$Single$$ForceMode: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*ForceMode*/) { 
            return CS.Call(4, 145, 9, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddRelativeForce$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 145, 10, false, this, a0, a1, a2); //Ret: Void
        },
        AddRelativeForce$$Vector3$$ForceMode: function(a0/*Vector3*/, a1/*ForceMode*/) { 
            return CS.Call(4, 145, 11, false, this, a0, a1); //Ret: Void
        },
        AddRelativeForce$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 145, 12, false, this, a0); //Ret: Void
        },
        AddRelativeTorque$$Single$$Single$$Single$$ForceMode: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*ForceMode*/) { 
            return CS.Call(4, 145, 13, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddRelativeTorque$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 145, 14, false, this, a0, a1, a2); //Ret: Void
        },
        AddRelativeTorque$$Vector3$$ForceMode: function(a0/*Vector3*/, a1/*ForceMode*/) { 
            return CS.Call(4, 145, 15, false, this, a0, a1); //Ret: Void
        },
        AddRelativeTorque$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 145, 16, false, this, a0); //Ret: Void
        },
        AddTorque$$Single$$Single$$Single$$ForceMode: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*ForceMode*/) { 
            return CS.Call(4, 145, 17, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddTorque$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 145, 18, false, this, a0, a1, a2); //Ret: Void
        },
        AddTorque$$Vector3$$ForceMode: function(a0/*Vector3*/, a1/*ForceMode*/) { 
            return CS.Call(4, 145, 19, false, this, a0, a1); //Ret: Void
        },
        AddTorque$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 145, 20, false, this, a0); //Ret: Void
        },
        ClosestPointOnBounds: function(a0/*Vector3*/) { 
            return CS.Call(4, 145, 21, false, this, a0); //Ret: Vector3
        },
        GetPointVelocity: function(a0/*Vector3*/) { 
            return CS.Call(4, 145, 22, false, this, a0); //Ret: Vector3
        },
        GetRelativePointVelocity: function(a0/*Vector3*/) { 
            return CS.Call(4, 145, 23, false, this, a0); //Ret: Vector3
        },
        IsSleeping: function() { 
            return CS.Call(4, 145, 24, false, this); //Ret: Boolean
        },
        MovePosition: function(a0/*Vector3*/) { 
            return CS.Call(4, 145, 25, false, this, a0); //Ret: Void
        },
        MoveRotation: function(a0/*Quaternion*/) { 
            return CS.Call(4, 145, 26, false, this, a0); //Ret: Void
        },
        SetDensity: function(a0/*Single*/) { 
            return CS.Call(4, 145, 27, false, this, a0); //Ret: Void
        },
        Sleep: function() { 
            return CS.Call(4, 145, 28, false, this); //Ret: Void
        },
        SweepTest$$Vector3$$RaycastHit$$Single: function(a0/*Vector3*/, a1/*RaycastHit&*/, a2/*Single*/) { 
            return CS.Call(4, 145, 29, false, this, a0, a1, a2); //Ret: Boolean
        },
        SweepTest$$Vector3$$RaycastHit: function(a0/*Vector3*/, a1/*RaycastHit&*/) { 
            return CS.Call(4, 145, 30, false, this, a0, a1); //Ret: Boolean
        },
        SweepTestAll$$Vector3$$Single: function(a0/*Vector3*/, a1/*Single*/) { 
            return CS.Call(4, 145, 31, false, this, a0, a1); //Ret: RaycastHit[]
        },
        SweepTestAll$$Vector3: function(a0/*Vector3*/) { 
            return CS.Call(4, 145, 32, false, this, a0); //Ret: RaycastHit[]
        },
        WakeUp: function() { 
            return CS.Call(4, 145, 33, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Rigidbody);

// UnityEngine.JointMotor
var UnityEngine$JointMotor = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointMotor",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 146, 0, true, this); },
        get_targetVelocity: function() { return CS.Call(2, 146, 0, false, this); },
        set_targetVelocity: function(v) { return CS.Call(3, 146, 0, false, this, v); },
        get_force: function() { return CS.Call(2, 146, 1, false, this); },
        set_force: function(v) { return CS.Call(3, 146, 1, false, this, v); },
        get_freeSpin: function() { return CS.Call(2, 146, 2, false, this); },
        set_freeSpin: function(v) { return CS.Call(3, 146, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointMotor);

// UnityEngine.JointSpring
var UnityEngine$JointSpring = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointSpring",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        spring: {
            get: function() { return CS.Call(0, 147, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 147, 0, false, this, v); }
        },
        damper: {
            get: function() { return CS.Call(0, 147, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 147, 1, false, this, v); }
        },
        targetPosition: {
            get: function() { return CS.Call(0, 147, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 147, 2, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 147, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointSpring);

// UnityEngine.JointLimits
var UnityEngine$JointLimits = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointLimits",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 148, 0, true, this); },
        get_min: function() { return CS.Call(2, 148, 0, false, this); },
        set_min: function(v) { return CS.Call(3, 148, 0, false, this, v); },
        get_minBounce: function() { return CS.Call(2, 148, 1, false, this); },
        set_minBounce: function(v) { return CS.Call(3, 148, 1, false, this, v); },
        get_max: function() { return CS.Call(2, 148, 2, false, this); },
        set_max: function(v) { return CS.Call(3, 148, 2, false, this, v); },
        get_maxBounce: function() { return CS.Call(2, 148, 3, false, this); },
        set_maxBounce: function(v) { return CS.Call(3, 148, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointLimits);

// UnityEngine.Joint
var UnityEngine$Joint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Joint",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 149, 0, true, this); },
        get_connectedBody: function() { return CS.Call(2, 149, 0, false, this); },
        set_connectedBody: function(v) { return CS.Call(3, 149, 0, false, this, v); },
        get_axis: function() { return CS.Call(2, 149, 1, false, this); },
        set_axis: function(v) { return CS.Call(3, 149, 1, false, this, v); },
        get_anchor: function() { return CS.Call(2, 149, 2, false, this); },
        set_anchor: function(v) { return CS.Call(3, 149, 2, false, this, v); },
        get_connectedAnchor: function() { return CS.Call(2, 149, 3, false, this); },
        set_connectedAnchor: function(v) { return CS.Call(3, 149, 3, false, this, v); },
        get_autoConfigureConnectedAnchor: function() { return CS.Call(2, 149, 4, false, this); },
        set_autoConfigureConnectedAnchor: function(v) { return CS.Call(3, 149, 4, false, this, v); },
        get_breakForce: function() { return CS.Call(2, 149, 5, false, this); },
        set_breakForce: function(v) { return CS.Call(3, 149, 5, false, this, v); },
        get_breakTorque: function() { return CS.Call(2, 149, 6, false, this); },
        set_breakTorque: function(v) { return CS.Call(3, 149, 6, false, this, v); },
        get_enableCollision: function() { return CS.Call(2, 149, 7, false, this); },
        set_enableCollision: function(v) { return CS.Call(3, 149, 7, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Joint);

// UnityEngine.HingeJoint
var UnityEngine$HingeJoint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HingeJoint",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint",
    definition: {
        ctor: function() { CS.Call(5, 150, 0, true, this); },
        get_motor: function() { return CS.Call(2, 150, 0, false, this); },
        set_motor: function(v) { return CS.Call(3, 150, 0, false, this, v); },
        get_limits: function() { return CS.Call(2, 150, 1, false, this); },
        set_limits: function(v) { return CS.Call(3, 150, 1, false, this, v); },
        get_spring: function() { return CS.Call(2, 150, 2, false, this); },
        set_spring: function(v) { return CS.Call(3, 150, 2, false, this, v); },
        get_useMotor: function() { return CS.Call(2, 150, 3, false, this); },
        set_useMotor: function(v) { return CS.Call(3, 150, 3, false, this, v); },
        get_useLimits: function() { return CS.Call(2, 150, 4, false, this); },
        set_useLimits: function(v) { return CS.Call(3, 150, 4, false, this, v); },
        get_useSpring: function() { return CS.Call(2, 150, 5, false, this); },
        set_useSpring: function(v) { return CS.Call(3, 150, 5, false, this, v); },
        get_velocity: function() { return CS.Call(2, 150, 6, false, this); },
        set_velocity: function(v) { return CS.Call(3, 150, 6, false, this, v); },
        get_angle: function() { return CS.Call(2, 150, 7, false, this); },
        set_angle: function(v) { return CS.Call(3, 150, 7, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HingeJoint);

// UnityEngine.SpringJoint
var UnityEngine$SpringJoint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SpringJoint",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint",
    definition: {
        ctor: function() { CS.Call(5, 151, 0, true, this); },
        get_spring: function() { return CS.Call(2, 151, 0, false, this); },
        set_spring: function(v) { return CS.Call(3, 151, 0, false, this, v); },
        get_damper: function() { return CS.Call(2, 151, 1, false, this); },
        set_damper: function(v) { return CS.Call(3, 151, 1, false, this, v); },
        get_minDistance: function() { return CS.Call(2, 151, 2, false, this); },
        set_minDistance: function(v) { return CS.Call(3, 151, 2, false, this, v); },
        get_maxDistance: function() { return CS.Call(2, 151, 3, false, this); },
        set_maxDistance: function(v) { return CS.Call(3, 151, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SpringJoint);

// UnityEngine.FixedJoint
var UnityEngine$FixedJoint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.FixedJoint",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint",
    definition: {
        ctor: function() { CS.Call(5, 152, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$FixedJoint);

// UnityEngine.SoftJointLimit
var UnityEngine$SoftJointLimit = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SoftJointLimit",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 153, 0, true, this); },
        get_limit: function() { return CS.Call(2, 153, 0, false, this); },
        set_limit: function(v) { return CS.Call(3, 153, 0, false, this, v); },
        get_spring: function() { return CS.Call(2, 153, 1, false, this); },
        set_spring: function(v) { return CS.Call(3, 153, 1, false, this, v); },
        get_damper: function() { return CS.Call(2, 153, 2, false, this); },
        set_damper: function(v) { return CS.Call(3, 153, 2, false, this, v); },
        get_bounciness: function() { return CS.Call(2, 153, 3, false, this); },
        set_bounciness: function(v) { return CS.Call(3, 153, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SoftJointLimit);

// UnityEngine.JointDrive
var UnityEngine$JointDrive = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointDrive",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 154, 0, true, this); },
        get_mode: function() { return CS.Call(2, 154, 0, false, this); },
        set_mode: function(v) { return CS.Call(3, 154, 0, false, this, v); },
        get_positionSpring: function() { return CS.Call(2, 154, 1, false, this); },
        set_positionSpring: function(v) { return CS.Call(3, 154, 1, false, this, v); },
        get_positionDamper: function() { return CS.Call(2, 154, 2, false, this); },
        set_positionDamper: function(v) { return CS.Call(3, 154, 2, false, this, v); },
        get_maximumForce: function() { return CS.Call(2, 154, 3, false, this); },
        set_maximumForce: function(v) { return CS.Call(3, 154, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointDrive);

// UnityEngine.CharacterJoint
var UnityEngine$CharacterJoint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CharacterJoint",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint",
    definition: {
        ctor: function() { CS.Call(5, 155, 0, true, this); },
        get_swingAxis: function() { return CS.Call(2, 155, 0, false, this); },
        set_swingAxis: function(v) { return CS.Call(3, 155, 0, false, this, v); },
        get_lowTwistLimit: function() { return CS.Call(2, 155, 1, false, this); },
        set_lowTwistLimit: function(v) { return CS.Call(3, 155, 1, false, this, v); },
        get_highTwistLimit: function() { return CS.Call(2, 155, 2, false, this); },
        set_highTwistLimit: function(v) { return CS.Call(3, 155, 2, false, this, v); },
        get_swing1Limit: function() { return CS.Call(2, 155, 3, false, this); },
        set_swing1Limit: function(v) { return CS.Call(3, 155, 3, false, this, v); },
        get_swing2Limit: function() { return CS.Call(2, 155, 4, false, this); },
        set_swing2Limit: function(v) { return CS.Call(3, 155, 4, false, this, v); },
        get_targetRotation: function() { return CS.Call(2, 155, 5, false, this); },
        set_targetRotation: function(v) { return CS.Call(3, 155, 5, false, this, v); },
        get_targetAngularVelocity: function() { return CS.Call(2, 155, 6, false, this); },
        set_targetAngularVelocity: function(v) { return CS.Call(3, 155, 6, false, this, v); },
        get_rotationDrive: function() { return CS.Call(2, 155, 7, false, this); },
        set_rotationDrive: function(v) { return CS.Call(3, 155, 7, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CharacterJoint);

// UnityEngine.ConfigurableJoint
var UnityEngine$ConfigurableJoint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ConfigurableJoint",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint",
    definition: {
        ctor: function() { CS.Call(5, 156, 0, true, this); },
        get_secondaryAxis: function() { return CS.Call(2, 156, 0, false, this); },
        set_secondaryAxis: function(v) { return CS.Call(3, 156, 0, false, this, v); },
        get_xMotion: function() { return CS.Call(2, 156, 1, false, this); },
        set_xMotion: function(v) { return CS.Call(3, 156, 1, false, this, v); },
        get_yMotion: function() { return CS.Call(2, 156, 2, false, this); },
        set_yMotion: function(v) { return CS.Call(3, 156, 2, false, this, v); },
        get_zMotion: function() { return CS.Call(2, 156, 3, false, this); },
        set_zMotion: function(v) { return CS.Call(3, 156, 3, false, this, v); },
        get_angularXMotion: function() { return CS.Call(2, 156, 4, false, this); },
        set_angularXMotion: function(v) { return CS.Call(3, 156, 4, false, this, v); },
        get_angularYMotion: function() { return CS.Call(2, 156, 5, false, this); },
        set_angularYMotion: function(v) { return CS.Call(3, 156, 5, false, this, v); },
        get_angularZMotion: function() { return CS.Call(2, 156, 6, false, this); },
        set_angularZMotion: function(v) { return CS.Call(3, 156, 6, false, this, v); },
        get_linearLimit: function() { return CS.Call(2, 156, 7, false, this); },
        set_linearLimit: function(v) { return CS.Call(3, 156, 7, false, this, v); },
        get_lowAngularXLimit: function() { return CS.Call(2, 156, 8, false, this); },
        set_lowAngularXLimit: function(v) { return CS.Call(3, 156, 8, false, this, v); },
        get_highAngularXLimit: function() { return CS.Call(2, 156, 9, false, this); },
        set_highAngularXLimit: function(v) { return CS.Call(3, 156, 9, false, this, v); },
        get_angularYLimit: function() { return CS.Call(2, 156, 10, false, this); },
        set_angularYLimit: function(v) { return CS.Call(3, 156, 10, false, this, v); },
        get_angularZLimit: function() { return CS.Call(2, 156, 11, false, this); },
        set_angularZLimit: function(v) { return CS.Call(3, 156, 11, false, this, v); },
        get_targetPosition: function() { return CS.Call(2, 156, 12, false, this); },
        set_targetPosition: function(v) { return CS.Call(3, 156, 12, false, this, v); },
        get_targetVelocity: function() { return CS.Call(2, 156, 13, false, this); },
        set_targetVelocity: function(v) { return CS.Call(3, 156, 13, false, this, v); },
        get_xDrive: function() { return CS.Call(2, 156, 14, false, this); },
        set_xDrive: function(v) { return CS.Call(3, 156, 14, false, this, v); },
        get_yDrive: function() { return CS.Call(2, 156, 15, false, this); },
        set_yDrive: function(v) { return CS.Call(3, 156, 15, false, this, v); },
        get_zDrive: function() { return CS.Call(2, 156, 16, false, this); },
        set_zDrive: function(v) { return CS.Call(3, 156, 16, false, this, v); },
        get_targetRotation: function() { return CS.Call(2, 156, 17, false, this); },
        set_targetRotation: function(v) { return CS.Call(3, 156, 17, false, this, v); },
        get_targetAngularVelocity: function() { return CS.Call(2, 156, 18, false, this); },
        set_targetAngularVelocity: function(v) { return CS.Call(3, 156, 18, false, this, v); },
        get_rotationDriveMode: function() { return CS.Call(2, 156, 19, false, this); },
        set_rotationDriveMode: function(v) { return CS.Call(3, 156, 19, false, this, v); },
        get_angularXDrive: function() { return CS.Call(2, 156, 20, false, this); },
        set_angularXDrive: function(v) { return CS.Call(3, 156, 20, false, this, v); },
        get_angularYZDrive: function() { return CS.Call(2, 156, 21, false, this); },
        set_angularYZDrive: function(v) { return CS.Call(3, 156, 21, false, this, v); },
        get_slerpDrive: function() { return CS.Call(2, 156, 22, false, this); },
        set_slerpDrive: function(v) { return CS.Call(3, 156, 22, false, this, v); },
        get_projectionMode: function() { return CS.Call(2, 156, 23, false, this); },
        set_projectionMode: function(v) { return CS.Call(3, 156, 23, false, this, v); },
        get_projectionDistance: function() { return CS.Call(2, 156, 24, false, this); },
        set_projectionDistance: function(v) { return CS.Call(3, 156, 24, false, this, v); },
        get_projectionAngle: function() { return CS.Call(2, 156, 25, false, this); },
        set_projectionAngle: function(v) { return CS.Call(3, 156, 25, false, this, v); },
        get_configuredInWorldSpace: function() { return CS.Call(2, 156, 26, false, this); },
        set_configuredInWorldSpace: function(v) { return CS.Call(3, 156, 26, false, this, v); },
        get_swapBodies: function() { return CS.Call(2, 156, 27, false, this); },
        set_swapBodies: function(v) { return CS.Call(3, 156, 27, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ConfigurableJoint);

// UnityEngine.ConstantForce
var UnityEngine$ConstantForce = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ConstantForce",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 157, 0, true, this); },
        get_force: function() { return CS.Call(2, 157, 0, false, this); },
        set_force: function(v) { return CS.Call(3, 157, 0, false, this, v); },
        get_relativeForce: function() { return CS.Call(2, 157, 1, false, this); },
        set_relativeForce: function(v) { return CS.Call(3, 157, 1, false, this, v); },
        get_torque: function() { return CS.Call(2, 157, 2, false, this); },
        set_torque: function(v) { return CS.Call(3, 157, 2, false, this, v); },
        get_relativeTorque: function() { return CS.Call(2, 157, 3, false, this); },
        set_relativeTorque: function(v) { return CS.Call(3, 157, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ConstantForce);

// UnityEngine.Collider
var UnityEngine$Collider = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Collider",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 158, 0, true, this); },
        get_enabled: function() { return CS.Call(2, 158, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 158, 0, false, this, v); },
        get_attachedRigidbody: function() { return CS.Call(2, 158, 1, false, this); },
        set_attachedRigidbody: function(v) { return CS.Call(3, 158, 1, false, this, v); },
        get_isTrigger: function() { return CS.Call(2, 158, 2, false, this); },
        set_isTrigger: function(v) { return CS.Call(3, 158, 2, false, this, v); },
        get_material: function() { return CS.Call(2, 158, 3, false, this); },
        set_material: function(v) { return CS.Call(3, 158, 3, false, this, v); },
        get_sharedMaterial: function() { return CS.Call(2, 158, 4, false, this); },
        set_sharedMaterial: function(v) { return CS.Call(3, 158, 4, false, this, v); },
        get_bounds: function() { return CS.Call(2, 158, 5, false, this); },
        set_bounds: function(v) { return CS.Call(3, 158, 5, false, this, v); },
        ClosestPointOnBounds: function(a0/*Vector3*/) { 
            return CS.Call(4, 158, 0, false, this, a0); //Ret: Vector3
        },
        Raycast: function(a0/*Ray*/, a1/*RaycastHit&*/, a2/*Single*/) { 
            return CS.Call(4, 158, 1, false, this, a0, a1, a2); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Collider);

// UnityEngine.BoxCollider
var UnityEngine$BoxCollider = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.BoxCollider",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider",
    definition: {
        ctor: function() { CS.Call(5, 159, 0, true, this); },
        get_center: function() { return CS.Call(2, 159, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 159, 0, false, this, v); },
        get_size: function() { return CS.Call(2, 159, 1, false, this); },
        set_size: function(v) { return CS.Call(3, 159, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$BoxCollider);

// UnityEngine.SphereCollider
var UnityEngine$SphereCollider = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SphereCollider",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider",
    definition: {
        ctor: function() { CS.Call(5, 160, 0, true, this); },
        get_center: function() { return CS.Call(2, 160, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 160, 0, false, this, v); },
        get_radius: function() { return CS.Call(2, 160, 1, false, this); },
        set_radius: function(v) { return CS.Call(3, 160, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SphereCollider);

// UnityEngine.MeshCollider
var UnityEngine$MeshCollider = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MeshCollider",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider",
    definition: {
        ctor: function() { CS.Call(5, 161, 0, true, this); },
        get_sharedMesh: function() { return CS.Call(2, 161, 0, false, this); },
        set_sharedMesh: function(v) { return CS.Call(3, 161, 0, false, this, v); },
        get_convex: function() { return CS.Call(2, 161, 1, false, this); },
        set_convex: function(v) { return CS.Call(3, 161, 1, false, this, v); },
        get_smoothSphereCollisions: function() { return CS.Call(2, 161, 2, false, this); },
        set_smoothSphereCollisions: function(v) { return CS.Call(3, 161, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MeshCollider);

// UnityEngine.CapsuleCollider
var UnityEngine$CapsuleCollider = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CapsuleCollider",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider",
    definition: {
        ctor: function() { CS.Call(5, 162, 0, true, this); },
        get_center: function() { return CS.Call(2, 162, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 162, 0, false, this, v); },
        get_radius: function() { return CS.Call(2, 162, 1, false, this); },
        set_radius: function(v) { return CS.Call(3, 162, 1, false, this, v); },
        get_height: function() { return CS.Call(2, 162, 2, false, this); },
        set_height: function(v) { return CS.Call(3, 162, 2, false, this, v); },
        get_direction: function() { return CS.Call(2, 162, 3, false, this); },
        set_direction: function(v) { return CS.Call(3, 162, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CapsuleCollider);

// UnityEngine.WheelFrictionCurve
var UnityEngine$WheelFrictionCurve = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WheelFrictionCurve",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 163, 0, true, this); },
        get_extremumSlip: function() { return CS.Call(2, 163, 0, false, this); },
        set_extremumSlip: function(v) { return CS.Call(3, 163, 0, false, this, v); },
        get_extremumValue: function() { return CS.Call(2, 163, 1, false, this); },
        set_extremumValue: function(v) { return CS.Call(3, 163, 1, false, this, v); },
        get_asymptoteSlip: function() { return CS.Call(2, 163, 2, false, this); },
        set_asymptoteSlip: function(v) { return CS.Call(3, 163, 2, false, this, v); },
        get_asymptoteValue: function() { return CS.Call(2, 163, 3, false, this); },
        set_asymptoteValue: function(v) { return CS.Call(3, 163, 3, false, this, v); },
        get_stiffness: function() { return CS.Call(2, 163, 4, false, this); },
        set_stiffness: function(v) { return CS.Call(3, 163, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WheelFrictionCurve);

// UnityEngine.WheelHit
var UnityEngine$WheelHit = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WheelHit",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 164, 0, true, this); },
        get_collider: function() { return CS.Call(2, 164, 0, false, this); },
        set_collider: function(v) { return CS.Call(3, 164, 0, false, this, v); },
        get_point: function() { return CS.Call(2, 164, 1, false, this); },
        set_point: function(v) { return CS.Call(3, 164, 1, false, this, v); },
        get_normal: function() { return CS.Call(2, 164, 2, false, this); },
        set_normal: function(v) { return CS.Call(3, 164, 2, false, this, v); },
        get_forwardDir: function() { return CS.Call(2, 164, 3, false, this); },
        set_forwardDir: function(v) { return CS.Call(3, 164, 3, false, this, v); },
        get_sidewaysDir: function() { return CS.Call(2, 164, 4, false, this); },
        set_sidewaysDir: function(v) { return CS.Call(3, 164, 4, false, this, v); },
        get_force: function() { return CS.Call(2, 164, 5, false, this); },
        set_force: function(v) { return CS.Call(3, 164, 5, false, this, v); },
        get_forwardSlip: function() { return CS.Call(2, 164, 6, false, this); },
        set_forwardSlip: function(v) { return CS.Call(3, 164, 6, false, this, v); },
        get_sidewaysSlip: function() { return CS.Call(2, 164, 7, false, this); },
        set_sidewaysSlip: function(v) { return CS.Call(3, 164, 7, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WheelHit);

// UnityEngine.WheelCollider
var UnityEngine$WheelCollider = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WheelCollider",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider",
    definition: {
        ctor: function() { CS.Call(5, 165, 0, true, this); },
        get_center: function() { return CS.Call(2, 165, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 165, 0, false, this, v); },
        get_radius: function() { return CS.Call(2, 165, 1, false, this); },
        set_radius: function(v) { return CS.Call(3, 165, 1, false, this, v); },
        get_suspensionDistance: function() { return CS.Call(2, 165, 2, false, this); },
        set_suspensionDistance: function(v) { return CS.Call(3, 165, 2, false, this, v); },
        get_suspensionSpring: function() { return CS.Call(2, 165, 3, false, this); },
        set_suspensionSpring: function(v) { return CS.Call(3, 165, 3, false, this, v); },
        get_mass: function() { return CS.Call(2, 165, 4, false, this); },
        set_mass: function(v) { return CS.Call(3, 165, 4, false, this, v); },
        get_forwardFriction: function() { return CS.Call(2, 165, 5, false, this); },
        set_forwardFriction: function(v) { return CS.Call(3, 165, 5, false, this, v); },
        get_sidewaysFriction: function() { return CS.Call(2, 165, 6, false, this); },
        set_sidewaysFriction: function(v) { return CS.Call(3, 165, 6, false, this, v); },
        get_motorTorque: function() { return CS.Call(2, 165, 7, false, this); },
        set_motorTorque: function(v) { return CS.Call(3, 165, 7, false, this, v); },
        get_brakeTorque: function() { return CS.Call(2, 165, 8, false, this); },
        set_brakeTorque: function(v) { return CS.Call(3, 165, 8, false, this, v); },
        get_steerAngle: function() { return CS.Call(2, 165, 9, false, this); },
        set_steerAngle: function(v) { return CS.Call(3, 165, 9, false, this, v); },
        get_isGrounded: function() { return CS.Call(2, 165, 10, false, this); },
        set_isGrounded: function(v) { return CS.Call(3, 165, 10, false, this, v); },
        get_rpm: function() { return CS.Call(2, 165, 11, false, this); },
        set_rpm: function(v) { return CS.Call(3, 165, 11, false, this, v); },
        GetGroundHit: function(a0/*WheelHit&*/) { 
            return CS.Call(4, 165, 0, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WheelCollider);

// UnityEngine.RaycastHit
var UnityEngine$RaycastHit = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RaycastHit",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 166, 0, true, this); },
        get_point: function() { return CS.Call(2, 166, 0, false, this); },
        set_point: function(v) { return CS.Call(3, 166, 0, false, this, v); },
        get_normal: function() { return CS.Call(2, 166, 1, false, this); },
        set_normal: function(v) { return CS.Call(3, 166, 1, false, this, v); },
        get_barycentricCoordinate: function() { return CS.Call(2, 166, 2, false, this); },
        set_barycentricCoordinate: function(v) { return CS.Call(3, 166, 2, false, this, v); },
        get_distance: function() { return CS.Call(2, 166, 3, false, this); },
        set_distance: function(v) { return CS.Call(3, 166, 3, false, this, v); },
        get_triangleIndex: function() { return CS.Call(2, 166, 4, false, this); },
        set_triangleIndex: function(v) { return CS.Call(3, 166, 4, false, this, v); },
        get_textureCoord: function() { return CS.Call(2, 166, 5, false, this); },
        set_textureCoord: function(v) { return CS.Call(3, 166, 5, false, this, v); },
        get_textureCoord2: function() { return CS.Call(2, 166, 6, false, this); },
        set_textureCoord2: function(v) { return CS.Call(3, 166, 6, false, this, v); },
        get_lightmapCoord: function() { return CS.Call(2, 166, 7, false, this); },
        set_lightmapCoord: function(v) { return CS.Call(3, 166, 7, false, this, v); },
        get_collider: function() { return CS.Call(2, 166, 8, false, this); },
        set_collider: function(v) { return CS.Call(3, 166, 8, false, this, v); },
        get_rigidbody: function() { return CS.Call(2, 166, 9, false, this); },
        set_rigidbody: function(v) { return CS.Call(3, 166, 9, false, this, v); },
        get_transform: function() { return CS.Call(2, 166, 10, false, this); },
        set_transform: function(v) { return CS.Call(3, 166, 10, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RaycastHit);

// UnityEngine.PhysicMaterial
var UnityEngine$PhysicMaterial = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.PhysicMaterial",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 167, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 167, 1, true, this, a0); },
        get_dynamicFriction: function() { return CS.Call(2, 167, 0, false, this); },
        set_dynamicFriction: function(v) { return CS.Call(3, 167, 0, false, this, v); },
        get_staticFriction: function() { return CS.Call(2, 167, 1, false, this); },
        set_staticFriction: function(v) { return CS.Call(3, 167, 1, false, this, v); },
        get_bounciness: function() { return CS.Call(2, 167, 2, false, this); },
        set_bounciness: function(v) { return CS.Call(3, 167, 2, false, this, v); },
        get_frictionDirection2: function() { return CS.Call(2, 167, 3, false, this); },
        set_frictionDirection2: function(v) { return CS.Call(3, 167, 3, false, this, v); },
        get_dynamicFriction2: function() { return CS.Call(2, 167, 4, false, this); },
        set_dynamicFriction2: function(v) { return CS.Call(3, 167, 4, false, this, v); },
        get_staticFriction2: function() { return CS.Call(2, 167, 5, false, this); },
        set_staticFriction2: function(v) { return CS.Call(3, 167, 5, false, this, v); },
        get_frictionCombine: function() { return CS.Call(2, 167, 6, false, this); },
        set_frictionCombine: function(v) { return CS.Call(3, 167, 6, false, this, v); },
        get_bounceCombine: function() { return CS.Call(2, 167, 7, false, this); },
        set_bounceCombine: function(v) { return CS.Call(3, 167, 7, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$PhysicMaterial);

// UnityEngine.ContactPoint
var UnityEngine$ContactPoint = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ContactPoint",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 168, 0, true, this); },
        get_point: function() { return CS.Call(2, 168, 0, false, this); },
        set_point: function(v) { return CS.Call(3, 168, 0, false, this, v); },
        get_normal: function() { return CS.Call(2, 168, 1, false, this); },
        set_normal: function(v) { return CS.Call(3, 168, 1, false, this, v); },
        get_thisCollider: function() { return CS.Call(2, 168, 2, false, this); },
        set_thisCollider: function(v) { return CS.Call(3, 168, 2, false, this, v); },
        get_otherCollider: function() { return CS.Call(2, 168, 3, false, this); },
        set_otherCollider: function(v) { return CS.Call(3, 168, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ContactPoint);

// UnityEngine.Collision
var UnityEngine$Collision = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Collision",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 169, 0, true, this); },
        get_relativeVelocity: function() { return CS.Call(2, 169, 0, false, this); },
        set_relativeVelocity: function(v) { return CS.Call(3, 169, 0, false, this, v); },
        get_rigidbody: function() { return CS.Call(2, 169, 1, false, this); },
        set_rigidbody: function(v) { return CS.Call(3, 169, 1, false, this, v); },
        get_collider: function() { return CS.Call(2, 169, 2, false, this); },
        set_collider: function(v) { return CS.Call(3, 169, 2, false, this, v); },
        get_transform: function() { return CS.Call(2, 169, 3, false, this); },
        set_transform: function(v) { return CS.Call(3, 169, 3, false, this, v); },
        get_gameObject: function() { return CS.Call(2, 169, 4, false, this); },
        set_gameObject: function(v) { return CS.Call(3, 169, 4, false, this, v); },
        get_contacts: function() { return CS.Call(2, 169, 5, false, this); },
        set_contacts: function(v) { return CS.Call(3, 169, 5, false, this, v); },
        GetEnumerator: function() { 
            return CS.Call(4, 169, 0, false, this); //Ret: IEnumerator
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Collision);

// UnityEngine.ControllerColliderHit
var UnityEngine$ControllerColliderHit = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ControllerColliderHit",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 170, 0, true, this); },
        get_controller: function() { return CS.Call(2, 170, 0, false, this); },
        set_controller: function(v) { return CS.Call(3, 170, 0, false, this, v); },
        get_collider: function() { return CS.Call(2, 170, 1, false, this); },
        set_collider: function(v) { return CS.Call(3, 170, 1, false, this, v); },
        get_rigidbody: function() { return CS.Call(2, 170, 2, false, this); },
        set_rigidbody: function(v) { return CS.Call(3, 170, 2, false, this, v); },
        get_gameObject: function() { return CS.Call(2, 170, 3, false, this); },
        set_gameObject: function(v) { return CS.Call(3, 170, 3, false, this, v); },
        get_transform: function() { return CS.Call(2, 170, 4, false, this); },
        set_transform: function(v) { return CS.Call(3, 170, 4, false, this, v); },
        get_point: function() { return CS.Call(2, 170, 5, false, this); },
        set_point: function(v) { return CS.Call(3, 170, 5, false, this, v); },
        get_normal: function() { return CS.Call(2, 170, 6, false, this); },
        set_normal: function(v) { return CS.Call(3, 170, 6, false, this, v); },
        get_moveDirection: function() { return CS.Call(2, 170, 7, false, this); },
        set_moveDirection: function(v) { return CS.Call(3, 170, 7, false, this, v); },
        get_moveLength: function() { return CS.Call(2, 170, 8, false, this); },
        set_moveLength: function(v) { return CS.Call(3, 170, 8, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ControllerColliderHit);

// UnityEngine.CharacterController
var UnityEngine$CharacterController = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CharacterController",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider",
    definition: {
        ctor: function() { CS.Call(5, 171, 0, true, this); },
        get_isGrounded: function() { return CS.Call(2, 171, 0, false, this); },
        set_isGrounded: function(v) { return CS.Call(3, 171, 0, false, this, v); },
        get_velocity: function() { return CS.Call(2, 171, 1, false, this); },
        set_velocity: function(v) { return CS.Call(3, 171, 1, false, this, v); },
        get_collisionFlags: function() { return CS.Call(2, 171, 2, false, this); },
        set_collisionFlags: function(v) { return CS.Call(3, 171, 2, false, this, v); },
        get_radius: function() { return CS.Call(2, 171, 3, false, this); },
        set_radius: function(v) { return CS.Call(3, 171, 3, false, this, v); },
        get_height: function() { return CS.Call(2, 171, 4, false, this); },
        set_height: function(v) { return CS.Call(3, 171, 4, false, this, v); },
        get_center: function() { return CS.Call(2, 171, 5, false, this); },
        set_center: function(v) { return CS.Call(3, 171, 5, false, this, v); },
        get_slopeLimit: function() { return CS.Call(2, 171, 6, false, this); },
        set_slopeLimit: function(v) { return CS.Call(3, 171, 6, false, this, v); },
        get_stepOffset: function() { return CS.Call(2, 171, 7, false, this); },
        set_stepOffset: function(v) { return CS.Call(3, 171, 7, false, this, v); },
        get_detectCollisions: function() { return CS.Call(2, 171, 8, false, this); },
        set_detectCollisions: function(v) { return CS.Call(3, 171, 8, false, this, v); },
        Move: function(a0/*Vector3*/) { 
            return CS.Call(4, 171, 0, false, this, a0); //Ret: CollisionFlags
        },
        SimpleMove: function(a0/*Vector3*/) { 
            return CS.Call(4, 171, 1, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CharacterController);

// UnityEngine.Cloth
var UnityEngine$Cloth = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Cloth",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 172, 0, true, this); },
        get_bendingStiffness: function() { return CS.Call(2, 172, 0, false, this); },
        set_bendingStiffness: function(v) { return CS.Call(3, 172, 0, false, this, v); },
        get_stretchingStiffness: function() { return CS.Call(2, 172, 1, false, this); },
        set_stretchingStiffness: function(v) { return CS.Call(3, 172, 1, false, this, v); },
        get_damping: function() { return CS.Call(2, 172, 2, false, this); },
        set_damping: function(v) { return CS.Call(3, 172, 2, false, this, v); },
        get_thickness: function() { return CS.Call(2, 172, 3, false, this); },
        set_thickness: function(v) { return CS.Call(3, 172, 3, false, this, v); },
        get_externalAcceleration: function() { return CS.Call(2, 172, 4, false, this); },
        set_externalAcceleration: function(v) { return CS.Call(3, 172, 4, false, this, v); },
        get_randomAcceleration: function() { return CS.Call(2, 172, 5, false, this); },
        set_randomAcceleration: function(v) { return CS.Call(3, 172, 5, false, this, v); },
        get_useGravity: function() { return CS.Call(2, 172, 6, false, this); },
        set_useGravity: function(v) { return CS.Call(3, 172, 6, false, this, v); },
        get_selfCollision: function() { return CS.Call(2, 172, 7, false, this); },
        set_selfCollision: function(v) { return CS.Call(3, 172, 7, false, this, v); },
        get_enabled: function() { return CS.Call(2, 172, 8, false, this); },
        set_enabled: function(v) { return CS.Call(3, 172, 8, false, this, v); },
        get_vertices: function() { return CS.Call(2, 172, 9, false, this); },
        set_vertices: function(v) { return CS.Call(3, 172, 9, false, this, v); },
        get_normals: function() { return CS.Call(2, 172, 10, false, this); },
        set_normals: function(v) { return CS.Call(3, 172, 10, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Cloth);

// UnityEngine.InteractiveCloth
var UnityEngine$InteractiveCloth = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.InteractiveCloth",
    Kind: "Class",
    baseTypeName: "UnityEngine.Cloth",
    definition: {
        ctor: function() { CS.Call(5, 173, 0, true, this); },
        get_mesh: function() { return CS.Call(2, 173, 0, false, this); },
        set_mesh: function(v) { return CS.Call(3, 173, 0, false, this, v); },
        get_friction: function() { return CS.Call(2, 173, 1, false, this); },
        set_friction: function(v) { return CS.Call(3, 173, 1, false, this, v); },
        get_density: function() { return CS.Call(2, 173, 2, false, this); },
        set_density: function(v) { return CS.Call(3, 173, 2, false, this, v); },
        get_pressure: function() { return CS.Call(2, 173, 3, false, this); },
        set_pressure: function(v) { return CS.Call(3, 173, 3, false, this, v); },
        get_collisionResponse: function() { return CS.Call(2, 173, 4, false, this); },
        set_collisionResponse: function(v) { return CS.Call(3, 173, 4, false, this, v); },
        get_tearFactor: function() { return CS.Call(2, 173, 5, false, this); },
        set_tearFactor: function(v) { return CS.Call(3, 173, 5, false, this, v); },
        get_attachmentTearFactor: function() { return CS.Call(2, 173, 6, false, this); },
        set_attachmentTearFactor: function(v) { return CS.Call(3, 173, 6, false, this, v); },
        get_attachmentResponse: function() { return CS.Call(2, 173, 7, false, this); },
        set_attachmentResponse: function(v) { return CS.Call(3, 173, 7, false, this, v); },
        get_isTeared: function() { return CS.Call(2, 173, 8, false, this); },
        set_isTeared: function(v) { return CS.Call(3, 173, 8, false, this, v); },
        AddForceAtPosition$$Vector3$$Vector3$$Single$$ForceMode: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/, a3/*ForceMode*/) { 
            return CS.Call(4, 173, 0, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddForceAtPosition$$Vector3$$Vector3$$Single: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 173, 1, false, this, a0, a1, a2); //Ret: Void
        },
        AttachToCollider$$Collider$$Boolean$$Boolean: function(a0/*Collider*/, a1/*Boolean*/, a2/*Boolean*/) { 
            return CS.Call(4, 173, 2, false, this, a0, a1, a2); //Ret: Void
        },
        AttachToCollider$$Collider$$Boolean: function(a0/*Collider*/, a1/*Boolean*/) { 
            return CS.Call(4, 173, 3, false, this, a0, a1); //Ret: Void
        },
        AttachToCollider$$Collider: function(a0/*Collider*/) { 
            return CS.Call(4, 173, 4, false, this, a0); //Ret: Void
        },
        DetachFromCollider: function(a0/*Collider*/) { 
            return CS.Call(4, 173, 5, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$InteractiveCloth);

// UnityEngine.ClothSkinningCoefficient
var UnityEngine$ClothSkinningCoefficient = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ClothSkinningCoefficient",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        maxDistance: {
            get: function() { return CS.Call(0, 174, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 174, 0, false, this, v); }
        },
        maxDistanceBias: {
            get: function() { return CS.Call(0, 174, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 174, 1, false, this, v); }
        },
        collisionSphereRadius: {
            get: function() { return CS.Call(0, 174, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 174, 2, false, this, v); }
        },
        collisionSphereDistance: {
            get: function() { return CS.Call(0, 174, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 174, 3, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 174, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ClothSkinningCoefficient);

// UnityEngine.SkinnedCloth
var UnityEngine$SkinnedCloth = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SkinnedCloth",
    Kind: "Class",
    baseTypeName: "UnityEngine.Cloth",
    definition: {
        ctor: function() { CS.Call(5, 175, 0, true, this); },
        get_coefficients: function() { return CS.Call(2, 175, 0, false, this); },
        set_coefficients: function(v) { return CS.Call(3, 175, 0, false, this, v); },
        get_worldVelocityScale: function() { return CS.Call(2, 175, 1, false, this); },
        set_worldVelocityScale: function(v) { return CS.Call(3, 175, 1, false, this, v); },
        get_worldAccelerationScale: function() { return CS.Call(2, 175, 2, false, this); },
        set_worldAccelerationScale: function(v) { return CS.Call(3, 175, 2, false, this, v); },
        SetEnabledFading$$Boolean$$Single: function(a0/*Boolean*/, a1/*Single*/) { 
            return CS.Call(4, 175, 0, false, this, a0, a1); //Ret: Void
        },
        SetEnabledFading$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 175, 1, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SkinnedCloth);

// UnityEngine.ClothRenderer
var UnityEngine$ClothRenderer = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ClothRenderer",
    Kind: "Class",
    baseTypeName: "UnityEngine.Renderer",
    definition: {
        ctor: function() { CS.Call(5, 176, 0, true, this); },
        get_pauseWhenNotVisible: function() { return CS.Call(2, 176, 0, false, this); },
        set_pauseWhenNotVisible: function(v) { return CS.Call(3, 176, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ClothRenderer);

// UnityEngine.Physics2D
var UnityEngine$Physics2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Physics2D",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        IgnoreRaycastLayer: {
            get: function() { return CS.Call(0, 177, 0, true); }, 
            set: function(v) { return CS.Call(1, 177, 0, true, v); }
        },
        DefaultRaycastLayers: {
            get: function() { return CS.Call(0, 177, 1, true); }, 
            set: function(v) { return CS.Call(1, 177, 1, true, v); }
        },
        AllLayers: {
            get: function() { return CS.Call(0, 177, 2, true); }, 
            set: function(v) { return CS.Call(1, 177, 2, true, v); }
        },
    },
    staticDefinition: {
        get_velocityIterations: function() { return CS.Call(2, 177, 0, true); },
        set_velocityIterations: function(v) { return CS.Call(3, 177, 0, true, v); },
        get_positionIterations: function() { return CS.Call(2, 177, 1, true); },
        set_positionIterations: function(v) { return CS.Call(3, 177, 1, true, v); },
        get_gravity: function() { return CS.Call(2, 177, 2, true); },
        set_gravity: function(v) { return CS.Call(3, 177, 2, true, v); },
        get_raycastsHitTriggers: function() { return CS.Call(2, 177, 3, true); },
        set_raycastsHitTriggers: function(v) { return CS.Call(3, 177, 3, true, v); },
        get_raycastsStartInColliders: function() { return CS.Call(2, 177, 4, true); },
        set_raycastsStartInColliders: function(v) { return CS.Call(3, 177, 4, true, v); },
        get_changeStopsCallbacks: function() { return CS.Call(2, 177, 5, true); },
        set_changeStopsCallbacks: function(v) { return CS.Call(3, 177, 5, true, v); },
        get_velocityThreshold: function() { return CS.Call(2, 177, 6, true); },
        set_velocityThreshold: function(v) { return CS.Call(3, 177, 6, true, v); },
        get_maxLinearCorrection: function() { return CS.Call(2, 177, 7, true); },
        set_maxLinearCorrection: function(v) { return CS.Call(3, 177, 7, true, v); },
        get_maxAngularCorrection: function() { return CS.Call(2, 177, 8, true); },
        set_maxAngularCorrection: function(v) { return CS.Call(3, 177, 8, true, v); },
        get_maxTranslationSpeed: function() { return CS.Call(2, 177, 9, true); },
        set_maxTranslationSpeed: function(v) { return CS.Call(3, 177, 9, true, v); },
        get_maxRotationSpeed: function() { return CS.Call(2, 177, 10, true); },
        set_maxRotationSpeed: function(v) { return CS.Call(3, 177, 10, true, v); },
        get_minPenetrationForPenalty: function() { return CS.Call(2, 177, 11, true); },
        set_minPenetrationForPenalty: function(v) { return CS.Call(3, 177, 11, true, v); },
        get_baumgarteScale: function() { return CS.Call(2, 177, 12, true); },
        set_baumgarteScale: function(v) { return CS.Call(3, 177, 12, true, v); },
        get_baumgarteTOIScale: function() { return CS.Call(2, 177, 13, true); },
        set_baumgarteTOIScale: function(v) { return CS.Call(3, 177, 13, true, v); },
        get_timeToSleep: function() { return CS.Call(2, 177, 14, true); },
        set_timeToSleep: function(v) { return CS.Call(3, 177, 14, true, v); },
        get_linearSleepTolerance: function() { return CS.Call(2, 177, 15, true); },
        set_linearSleepTolerance: function(v) { return CS.Call(3, 177, 15, true, v); },
        get_angularSleepTolerance: function() { return CS.Call(2, 177, 16, true); },
        set_angularSleepTolerance: function(v) { return CS.Call(3, 177, 16, true, v); },
        BoxCast$$Vector2$$Vector2$$Single$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/, a5/*Int32*/, a6/*Single*/, a7/*Single*/) { 
            return CS.Call(4, 177, 0, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: RaycastHit2D
        },
        BoxCast$$Vector2$$Vector2$$Single$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/, a5/*Int32*/, a6/*Single*/) { 
            return CS.Call(4, 177, 1, true, a0, a1, a2, a3, a4, a5, a6); //Ret: RaycastHit2D
        },
        BoxCast$$Vector2$$Vector2$$Single$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 177, 2, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit2D
        },
        BoxCast$$Vector2$$Vector2$$Single$$Vector2$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/) { 
            return CS.Call(4, 177, 3, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D
        },
        BoxCast$$Vector2$$Vector2$$Single$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/) { 
            return CS.Call(4, 177, 4, true, a0, a1, a2, a3); //Ret: RaycastHit2D
        },
        BoxCastAll$$Vector2$$Vector2$$Single$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/, a5/*Int32*/, a6/*Single*/, a7/*Single*/) { 
            return CS.Call(4, 177, 5, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: RaycastHit2D[]
        },
        BoxCastAll$$Vector2$$Vector2$$Single$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/, a5/*Int32*/, a6/*Single*/) { 
            return CS.Call(4, 177, 6, true, a0, a1, a2, a3, a4, a5, a6); //Ret: RaycastHit2D[]
        },
        BoxCastAll$$Vector2$$Vector2$$Single$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 177, 7, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit2D[]
        },
        BoxCastAll$$Vector2$$Vector2$$Single$$Vector2$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*Single*/) { 
            return CS.Call(4, 177, 8, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D[]
        },
        BoxCastAll$$Vector2$$Vector2$$Single$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/) { 
            return CS.Call(4, 177, 9, true, a0, a1, a2, a3); //Ret: RaycastHit2D[]
        },
        BoxCastNonAlloc$$Vector2$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*RaycastHit2D[]*/, a5/*Single*/, a6/*Int32*/, a7/*Single*/, a8/*Single*/) { 
            return CS.Call(4, 177, 10, true, a0, a1, a2, a3, a4, a5, a6, a7, a8); //Ret: Int32
        },
        BoxCastNonAlloc$$Vector2$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*RaycastHit2D[]*/, a5/*Single*/, a6/*Int32*/, a7/*Single*/) { 
            return CS.Call(4, 177, 11, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Int32
        },
        BoxCastNonAlloc$$Vector2$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*RaycastHit2D[]*/, a5/*Single*/, a6/*Int32*/) { 
            return CS.Call(4, 177, 12, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Int32
        },
        BoxCastNonAlloc$$Vector2$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*RaycastHit2D[]*/, a5/*Single*/) { 
            return CS.Call(4, 177, 13, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        BoxCastNonAlloc$$Vector2$$Vector2$$Single$$Vector2$$RaycastHit2D$Array: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Vector2*/, a4/*RaycastHit2D[]*/) { 
            return CS.Call(4, 177, 14, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        CircleCast$$Vector2$$Single$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/, a6/*Single*/) { 
            return CS.Call(4, 177, 15, true, a0, a1, a2, a3, a4, a5, a6); //Ret: RaycastHit2D
        },
        CircleCast$$Vector2$$Single$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/) { 
            return CS.Call(4, 177, 16, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit2D
        },
        CircleCast$$Vector2$$Single$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 177, 17, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D
        },
        CircleCast$$Vector2$$Single$$Vector2$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/) { 
            return CS.Call(4, 177, 18, true, a0, a1, a2, a3); //Ret: RaycastHit2D
        },
        CircleCast$$Vector2$$Single$$Vector2: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/) { 
            return CS.Call(4, 177, 19, true, a0, a1, a2); //Ret: RaycastHit2D
        },
        CircleCastAll$$Vector2$$Single$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/, a6/*Single*/) { 
            return CS.Call(4, 177, 20, true, a0, a1, a2, a3, a4, a5, a6); //Ret: RaycastHit2D[]
        },
        CircleCastAll$$Vector2$$Single$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/) { 
            return CS.Call(4, 177, 21, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit2D[]
        },
        CircleCastAll$$Vector2$$Single$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 177, 22, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D[]
        },
        CircleCastAll$$Vector2$$Single$$Vector2$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*Single*/) { 
            return CS.Call(4, 177, 23, true, a0, a1, a2, a3); //Ret: RaycastHit2D[]
        },
        CircleCastAll$$Vector2$$Single$$Vector2: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/) { 
            return CS.Call(4, 177, 24, true, a0, a1, a2); //Ret: RaycastHit2D[]
        },
        CircleCastNonAlloc$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*RaycastHit2D[]*/, a4/*Single*/, a5/*Int32*/, a6/*Single*/, a7/*Single*/) { 
            return CS.Call(4, 177, 25, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: Int32
        },
        CircleCastNonAlloc$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*RaycastHit2D[]*/, a4/*Single*/, a5/*Int32*/, a6/*Single*/) { 
            return CS.Call(4, 177, 26, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Int32
        },
        CircleCastNonAlloc$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single$$Int32: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*RaycastHit2D[]*/, a4/*Single*/, a5/*Int32*/) { 
            return CS.Call(4, 177, 27, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        CircleCastNonAlloc$$Vector2$$Single$$Vector2$$RaycastHit2D$Array$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*RaycastHit2D[]*/, a4/*Single*/) { 
            return CS.Call(4, 177, 28, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        CircleCastNonAlloc$$Vector2$$Single$$Vector2$$RaycastHit2D$Array: function(a0/*Vector2*/, a1/*Single*/, a2/*Vector2*/, a3/*RaycastHit2D[]*/) { 
            return CS.Call(4, 177, 29, true, a0, a1, a2, a3); //Ret: Int32
        },
        GetIgnoreCollision: function(a0/*Collider2D*/, a1/*Collider2D*/) { 
            return CS.Call(4, 177, 30, true, a0, a1); //Ret: Boolean
        },
        GetIgnoreLayerCollision: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 177, 31, true, a0, a1); //Ret: Boolean
        },
        GetRayIntersection$$Ray$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 177, 32, true, a0, a1, a2); //Ret: RaycastHit2D
        },
        GetRayIntersection$$Ray$$Single: function(a0/*Ray*/, a1/*Single*/) { 
            return CS.Call(4, 177, 33, true, a0, a1); //Ret: RaycastHit2D
        },
        GetRayIntersection$$Ray: function(a0/*Ray*/) { 
            return CS.Call(4, 177, 34, true, a0); //Ret: RaycastHit2D
        },
        GetRayIntersectionAll$$Ray$$Single$$Int32: function(a0/*Ray*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 177, 35, true, a0, a1, a2); //Ret: RaycastHit2D[]
        },
        GetRayIntersectionAll$$Ray$$Single: function(a0/*Ray*/, a1/*Single*/) { 
            return CS.Call(4, 177, 36, true, a0, a1); //Ret: RaycastHit2D[]
        },
        GetRayIntersectionAll$$Ray: function(a0/*Ray*/) { 
            return CS.Call(4, 177, 37, true, a0); //Ret: RaycastHit2D[]
        },
        GetRayIntersectionNonAlloc$$Ray$$RaycastHit2D$Array$$Single$$Int32: function(a0/*Ray*/, a1/*RaycastHit2D[]*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 177, 38, true, a0, a1, a2, a3); //Ret: Int32
        },
        GetRayIntersectionNonAlloc$$Ray$$RaycastHit2D$Array$$Single: function(a0/*Ray*/, a1/*RaycastHit2D[]*/, a2/*Single*/) { 
            return CS.Call(4, 177, 39, true, a0, a1, a2); //Ret: Int32
        },
        GetRayIntersectionNonAlloc$$Ray$$RaycastHit2D$Array: function(a0/*Ray*/, a1/*RaycastHit2D[]*/) { 
            return CS.Call(4, 177, 40, true, a0, a1); //Ret: Int32
        },
        IgnoreCollision$$Collider2D$$Collider2D$$Boolean: function(a0/*Collider2D*/, a1/*Collider2D*/, a2/*Boolean*/) { 
            return CS.Call(4, 177, 41, true, a0, a1, a2); //Ret: Void
        },
        IgnoreCollision$$Collider2D$$Collider2D: function(a0/*Collider2D*/, a1/*Collider2D*/) { 
            return CS.Call(4, 177, 42, true, a0, a1); //Ret: Void
        },
        IgnoreLayerCollision$$Int32$$Int32$$Boolean: function(a0/*Int32*/, a1/*Int32*/, a2/*Boolean*/) { 
            return CS.Call(4, 177, 43, true, a0, a1, a2); //Ret: Void
        },
        IgnoreLayerCollision$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 177, 44, true, a0, a1); //Ret: Void
        },
        Linecast$$Vector2$$Vector2$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 177, 45, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D
        },
        Linecast$$Vector2$$Vector2$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 177, 46, true, a0, a1, a2, a3); //Ret: RaycastHit2D
        },
        Linecast$$Vector2$$Vector2$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/) { 
            return CS.Call(4, 177, 47, true, a0, a1, a2); //Ret: RaycastHit2D
        },
        Linecast$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 177, 48, true, a0, a1); //Ret: RaycastHit2D
        },
        LinecastAll$$Vector2$$Vector2$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 177, 49, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D[]
        },
        LinecastAll$$Vector2$$Vector2$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 177, 50, true, a0, a1, a2, a3); //Ret: RaycastHit2D[]
        },
        LinecastAll$$Vector2$$Vector2$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/) { 
            return CS.Call(4, 177, 51, true, a0, a1, a2); //Ret: RaycastHit2D[]
        },
        LinecastAll$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 177, 52, true, a0, a1); //Ret: RaycastHit2D[]
        },
        LinecastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Int32*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 177, 53, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        LinecastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 177, 54, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        LinecastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Int32*/) { 
            return CS.Call(4, 177, 55, true, a0, a1, a2, a3); //Ret: Int32
        },
        LinecastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/) { 
            return CS.Call(4, 177, 56, true, a0, a1, a2); //Ret: Int32
        },
        OverlapArea$$Vector2$$Vector2$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 177, 57, true, a0, a1, a2, a3, a4); //Ret: Collider2D
        },
        OverlapArea$$Vector2$$Vector2$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 177, 58, true, a0, a1, a2, a3); //Ret: Collider2D
        },
        OverlapArea$$Vector2$$Vector2$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/) { 
            return CS.Call(4, 177, 59, true, a0, a1, a2); //Ret: Collider2D
        },
        OverlapArea$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 177, 60, true, a0, a1); //Ret: Collider2D
        },
        OverlapAreaAll$$Vector2$$Vector2$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 177, 61, true, a0, a1, a2, a3, a4); //Ret: Collider2D[]
        },
        OverlapAreaAll$$Vector2$$Vector2$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 177, 62, true, a0, a1, a2, a3); //Ret: Collider2D[]
        },
        OverlapAreaAll$$Vector2$$Vector2$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Int32*/) { 
            return CS.Call(4, 177, 63, true, a0, a1, a2); //Ret: Collider2D[]
        },
        OverlapAreaAll$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 177, 64, true, a0, a1); //Ret: Collider2D[]
        },
        OverlapAreaNonAlloc$$Vector2$$Vector2$$Collider2D$Array$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Collider2D[]*/, a3/*Int32*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 177, 65, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        OverlapAreaNonAlloc$$Vector2$$Vector2$$Collider2D$Array$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Collider2D[]*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 177, 66, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        OverlapAreaNonAlloc$$Vector2$$Vector2$$Collider2D$Array$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Collider2D[]*/, a3/*Int32*/) { 
            return CS.Call(4, 177, 67, true, a0, a1, a2, a3); //Ret: Int32
        },
        OverlapAreaNonAlloc$$Vector2$$Vector2$$Collider2D$Array: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Collider2D[]*/) { 
            return CS.Call(4, 177, 68, true, a0, a1, a2); //Ret: Int32
        },
        OverlapCircle$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 177, 69, true, a0, a1, a2, a3, a4); //Ret: Collider2D
        },
        OverlapCircle$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 177, 70, true, a0, a1, a2, a3); //Ret: Collider2D
        },
        OverlapCircle$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 177, 71, true, a0, a1, a2); //Ret: Collider2D
        },
        OverlapCircle$$Vector2$$Single: function(a0/*Vector2*/, a1/*Single*/) { 
            return CS.Call(4, 177, 72, true, a0, a1); //Ret: Collider2D
        },
        OverlapCircleAll$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 177, 73, true, a0, a1, a2, a3, a4); //Ret: Collider2D[]
        },
        OverlapCircleAll$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 177, 74, true, a0, a1, a2, a3); //Ret: Collider2D[]
        },
        OverlapCircleAll$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 177, 75, true, a0, a1, a2); //Ret: Collider2D[]
        },
        OverlapCircleAll$$Vector2$$Single: function(a0/*Vector2*/, a1/*Single*/) { 
            return CS.Call(4, 177, 76, true, a0, a1); //Ret: Collider2D[]
        },
        OverlapCircleNonAlloc$$Vector2$$Single$$Collider2D$Array$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Collider2D[]*/, a3/*Int32*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 177, 77, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        OverlapCircleNonAlloc$$Vector2$$Single$$Collider2D$Array$$Int32$$Single: function(a0/*Vector2*/, a1/*Single*/, a2/*Collider2D[]*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 177, 78, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        OverlapCircleNonAlloc$$Vector2$$Single$$Collider2D$Array$$Int32: function(a0/*Vector2*/, a1/*Single*/, a2/*Collider2D[]*/, a3/*Int32*/) { 
            return CS.Call(4, 177, 79, true, a0, a1, a2, a3); //Ret: Int32
        },
        OverlapCircleNonAlloc$$Vector2$$Single$$Collider2D$Array: function(a0/*Vector2*/, a1/*Single*/, a2/*Collider2D[]*/) { 
            return CS.Call(4, 177, 80, true, a0, a1, a2); //Ret: Int32
        },
        OverlapPoint$$Vector2$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Int32*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 177, 81, true, a0, a1, a2, a3); //Ret: Collider2D
        },
        OverlapPoint$$Vector2$$Int32$$Single: function(a0/*Vector2*/, a1/*Int32*/, a2/*Single*/) { 
            return CS.Call(4, 177, 82, true, a0, a1, a2); //Ret: Collider2D
        },
        OverlapPoint$$Vector2$$Int32: function(a0/*Vector2*/, a1/*Int32*/) { 
            return CS.Call(4, 177, 83, true, a0, a1); //Ret: Collider2D
        },
        OverlapPoint$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 177, 84, true, a0); //Ret: Collider2D
        },
        OverlapPointAll$$Vector2$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Int32*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 177, 85, true, a0, a1, a2, a3); //Ret: Collider2D[]
        },
        OverlapPointAll$$Vector2$$Int32$$Single: function(a0/*Vector2*/, a1/*Int32*/, a2/*Single*/) { 
            return CS.Call(4, 177, 86, true, a0, a1, a2); //Ret: Collider2D[]
        },
        OverlapPointAll$$Vector2$$Int32: function(a0/*Vector2*/, a1/*Int32*/) { 
            return CS.Call(4, 177, 87, true, a0, a1); //Ret: Collider2D[]
        },
        OverlapPointAll$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 177, 88, true, a0); //Ret: Collider2D[]
        },
        OverlapPointNonAlloc$$Vector2$$Collider2D$Array$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Collider2D[]*/, a2/*Int32*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 177, 89, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        OverlapPointNonAlloc$$Vector2$$Collider2D$Array$$Int32$$Single: function(a0/*Vector2*/, a1/*Collider2D[]*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 177, 90, true, a0, a1, a2, a3); //Ret: Int32
        },
        OverlapPointNonAlloc$$Vector2$$Collider2D$Array$$Int32: function(a0/*Vector2*/, a1/*Collider2D[]*/, a2/*Int32*/) { 
            return CS.Call(4, 177, 91, true, a0, a1, a2); //Ret: Int32
        },
        OverlapPointNonAlloc$$Vector2$$Collider2D$Array: function(a0/*Vector2*/, a1/*Collider2D[]*/) { 
            return CS.Call(4, 177, 92, true, a0, a1); //Ret: Int32
        },
        Raycast$$Vector2$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 177, 93, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit2D
        },
        Raycast$$Vector2$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 177, 94, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D
        },
        Raycast$$Vector2$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 177, 95, true, a0, a1, a2, a3); //Ret: RaycastHit2D
        },
        Raycast$$Vector2$$Vector2$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 177, 96, true, a0, a1, a2); //Ret: RaycastHit2D
        },
        Raycast$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 177, 97, true, a0, a1); //Ret: RaycastHit2D
        },
        RaycastAll$$Vector2$$Vector2$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 177, 98, true, a0, a1, a2, a3, a4, a5); //Ret: RaycastHit2D[]
        },
        RaycastAll$$Vector2$$Vector2$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 177, 99, true, a0, a1, a2, a3, a4); //Ret: RaycastHit2D[]
        },
        RaycastAll$$Vector2$$Vector2$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 177, 100, true, a0, a1, a2, a3); //Ret: RaycastHit2D[]
        },
        RaycastAll$$Vector2$$Vector2$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 177, 101, true, a0, a1, a2); //Ret: RaycastHit2D[]
        },
        RaycastAll$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 177, 102, true, a0, a1); //Ret: RaycastHit2D[]
        },
        RaycastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/, a6/*Single*/) { 
            return CS.Call(4, 177, 103, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Int32
        },
        RaycastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Single$$Int32$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/) { 
            return CS.Call(4, 177, 104, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        RaycastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Single$$Int32: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Single*/, a4/*Int32*/) { 
            return CS.Call(4, 177, 105, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        RaycastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array$$Single: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/, a3/*Single*/) { 
            return CS.Call(4, 177, 106, true, a0, a1, a2, a3); //Ret: Int32
        },
        RaycastNonAlloc$$Vector2$$Vector2$$RaycastHit2D$Array: function(a0/*Vector2*/, a1/*Vector2*/, a2/*RaycastHit2D[]*/) { 
            return CS.Call(4, 177, 107, true, a0, a1, a2); //Ret: Int32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 177, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Physics2D);

// UnityEngine.RaycastHit2D
var UnityEngine$RaycastHit2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RaycastHit2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        op_Implicit: function(a0/*RaycastHit2D*/) { 
            return CS.Call(4, 178, 1, true, a0); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 178, 0, true, this); },
        get_centroid: function() { return CS.Call(2, 178, 0, false, this); },
        set_centroid: function(v) { return CS.Call(3, 178, 0, false, this, v); },
        get_point: function() { return CS.Call(2, 178, 1, false, this); },
        set_point: function(v) { return CS.Call(3, 178, 1, false, this, v); },
        get_normal: function() { return CS.Call(2, 178, 2, false, this); },
        set_normal: function(v) { return CS.Call(3, 178, 2, false, this, v); },
        get_distance: function() { return CS.Call(2, 178, 3, false, this); },
        set_distance: function(v) { return CS.Call(3, 178, 3, false, this, v); },
        get_fraction: function() { return CS.Call(2, 178, 4, false, this); },
        set_fraction: function(v) { return CS.Call(3, 178, 4, false, this, v); },
        get_collider: function() { return CS.Call(2, 178, 5, false, this); },
        set_collider: function(v) { return CS.Call(3, 178, 5, false, this, v); },
        get_rigidbody: function() { return CS.Call(2, 178, 6, false, this); },
        set_rigidbody: function(v) { return CS.Call(3, 178, 6, false, this, v); },
        get_transform: function() { return CS.Call(2, 178, 7, false, this); },
        set_transform: function(v) { return CS.Call(3, 178, 7, false, this, v); },
        CompareTo: function(a0/*RaycastHit2D*/) { 
            return CS.Call(4, 178, 0, false, this, a0); //Ret: Int32
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RaycastHit2D);

// UnityEngine.Rigidbody2D
var UnityEngine$Rigidbody2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Rigidbody2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 179, 0, true, this); },
        get_position: function() { return CS.Call(2, 179, 0, false, this); },
        set_position: function(v) { return CS.Call(3, 179, 0, false, this, v); },
        get_rotation: function() { return CS.Call(2, 179, 1, false, this); },
        set_rotation: function(v) { return CS.Call(3, 179, 1, false, this, v); },
        get_velocity: function() { return CS.Call(2, 179, 2, false, this); },
        set_velocity: function(v) { return CS.Call(3, 179, 2, false, this, v); },
        get_angularVelocity: function() { return CS.Call(2, 179, 3, false, this); },
        set_angularVelocity: function(v) { return CS.Call(3, 179, 3, false, this, v); },
        get_mass: function() { return CS.Call(2, 179, 4, false, this); },
        set_mass: function(v) { return CS.Call(3, 179, 4, false, this, v); },
        get_centerOfMass: function() { return CS.Call(2, 179, 5, false, this); },
        set_centerOfMass: function(v) { return CS.Call(3, 179, 5, false, this, v); },
        get_worldCenterOfMass: function() { return CS.Call(2, 179, 6, false, this); },
        set_worldCenterOfMass: function(v) { return CS.Call(3, 179, 6, false, this, v); },
        get_inertia: function() { return CS.Call(2, 179, 7, false, this); },
        set_inertia: function(v) { return CS.Call(3, 179, 7, false, this, v); },
        get_drag: function() { return CS.Call(2, 179, 8, false, this); },
        set_drag: function(v) { return CS.Call(3, 179, 8, false, this, v); },
        get_angularDrag: function() { return CS.Call(2, 179, 9, false, this); },
        set_angularDrag: function(v) { return CS.Call(3, 179, 9, false, this, v); },
        get_gravityScale: function() { return CS.Call(2, 179, 10, false, this); },
        set_gravityScale: function(v) { return CS.Call(3, 179, 10, false, this, v); },
        get_isKinematic: function() { return CS.Call(2, 179, 11, false, this); },
        set_isKinematic: function(v) { return CS.Call(3, 179, 11, false, this, v); },
        get_fixedAngle: function() { return CS.Call(2, 179, 12, false, this); },
        set_fixedAngle: function(v) { return CS.Call(3, 179, 12, false, this, v); },
        get_simulated: function() { return CS.Call(2, 179, 13, false, this); },
        set_simulated: function(v) { return CS.Call(3, 179, 13, false, this, v); },
        get_interpolation: function() { return CS.Call(2, 179, 14, false, this); },
        set_interpolation: function(v) { return CS.Call(3, 179, 14, false, this, v); },
        get_sleepMode: function() { return CS.Call(2, 179, 15, false, this); },
        set_sleepMode: function(v) { return CS.Call(3, 179, 15, false, this, v); },
        get_collisionDetectionMode: function() { return CS.Call(2, 179, 16, false, this); },
        set_collisionDetectionMode: function(v) { return CS.Call(3, 179, 16, false, this, v); },
        AddForce$$Vector2$$ForceMode2D: function(a0/*Vector2*/, a1/*ForceMode2D*/) { 
            return CS.Call(4, 179, 0, false, this, a0, a1); //Ret: Void
        },
        AddForce$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 179, 1, false, this, a0); //Ret: Void
        },
        AddForceAtPosition$$Vector2$$Vector2$$ForceMode2D: function(a0/*Vector2*/, a1/*Vector2*/, a2/*ForceMode2D*/) { 
            return CS.Call(4, 179, 2, false, this, a0, a1, a2); //Ret: Void
        },
        AddForceAtPosition$$Vector2$$Vector2: function(a0/*Vector2*/, a1/*Vector2*/) { 
            return CS.Call(4, 179, 3, false, this, a0, a1); //Ret: Void
        },
        AddRelativeForce$$Vector2$$ForceMode2D: function(a0/*Vector2*/, a1/*ForceMode2D*/) { 
            return CS.Call(4, 179, 4, false, this, a0, a1); //Ret: Void
        },
        AddRelativeForce$$Vector2: function(a0/*Vector2*/) { 
            return CS.Call(4, 179, 5, false, this, a0); //Ret: Void
        },
        AddTorque$$Single$$ForceMode2D: function(a0/*Single*/, a1/*ForceMode2D*/) { 
            return CS.Call(4, 179, 6, false, this, a0, a1); //Ret: Void
        },
        AddTorque$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 179, 7, false, this, a0); //Ret: Void
        },
        GetPoint: function(a0/*Vector2*/) { 
            return CS.Call(4, 179, 8, false, this, a0); //Ret: Vector2
        },
        GetPointVelocity: function(a0/*Vector2*/) { 
            return CS.Call(4, 179, 9, false, this, a0); //Ret: Vector2
        },
        GetRelativePoint: function(a0/*Vector2*/) { 
            return CS.Call(4, 179, 10, false, this, a0); //Ret: Vector2
        },
        GetRelativePointVelocity: function(a0/*Vector2*/) { 
            return CS.Call(4, 179, 11, false, this, a0); //Ret: Vector2
        },
        GetRelativeVector: function(a0/*Vector2*/) { 
            return CS.Call(4, 179, 12, false, this, a0); //Ret: Vector2
        },
        GetVector: function(a0/*Vector2*/) { 
            return CS.Call(4, 179, 13, false, this, a0); //Ret: Vector2
        },
        IsAwake: function() { 
            return CS.Call(4, 179, 14, false, this); //Ret: Boolean
        },
        IsSleeping: function() { 
            return CS.Call(4, 179, 15, false, this); //Ret: Boolean
        },
        MovePosition: function(a0/*Vector2*/) { 
            return CS.Call(4, 179, 16, false, this, a0); //Ret: Void
        },
        MoveRotation: function(a0/*Single*/) { 
            return CS.Call(4, 179, 17, false, this, a0); //Ret: Void
        },
        Sleep: function() { 
            return CS.Call(4, 179, 18, false, this); //Ret: Void
        },
        WakeUp: function() { 
            return CS.Call(4, 179, 19, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Rigidbody2D);

// UnityEngine.Collider2D
var UnityEngine$Collider2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Collider2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 180, 0, true, this); },
        get_isTrigger: function() { return CS.Call(2, 180, 0, false, this); },
        set_isTrigger: function(v) { return CS.Call(3, 180, 0, false, this, v); },
        get_attachedRigidbody: function() { return CS.Call(2, 180, 1, false, this); },
        set_attachedRigidbody: function(v) { return CS.Call(3, 180, 1, false, this, v); },
        get_shapeCount: function() { return CS.Call(2, 180, 2, false, this); },
        set_shapeCount: function(v) { return CS.Call(3, 180, 2, false, this, v); },
        get_bounds: function() { return CS.Call(2, 180, 3, false, this); },
        set_bounds: function(v) { return CS.Call(3, 180, 3, false, this, v); },
        get_sharedMaterial: function() { return CS.Call(2, 180, 4, false, this); },
        set_sharedMaterial: function(v) { return CS.Call(3, 180, 4, false, this, v); },
        OverlapPoint: function(a0/*Vector2*/) { 
            return CS.Call(4, 180, 0, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Collider2D);

// UnityEngine.CircleCollider2D
var UnityEngine$CircleCollider2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.CircleCollider2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider2D",
    definition: {
        ctor: function() { CS.Call(5, 181, 0, true, this); },
        get_center: function() { return CS.Call(2, 181, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 181, 0, false, this, v); },
        get_radius: function() { return CS.Call(2, 181, 1, false, this); },
        set_radius: function(v) { return CS.Call(3, 181, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$CircleCollider2D);

// UnityEngine.BoxCollider2D
var UnityEngine$BoxCollider2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.BoxCollider2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider2D",
    definition: {
        ctor: function() { CS.Call(5, 182, 0, true, this); },
        get_center: function() { return CS.Call(2, 182, 0, false, this); },
        set_center: function(v) { return CS.Call(3, 182, 0, false, this, v); },
        get_size: function() { return CS.Call(2, 182, 1, false, this); },
        set_size: function(v) { return CS.Call(3, 182, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$BoxCollider2D);

// UnityEngine.EdgeCollider2D
var UnityEngine$EdgeCollider2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.EdgeCollider2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider2D",
    definition: {
        ctor: function() { CS.Call(5, 183, 0, true, this); },
        get_edgeCount: function() { return CS.Call(2, 183, 0, false, this); },
        set_edgeCount: function(v) { return CS.Call(3, 183, 0, false, this, v); },
        get_pointCount: function() { return CS.Call(2, 183, 1, false, this); },
        set_pointCount: function(v) { return CS.Call(3, 183, 1, false, this, v); },
        get_points: function() { return CS.Call(2, 183, 2, false, this); },
        set_points: function(v) { return CS.Call(3, 183, 2, false, this, v); },
        Reset: function() { 
            return CS.Call(4, 183, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$EdgeCollider2D);

// UnityEngine.PolygonCollider2D
var UnityEngine$PolygonCollider2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.PolygonCollider2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Collider2D",
    definition: {
        ctor: function() { CS.Call(5, 184, 0, true, this); },
        get_points: function() { return CS.Call(2, 184, 0, false, this); },
        set_points: function(v) { return CS.Call(3, 184, 0, false, this, v); },
        get_pathCount: function() { return CS.Call(2, 184, 1, false, this); },
        set_pathCount: function(v) { return CS.Call(3, 184, 1, false, this, v); },
        CreatePrimitive$$Int32$$Vector2$$Vector2: function(a0/*Int32*/, a1/*Vector2*/, a2/*Vector2*/) { 
            return CS.Call(4, 184, 0, false, this, a0, a1, a2); //Ret: Void
        },
        CreatePrimitive$$Int32$$Vector2: function(a0/*Int32*/, a1/*Vector2*/) { 
            return CS.Call(4, 184, 1, false, this, a0, a1); //Ret: Void
        },
        CreatePrimitive$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 184, 2, false, this, a0); //Ret: Void
        },
        GetPath: function(a0/*Int32*/) { 
            return CS.Call(4, 184, 3, false, this, a0); //Ret: Vector2[]
        },
        GetTotalPointCount: function() { 
            return CS.Call(4, 184, 4, false, this); //Ret: Int32
        },
        SetPath: function(a0/*Int32*/, a1/*Vector2[]*/) { 
            return CS.Call(4, 184, 5, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$PolygonCollider2D);

// UnityEngine.ContactPoint2D
var UnityEngine$ContactPoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.ContactPoint2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 185, 0, true, this); },
        get_point: function() { return CS.Call(2, 185, 0, false, this); },
        set_point: function(v) { return CS.Call(3, 185, 0, false, this, v); },
        get_normal: function() { return CS.Call(2, 185, 1, false, this); },
        set_normal: function(v) { return CS.Call(3, 185, 1, false, this, v); },
        get_collider: function() { return CS.Call(2, 185, 2, false, this); },
        set_collider: function(v) { return CS.Call(3, 185, 2, false, this, v); },
        get_otherCollider: function() { return CS.Call(2, 185, 3, false, this); },
        set_otherCollider: function(v) { return CS.Call(3, 185, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$ContactPoint2D);

// UnityEngine.Collision2D
var UnityEngine$Collision2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Collision2D",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 186, 0, true, this); },
        get_rigidbody: function() { return CS.Call(2, 186, 0, false, this); },
        set_rigidbody: function(v) { return CS.Call(3, 186, 0, false, this, v); },
        get_collider: function() { return CS.Call(2, 186, 1, false, this); },
        set_collider: function(v) { return CS.Call(3, 186, 1, false, this, v); },
        get_transform: function() { return CS.Call(2, 186, 2, false, this); },
        set_transform: function(v) { return CS.Call(3, 186, 2, false, this, v); },
        get_gameObject: function() { return CS.Call(2, 186, 3, false, this); },
        set_gameObject: function(v) { return CS.Call(3, 186, 3, false, this, v); },
        get_contacts: function() { return CS.Call(2, 186, 4, false, this); },
        set_contacts: function(v) { return CS.Call(3, 186, 4, false, this, v); },
        get_relativeVelocity: function() { return CS.Call(2, 186, 5, false, this); },
        set_relativeVelocity: function(v) { return CS.Call(3, 186, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Collision2D);

// UnityEngine.JointAngleLimits2D
var UnityEngine$JointAngleLimits2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointAngleLimits2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 187, 0, true, this); },
        get_min: function() { return CS.Call(2, 187, 0, false, this); },
        set_min: function(v) { return CS.Call(3, 187, 0, false, this, v); },
        get_max: function() { return CS.Call(2, 187, 1, false, this); },
        set_max: function(v) { return CS.Call(3, 187, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointAngleLimits2D);

// UnityEngine.JointTranslationLimits2D
var UnityEngine$JointTranslationLimits2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointTranslationLimits2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 188, 0, true, this); },
        get_min: function() { return CS.Call(2, 188, 0, false, this); },
        set_min: function(v) { return CS.Call(3, 188, 0, false, this, v); },
        get_max: function() { return CS.Call(2, 188, 1, false, this); },
        set_max: function(v) { return CS.Call(3, 188, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointTranslationLimits2D);

// UnityEngine.JointMotor2D
var UnityEngine$JointMotor2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointMotor2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 189, 0, true, this); },
        get_motorSpeed: function() { return CS.Call(2, 189, 0, false, this); },
        set_motorSpeed: function(v) { return CS.Call(3, 189, 0, false, this, v); },
        get_maxMotorTorque: function() { return CS.Call(2, 189, 1, false, this); },
        set_maxMotorTorque: function(v) { return CS.Call(3, 189, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointMotor2D);

// UnityEngine.JointSuspension2D
var UnityEngine$JointSuspension2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.JointSuspension2D",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 190, 0, true, this); },
        get_dampingRatio: function() { return CS.Call(2, 190, 0, false, this); },
        set_dampingRatio: function(v) { return CS.Call(3, 190, 0, false, this, v); },
        get_frequency: function() { return CS.Call(2, 190, 1, false, this); },
        set_frequency: function(v) { return CS.Call(3, 190, 1, false, this, v); },
        get_angle: function() { return CS.Call(2, 190, 2, false, this); },
        set_angle: function(v) { return CS.Call(3, 190, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$JointSuspension2D);

// UnityEngine.Joint2D
var UnityEngine$Joint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Joint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 191, 0, true, this); },
        get_connectedBody: function() { return CS.Call(2, 191, 0, false, this); },
        set_connectedBody: function(v) { return CS.Call(3, 191, 0, false, this, v); },
        get_collideConnected: function() { return CS.Call(2, 191, 1, false, this); },
        set_collideConnected: function(v) { return CS.Call(3, 191, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Joint2D);

// UnityEngine.AnchoredJoint2D
var UnityEngine$AnchoredJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnchoredJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Joint2D",
    definition: {
        ctor: function() { CS.Call(5, 192, 0, true, this); },
        get_anchor: function() { return CS.Call(2, 192, 0, false, this); },
        set_anchor: function(v) { return CS.Call(3, 192, 0, false, this, v); },
        get_connectedAnchor: function() { return CS.Call(2, 192, 1, false, this); },
        set_connectedAnchor: function(v) { return CS.Call(3, 192, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnchoredJoint2D);

// UnityEngine.SpringJoint2D
var UnityEngine$SpringJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SpringJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.AnchoredJoint2D",
    definition: {
        ctor: function() { CS.Call(5, 193, 0, true, this); },
        get_distance: function() { return CS.Call(2, 193, 0, false, this); },
        set_distance: function(v) { return CS.Call(3, 193, 0, false, this, v); },
        get_dampingRatio: function() { return CS.Call(2, 193, 1, false, this); },
        set_dampingRatio: function(v) { return CS.Call(3, 193, 1, false, this, v); },
        get_frequency: function() { return CS.Call(2, 193, 2, false, this); },
        set_frequency: function(v) { return CS.Call(3, 193, 2, false, this, v); },
        GetReactionForce: function(a0/*Single*/) { 
            return CS.Call(4, 193, 0, false, this, a0); //Ret: Vector2
        },
        GetReactionTorque: function(a0/*Single*/) { 
            return CS.Call(4, 193, 1, false, this, a0); //Ret: Single
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SpringJoint2D);

// UnityEngine.DistanceJoint2D
var UnityEngine$DistanceJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.DistanceJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.AnchoredJoint2D",
    definition: {
        ctor: function() { CS.Call(5, 194, 0, true, this); },
        get_distance: function() { return CS.Call(2, 194, 0, false, this); },
        set_distance: function(v) { return CS.Call(3, 194, 0, false, this, v); },
        get_maxDistanceOnly: function() { return CS.Call(2, 194, 1, false, this); },
        set_maxDistanceOnly: function(v) { return CS.Call(3, 194, 1, false, this, v); },
        GetReactionForce: function(a0/*Single*/) { 
            return CS.Call(4, 194, 0, false, this, a0); //Ret: Vector2
        },
        GetReactionTorque: function(a0/*Single*/) { 
            return CS.Call(4, 194, 1, false, this, a0); //Ret: Single
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$DistanceJoint2D);

// UnityEngine.HingeJoint2D
var UnityEngine$HingeJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HingeJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.AnchoredJoint2D",
    definition: {
        ctor: function() { CS.Call(5, 195, 0, true, this); },
        get_useMotor: function() { return CS.Call(2, 195, 0, false, this); },
        set_useMotor: function(v) { return CS.Call(3, 195, 0, false, this, v); },
        get_useLimits: function() { return CS.Call(2, 195, 1, false, this); },
        set_useLimits: function(v) { return CS.Call(3, 195, 1, false, this, v); },
        get_motor: function() { return CS.Call(2, 195, 2, false, this); },
        set_motor: function(v) { return CS.Call(3, 195, 2, false, this, v); },
        get_limits: function() { return CS.Call(2, 195, 3, false, this); },
        set_limits: function(v) { return CS.Call(3, 195, 3, false, this, v); },
        get_limitState: function() { return CS.Call(2, 195, 4, false, this); },
        set_limitState: function(v) { return CS.Call(3, 195, 4, false, this, v); },
        get_referenceAngle: function() { return CS.Call(2, 195, 5, false, this); },
        set_referenceAngle: function(v) { return CS.Call(3, 195, 5, false, this, v); },
        get_jointAngle: function() { return CS.Call(2, 195, 6, false, this); },
        set_jointAngle: function(v) { return CS.Call(3, 195, 6, false, this, v); },
        get_jointSpeed: function() { return CS.Call(2, 195, 7, false, this); },
        set_jointSpeed: function(v) { return CS.Call(3, 195, 7, false, this, v); },
        GetMotorTorque: function(a0/*Single*/) { 
            return CS.Call(4, 195, 0, false, this, a0); //Ret: Single
        },
        GetReactionForce: function(a0/*Single*/) { 
            return CS.Call(4, 195, 1, false, this, a0); //Ret: Vector2
        },
        GetReactionTorque: function(a0/*Single*/) { 
            return CS.Call(4, 195, 2, false, this, a0); //Ret: Single
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HingeJoint2D);

// UnityEngine.SliderJoint2D
var UnityEngine$SliderJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SliderJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.AnchoredJoint2D",
    definition: {
        ctor: function() { CS.Call(5, 196, 0, true, this); },
        get_angle: function() { return CS.Call(2, 196, 0, false, this); },
        set_angle: function(v) { return CS.Call(3, 196, 0, false, this, v); },
        get_useMotor: function() { return CS.Call(2, 196, 1, false, this); },
        set_useMotor: function(v) { return CS.Call(3, 196, 1, false, this, v); },
        get_useLimits: function() { return CS.Call(2, 196, 2, false, this); },
        set_useLimits: function(v) { return CS.Call(3, 196, 2, false, this, v); },
        get_motor: function() { return CS.Call(2, 196, 3, false, this); },
        set_motor: function(v) { return CS.Call(3, 196, 3, false, this, v); },
        get_limits: function() { return CS.Call(2, 196, 4, false, this); },
        set_limits: function(v) { return CS.Call(3, 196, 4, false, this, v); },
        get_limitState: function() { return CS.Call(2, 196, 5, false, this); },
        set_limitState: function(v) { return CS.Call(3, 196, 5, false, this, v); },
        get_referenceAngle: function() { return CS.Call(2, 196, 6, false, this); },
        set_referenceAngle: function(v) { return CS.Call(3, 196, 6, false, this, v); },
        get_jointTranslation: function() { return CS.Call(2, 196, 7, false, this); },
        set_jointTranslation: function(v) { return CS.Call(3, 196, 7, false, this, v); },
        get_jointSpeed: function() { return CS.Call(2, 196, 8, false, this); },
        set_jointSpeed: function(v) { return CS.Call(3, 196, 8, false, this, v); },
        GetMotorForce: function(a0/*Single*/) { 
            return CS.Call(4, 196, 0, false, this, a0); //Ret: Single
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SliderJoint2D);

// UnityEngine.WheelJoint2D
var UnityEngine$WheelJoint2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WheelJoint2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.AnchoredJoint2D",
    definition: {
        ctor: function() { CS.Call(5, 197, 0, true, this); },
        get_suspension: function() { return CS.Call(2, 197, 0, false, this); },
        set_suspension: function(v) { return CS.Call(3, 197, 0, false, this, v); },
        get_useMotor: function() { return CS.Call(2, 197, 1, false, this); },
        set_useMotor: function(v) { return CS.Call(3, 197, 1, false, this, v); },
        get_motor: function() { return CS.Call(2, 197, 2, false, this); },
        set_motor: function(v) { return CS.Call(3, 197, 2, false, this, v); },
        get_jointTranslation: function() { return CS.Call(2, 197, 3, false, this); },
        set_jointTranslation: function(v) { return CS.Call(3, 197, 3, false, this, v); },
        get_jointSpeed: function() { return CS.Call(2, 197, 4, false, this); },
        set_jointSpeed: function(v) { return CS.Call(3, 197, 4, false, this, v); },
        GetMotorTorque: function(a0/*Single*/) { 
            return CS.Call(4, 197, 0, false, this, a0); //Ret: Single
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WheelJoint2D);

// UnityEngine.PhysicsMaterial2D
var UnityEngine$PhysicsMaterial2D = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.PhysicsMaterial2D",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 198, 0, true, this); },
        ctor$$String: function(a0) { CS.Call(5, 198, 1, true, this, a0); },
        get_bounciness: function() { return CS.Call(2, 198, 0, false, this); },
        set_bounciness: function(v) { return CS.Call(3, 198, 0, false, this, v); },
        get_friction: function() { return CS.Call(2, 198, 1, false, this); },
        set_friction: function(v) { return CS.Call(3, 198, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$PhysicsMaterial2D);

// UnityEngine.NavMeshAgent
var UnityEngine$NavMeshAgent = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.NavMeshAgent",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 199, 0, true, this); },
        get_destination: function() { return CS.Call(2, 199, 0, false, this); },
        set_destination: function(v) { return CS.Call(3, 199, 0, false, this, v); },
        get_stoppingDistance: function() { return CS.Call(2, 199, 1, false, this); },
        set_stoppingDistance: function(v) { return CS.Call(3, 199, 1, false, this, v); },
        get_velocity: function() { return CS.Call(2, 199, 2, false, this); },
        set_velocity: function(v) { return CS.Call(3, 199, 2, false, this, v); },
        get_nextPosition: function() { return CS.Call(2, 199, 3, false, this); },
        set_nextPosition: function(v) { return CS.Call(3, 199, 3, false, this, v); },
        get_steeringTarget: function() { return CS.Call(2, 199, 4, false, this); },
        set_steeringTarget: function(v) { return CS.Call(3, 199, 4, false, this, v); },
        get_desiredVelocity: function() { return CS.Call(2, 199, 5, false, this); },
        set_desiredVelocity: function(v) { return CS.Call(3, 199, 5, false, this, v); },
        get_remainingDistance: function() { return CS.Call(2, 199, 6, false, this); },
        set_remainingDistance: function(v) { return CS.Call(3, 199, 6, false, this, v); },
        get_baseOffset: function() { return CS.Call(2, 199, 7, false, this); },
        set_baseOffset: function(v) { return CS.Call(3, 199, 7, false, this, v); },
        get_isOnOffMeshLink: function() { return CS.Call(2, 199, 8, false, this); },
        set_isOnOffMeshLink: function(v) { return CS.Call(3, 199, 8, false, this, v); },
        get_currentOffMeshLinkData: function() { return CS.Call(2, 199, 9, false, this); },
        set_currentOffMeshLinkData: function(v) { return CS.Call(3, 199, 9, false, this, v); },
        get_nextOffMeshLinkData: function() { return CS.Call(2, 199, 10, false, this); },
        set_nextOffMeshLinkData: function(v) { return CS.Call(3, 199, 10, false, this, v); },
        get_autoTraverseOffMeshLink: function() { return CS.Call(2, 199, 11, false, this); },
        set_autoTraverseOffMeshLink: function(v) { return CS.Call(3, 199, 11, false, this, v); },
        get_autoBraking: function() { return CS.Call(2, 199, 12, false, this); },
        set_autoBraking: function(v) { return CS.Call(3, 199, 12, false, this, v); },
        get_autoRepath: function() { return CS.Call(2, 199, 13, false, this); },
        set_autoRepath: function(v) { return CS.Call(3, 199, 13, false, this, v); },
        get_hasPath: function() { return CS.Call(2, 199, 14, false, this); },
        set_hasPath: function(v) { return CS.Call(3, 199, 14, false, this, v); },
        get_pathPending: function() { return CS.Call(2, 199, 15, false, this); },
        set_pathPending: function(v) { return CS.Call(3, 199, 15, false, this, v); },
        get_isPathStale: function() { return CS.Call(2, 199, 16, false, this); },
        set_isPathStale: function(v) { return CS.Call(3, 199, 16, false, this, v); },
        get_pathStatus: function() { return CS.Call(2, 199, 17, false, this); },
        set_pathStatus: function(v) { return CS.Call(3, 199, 17, false, this, v); },
        get_pathEndPosition: function() { return CS.Call(2, 199, 18, false, this); },
        set_pathEndPosition: function(v) { return CS.Call(3, 199, 18, false, this, v); },
        get_path: function() { return CS.Call(2, 199, 19, false, this); },
        set_path: function(v) { return CS.Call(3, 199, 19, false, this, v); },
        get_walkableMask: function() { return CS.Call(2, 199, 20, false, this); },
        set_walkableMask: function(v) { return CS.Call(3, 199, 20, false, this, v); },
        get_speed: function() { return CS.Call(2, 199, 21, false, this); },
        set_speed: function(v) { return CS.Call(3, 199, 21, false, this, v); },
        get_angularSpeed: function() { return CS.Call(2, 199, 22, false, this); },
        set_angularSpeed: function(v) { return CS.Call(3, 199, 22, false, this, v); },
        get_acceleration: function() { return CS.Call(2, 199, 23, false, this); },
        set_acceleration: function(v) { return CS.Call(3, 199, 23, false, this, v); },
        get_updatePosition: function() { return CS.Call(2, 199, 24, false, this); },
        set_updatePosition: function(v) { return CS.Call(3, 199, 24, false, this, v); },
        get_updateRotation: function() { return CS.Call(2, 199, 25, false, this); },
        set_updateRotation: function(v) { return CS.Call(3, 199, 25, false, this, v); },
        get_radius: function() { return CS.Call(2, 199, 26, false, this); },
        set_radius: function(v) { return CS.Call(3, 199, 26, false, this, v); },
        get_height: function() { return CS.Call(2, 199, 27, false, this); },
        set_height: function(v) { return CS.Call(3, 199, 27, false, this, v); },
        get_obstacleAvoidanceType: function() { return CS.Call(2, 199, 28, false, this); },
        set_obstacleAvoidanceType: function(v) { return CS.Call(3, 199, 28, false, this, v); },
        get_avoidancePriority: function() { return CS.Call(2, 199, 29, false, this); },
        set_avoidancePriority: function(v) { return CS.Call(3, 199, 29, false, this, v); },
        ActivateCurrentOffMeshLink: function(a0/*Boolean*/) { 
            return CS.Call(4, 199, 0, false, this, a0); //Ret: Void
        },
        CalculatePath: function(a0/*Vector3*/, a1/*NavMeshPath*/) { 
            return CS.Call(4, 199, 1, false, this, a0, a1); //Ret: Boolean
        },
        CompleteOffMeshLink: function() { 
            return CS.Call(4, 199, 2, false, this); //Ret: Void
        },
        FindClosestEdge: function(a0/*NavMeshHit&*/) { 
            return CS.Call(4, 199, 3, false, this, a0); //Ret: Boolean
        },
        GetLayerCost: function(a0/*Int32*/) { 
            return CS.Call(4, 199, 4, false, this, a0); //Ret: Single
        },
        Move: function(a0/*Vector3*/) { 
            return CS.Call(4, 199, 5, false, this, a0); //Ret: Void
        },
        Raycast: function(a0/*Vector3*/, a1/*NavMeshHit&*/) { 
            return CS.Call(4, 199, 6, false, this, a0, a1); //Ret: Boolean
        },
        ResetPath: function() { 
            return CS.Call(4, 199, 7, false, this); //Ret: Void
        },
        Resume: function() { 
            return CS.Call(4, 199, 8, false, this); //Ret: Void
        },
        SamplePathPosition: function(a0/*Int32*/, a1/*Single*/, a2/*NavMeshHit&*/) { 
            return CS.Call(4, 199, 9, false, this, a0, a1, a2); //Ret: Boolean
        },
        SetDestination: function(a0/*Vector3*/) { 
            return CS.Call(4, 199, 10, false, this, a0); //Ret: Boolean
        },
        SetLayerCost: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 199, 11, false, this, a0, a1); //Ret: Void
        },
        SetPath: function(a0/*NavMeshPath*/) { 
            return CS.Call(4, 199, 12, false, this, a0); //Ret: Boolean
        },
        Stop$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 199, 13, false, this, a0); //Ret: Void
        },
        Stop: function() { 
            return CS.Call(4, 199, 14, false, this); //Ret: Void
        },
        Warp: function(a0/*Vector3*/) { 
            return CS.Call(4, 199, 15, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$NavMeshAgent);

// UnityEngine.OffMeshLinkData
var UnityEngine$OffMeshLinkData = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.OffMeshLinkData",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 200, 0, true, this); },
        get_valid: function() { return CS.Call(2, 200, 0, false, this); },
        set_valid: function(v) { return CS.Call(3, 200, 0, false, this, v); },
        get_activated: function() { return CS.Call(2, 200, 1, false, this); },
        set_activated: function(v) { return CS.Call(3, 200, 1, false, this, v); },
        get_linkType: function() { return CS.Call(2, 200, 2, false, this); },
        set_linkType: function(v) { return CS.Call(3, 200, 2, false, this, v); },
        get_startPos: function() { return CS.Call(2, 200, 3, false, this); },
        set_startPos: function(v) { return CS.Call(3, 200, 3, false, this, v); },
        get_endPos: function() { return CS.Call(2, 200, 4, false, this); },
        set_endPos: function(v) { return CS.Call(3, 200, 4, false, this, v); },
        get_offMeshLink: function() { return CS.Call(2, 200, 5, false, this); },
        set_offMeshLink: function(v) { return CS.Call(3, 200, 5, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$OffMeshLinkData);

// UnityEngine.NavMeshHit
var UnityEngine$NavMeshHit = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.NavMeshHit",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 201, 0, true, this); },
        get_position: function() { return CS.Call(2, 201, 0, false, this); },
        set_position: function(v) { return CS.Call(3, 201, 0, false, this, v); },
        get_normal: function() { return CS.Call(2, 201, 1, false, this); },
        set_normal: function(v) { return CS.Call(3, 201, 1, false, this, v); },
        get_distance: function() { return CS.Call(2, 201, 2, false, this); },
        set_distance: function(v) { return CS.Call(3, 201, 2, false, this, v); },
        get_mask: function() { return CS.Call(2, 201, 3, false, this); },
        set_mask: function(v) { return CS.Call(3, 201, 3, false, this, v); },
        get_hit: function() { return CS.Call(2, 201, 4, false, this); },
        set_hit: function(v) { return CS.Call(3, 201, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$NavMeshHit);

// UnityEngine.NavMeshTriangulation
var UnityEngine$NavMeshTriangulation = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.NavMeshTriangulation",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        vertices: {
            get: function() { return CS.Call(0, 202, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 202, 0, false, this, v); }
        },
        indices: {
            get: function() { return CS.Call(0, 202, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 202, 1, false, this, v); }
        },
        layers: {
            get: function() { return CS.Call(0, 202, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 202, 2, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 202, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$NavMeshTriangulation);

// UnityEngine.NavMesh
var UnityEngine$NavMesh = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.NavMesh",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        AddOffMeshLinks: function() { 
            return CS.Call(4, 203, 0, true); //Ret: Void
        },
        CalculatePath: function(a0/*Vector3*/, a1/*Vector3*/, a2/*Int32*/, a3/*NavMeshPath*/) { 
            return CS.Call(4, 203, 1, true, a0, a1, a2, a3); //Ret: Boolean
        },
        CalculateTriangulation: function() { 
            return CS.Call(4, 203, 2, true); //Ret: NavMeshTriangulation
        },
        FindClosestEdge: function(a0/*Vector3*/, a1/*NavMeshHit&*/, a2/*Int32*/) { 
            return CS.Call(4, 203, 3, true, a0, a1, a2); //Ret: Boolean
        },
        GetLayerCost: function(a0/*Int32*/) { 
            return CS.Call(4, 203, 4, true, a0); //Ret: Single
        },
        GetNavMeshLayerFromName: function(a0/*String*/) { 
            return CS.Call(4, 203, 5, true, a0); //Ret: Int32
        },
        Raycast: function(a0/*Vector3*/, a1/*Vector3*/, a2/*NavMeshHit&*/, a3/*Int32*/) { 
            return CS.Call(4, 203, 6, true, a0, a1, a2, a3); //Ret: Boolean
        },
        RestoreNavMesh: function() { 
            return CS.Call(4, 203, 7, true); //Ret: Void
        },
        SamplePosition: function(a0/*Vector3*/, a1/*NavMeshHit&*/, a2/*Single*/, a3/*Int32*/) { 
            return CS.Call(4, 203, 8, true, a0, a1, a2, a3); //Ret: Boolean
        },
        SetLayerCost: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 203, 9, true, a0, a1); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 203, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$NavMesh);

// UnityEngine.OffMeshLink
var UnityEngine$OffMeshLink = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.OffMeshLink",
    Kind: "Class",
    baseTypeName: "UnityEngine.Component",
    definition: {
        ctor: function() { CS.Call(5, 204, 0, true, this); },
        get_activated: function() { return CS.Call(2, 204, 0, false, this); },
        set_activated: function(v) { return CS.Call(3, 204, 0, false, this, v); },
        get_occupied: function() { return CS.Call(2, 204, 1, false, this); },
        set_occupied: function(v) { return CS.Call(3, 204, 1, false, this, v); },
        get_costOverride: function() { return CS.Call(2, 204, 2, false, this); },
        set_costOverride: function(v) { return CS.Call(3, 204, 2, false, this, v); },
        get_biDirectional: function() { return CS.Call(2, 204, 3, false, this); },
        set_biDirectional: function(v) { return CS.Call(3, 204, 3, false, this, v); },
        get_navMeshLayer: function() { return CS.Call(2, 204, 4, false, this); },
        set_navMeshLayer: function(v) { return CS.Call(3, 204, 4, false, this, v); },
        get_autoUpdatePositions: function() { return CS.Call(2, 204, 5, false, this); },
        set_autoUpdatePositions: function(v) { return CS.Call(3, 204, 5, false, this, v); },
        get_startTransform: function() { return CS.Call(2, 204, 6, false, this); },
        set_startTransform: function(v) { return CS.Call(3, 204, 6, false, this, v); },
        get_endTransform: function() { return CS.Call(2, 204, 7, false, this); },
        set_endTransform: function(v) { return CS.Call(3, 204, 7, false, this, v); },
        UpdatePositions: function() { 
            return CS.Call(4, 204, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$OffMeshLink);

// UnityEngine.NavMeshPath
var UnityEngine$NavMeshPath = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.NavMeshPath",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 205, 0, true, this); },
        get_corners: function() { return CS.Call(2, 205, 0, false, this); },
        set_corners: function(v) { return CS.Call(3, 205, 0, false, this, v); },
        get_status: function() { return CS.Call(2, 205, 1, false, this); },
        set_status: function(v) { return CS.Call(3, 205, 1, false, this, v); },
        ClearCorners: function() { 
            return CS.Call(4, 205, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$NavMeshPath);

// UnityEngine.NavMeshObstacle
var UnityEngine$NavMeshObstacle = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.NavMeshObstacle",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 206, 0, true, this); },
        get_height: function() { return CS.Call(2, 206, 0, false, this); },
        set_height: function(v) { return CS.Call(3, 206, 0, false, this, v); },
        get_radius: function() { return CS.Call(2, 206, 1, false, this); },
        set_radius: function(v) { return CS.Call(3, 206, 1, false, this, v); },
        get_velocity: function() { return CS.Call(2, 206, 2, false, this); },
        set_velocity: function(v) { return CS.Call(3, 206, 2, false, this, v); },
        get_carving: function() { return CS.Call(2, 206, 3, false, this); },
        set_carving: function(v) { return CS.Call(3, 206, 3, false, this, v); },
        get_carvingMoveThreshold: function() { return CS.Call(2, 206, 4, false, this); },
        set_carvingMoveThreshold: function(v) { return CS.Call(3, 206, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$NavMeshObstacle);

// UnityEngine.AudioSettings
var UnityEngine$AudioSettings = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioSettings",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_driverCaps: function() { return CS.Call(2, 207, 0, true); },
        set_driverCaps: function(v) { return CS.Call(3, 207, 0, true, v); },
        get_speakerMode: function() { return CS.Call(2, 207, 1, true); },
        set_speakerMode: function(v) { return CS.Call(3, 207, 1, true, v); },
        get_dspTime: function() { return CS.Call(2, 207, 2, true); },
        set_dspTime: function(v) { return CS.Call(3, 207, 2, true, v); },
        get_outputSampleRate: function() { return CS.Call(2, 207, 3, true); },
        set_outputSampleRate: function(v) { return CS.Call(3, 207, 3, true, v); },
        GetDSPBufferSize: function(a0/*Int32&*/, a1/*Int32&*/) { 
            return CS.Call(4, 207, 0, true, a0, a1); //Ret: Void
        },
        SetDSPBufferSize: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 207, 1, true, a0, a1); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 207, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioSettings);

// UnityEngine.AudioClip
var UnityEngine$AudioClip = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioClip",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        Create$$String$$Int32$$Int32$$Int32$$Boolean$$Boolean$$PCMReaderCallback$$PCMSetPositionCallback: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Boolean*/, a5/*Boolean*/, a6/*PCMReaderCallback*/, a7/*PCMSetPositionCallback*/) { 
            return CS.Call(4, 208, 2, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: AudioClip
        },
        Create$$String$$Int32$$Int32$$Int32$$Boolean$$Boolean$$PCMReaderCallback: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Boolean*/, a5/*Boolean*/, a6/*PCMReaderCallback*/) { 
            return CS.Call(4, 208, 3, true, a0, a1, a2, a3, a4, a5, a6); //Ret: AudioClip
        },
        Create$$String$$Int32$$Int32$$Int32$$Boolean$$Boolean: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/, a4/*Boolean*/, a5/*Boolean*/) { 
            return CS.Call(4, 208, 4, true, a0, a1, a2, a3, a4, a5); //Ret: AudioClip
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 208, 0, true, this); },
        get_length: function() { return CS.Call(2, 208, 0, false, this); },
        set_length: function(v) { return CS.Call(3, 208, 0, false, this, v); },
        get_samples: function() { return CS.Call(2, 208, 1, false, this); },
        set_samples: function(v) { return CS.Call(3, 208, 1, false, this, v); },
        get_channels: function() { return CS.Call(2, 208, 2, false, this); },
        set_channels: function(v) { return CS.Call(3, 208, 2, false, this, v); },
        get_frequency: function() { return CS.Call(2, 208, 3, false, this); },
        set_frequency: function(v) { return CS.Call(3, 208, 3, false, this, v); },
        get_isReadyToPlay: function() { return CS.Call(2, 208, 4, false, this); },
        set_isReadyToPlay: function(v) { return CS.Call(3, 208, 4, false, this, v); },
        GetData: function(a0/*Single[]*/, a1/*Int32*/) { 
            return CS.Call(4, 208, 0, false, this, a0, a1); //Ret: Void
        },
        SetData: function(a0/*Single[]*/, a1/*Int32*/) { 
            return CS.Call(4, 208, 1, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioClip);

// UnityEngine.AudioListener
var UnityEngine$AudioListener = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioListener",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    staticDefinition: {
        get_volume: function() { return CS.Call(2, 209, 0, true); },
        set_volume: function(v) { return CS.Call(3, 209, 0, true, v); },
        get_pause: function() { return CS.Call(2, 209, 1, true); },
        set_pause: function(v) { return CS.Call(3, 209, 1, true, v); },
        GetOutputData$$Single$Array$$Int32: function(a0/*Single[]*/, a1/*Int32*/) { 
            return CS.Call(4, 209, 0, true, a0, a1); //Ret: Void
        },
        GetSpectrumData$$Single$Array$$Int32$$FFTWindow: function(a0/*Single[]*/, a1/*Int32*/, a2/*FFTWindow*/) { 
            return CS.Call(4, 209, 1, true, a0, a1, a2); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 209, 0, true, this); },
        get_velocityUpdateMode: function() { return CS.Call(2, 209, 2, false, this); },
        set_velocityUpdateMode: function(v) { return CS.Call(3, 209, 2, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioListener);

// UnityEngine.AudioSource
var UnityEngine$AudioSource = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioSource",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    staticDefinition: {
        PlayClipAtPoint$$AudioClip$$Vector3$$Single: function(a0/*AudioClip*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 210, 12, true, a0, a1, a2); //Ret: Void
        },
        PlayClipAtPoint$$AudioClip$$Vector3: function(a0/*AudioClip*/, a1/*Vector3*/) { 
            return CS.Call(4, 210, 13, true, a0, a1); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 210, 0, true, this); },
        get_volume: function() { return CS.Call(2, 210, 0, false, this); },
        set_volume: function(v) { return CS.Call(3, 210, 0, false, this, v); },
        get_pitch: function() { return CS.Call(2, 210, 1, false, this); },
        set_pitch: function(v) { return CS.Call(3, 210, 1, false, this, v); },
        get_time: function() { return CS.Call(2, 210, 2, false, this); },
        set_time: function(v) { return CS.Call(3, 210, 2, false, this, v); },
        get_timeSamples: function() { return CS.Call(2, 210, 3, false, this); },
        set_timeSamples: function(v) { return CS.Call(3, 210, 3, false, this, v); },
        get_clip: function() { return CS.Call(2, 210, 4, false, this); },
        set_clip: function(v) { return CS.Call(3, 210, 4, false, this, v); },
        get_isPlaying: function() { return CS.Call(2, 210, 5, false, this); },
        set_isPlaying: function(v) { return CS.Call(3, 210, 5, false, this, v); },
        get_loop: function() { return CS.Call(2, 210, 6, false, this); },
        set_loop: function(v) { return CS.Call(3, 210, 6, false, this, v); },
        get_ignoreListenerVolume: function() { return CS.Call(2, 210, 7, false, this); },
        set_ignoreListenerVolume: function(v) { return CS.Call(3, 210, 7, false, this, v); },
        get_playOnAwake: function() { return CS.Call(2, 210, 8, false, this); },
        set_playOnAwake: function(v) { return CS.Call(3, 210, 8, false, this, v); },
        get_ignoreListenerPause: function() { return CS.Call(2, 210, 9, false, this); },
        set_ignoreListenerPause: function(v) { return CS.Call(3, 210, 9, false, this, v); },
        get_velocityUpdateMode: function() { return CS.Call(2, 210, 10, false, this); },
        set_velocityUpdateMode: function(v) { return CS.Call(3, 210, 10, false, this, v); },
        get_panLevel: function() { return CS.Call(2, 210, 11, false, this); },
        set_panLevel: function(v) { return CS.Call(3, 210, 11, false, this, v); },
        get_bypassEffects: function() { return CS.Call(2, 210, 12, false, this); },
        set_bypassEffects: function(v) { return CS.Call(3, 210, 12, false, this, v); },
        get_bypassListenerEffects: function() { return CS.Call(2, 210, 13, false, this); },
        set_bypassListenerEffects: function(v) { return CS.Call(3, 210, 13, false, this, v); },
        get_bypassReverbZones: function() { return CS.Call(2, 210, 14, false, this); },
        set_bypassReverbZones: function(v) { return CS.Call(3, 210, 14, false, this, v); },
        get_dopplerLevel: function() { return CS.Call(2, 210, 15, false, this); },
        set_dopplerLevel: function(v) { return CS.Call(3, 210, 15, false, this, v); },
        get_spread: function() { return CS.Call(2, 210, 16, false, this); },
        set_spread: function(v) { return CS.Call(3, 210, 16, false, this, v); },
        get_priority: function() { return CS.Call(2, 210, 17, false, this); },
        set_priority: function(v) { return CS.Call(3, 210, 17, false, this, v); },
        get_mute: function() { return CS.Call(2, 210, 18, false, this); },
        set_mute: function(v) { return CS.Call(3, 210, 18, false, this, v); },
        get_minDistance: function() { return CS.Call(2, 210, 19, false, this); },
        set_minDistance: function(v) { return CS.Call(3, 210, 19, false, this, v); },
        get_maxDistance: function() { return CS.Call(2, 210, 20, false, this); },
        set_maxDistance: function(v) { return CS.Call(3, 210, 20, false, this, v); },
        get_pan: function() { return CS.Call(2, 210, 21, false, this); },
        set_pan: function(v) { return CS.Call(3, 210, 21, false, this, v); },
        get_rolloffMode: function() { return CS.Call(2, 210, 22, false, this); },
        set_rolloffMode: function(v) { return CS.Call(3, 210, 22, false, this, v); },
        GetOutputData$$Single$Array$$Int32: function(a0/*Single[]*/, a1/*Int32*/) { 
            return CS.Call(4, 210, 0, false, this, a0, a1); //Ret: Void
        },
        GetSpectrumData$$Single$Array$$Int32$$FFTWindow: function(a0/*Single[]*/, a1/*Int32*/, a2/*FFTWindow*/) { 
            return CS.Call(4, 210, 1, false, this, a0, a1, a2); //Ret: Void
        },
        Pause: function() { 
            return CS.Call(4, 210, 2, false, this); //Ret: Void
        },
        Play$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 210, 3, false, this, a0); //Ret: Void
        },
        Play: function() { 
            return CS.Call(4, 210, 4, false, this); //Ret: Void
        },
        PlayDelayed: function(a0/*Single*/) { 
            return CS.Call(4, 210, 5, false, this, a0); //Ret: Void
        },
        PlayOneShot$$AudioClip$$Single: function(a0/*AudioClip*/, a1/*Single*/) { 
            return CS.Call(4, 210, 6, false, this, a0, a1); //Ret: Void
        },
        PlayOneShot$$AudioClip: function(a0/*AudioClip*/) { 
            return CS.Call(4, 210, 7, false, this, a0); //Ret: Void
        },
        PlayScheduled: function(a0/*Double*/) { 
            return CS.Call(4, 210, 8, false, this, a0); //Ret: Void
        },
        SetScheduledEndTime: function(a0/*Double*/) { 
            return CS.Call(4, 210, 9, false, this, a0); //Ret: Void
        },
        SetScheduledStartTime: function(a0/*Double*/) { 
            return CS.Call(4, 210, 10, false, this, a0); //Ret: Void
        },
        Stop: function() { 
            return CS.Call(4, 210, 11, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioSource);

// UnityEngine.AudioReverbZone
var UnityEngine$AudioReverbZone = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioReverbZone",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 211, 0, true, this); },
        get_minDistance: function() { return CS.Call(2, 211, 0, false, this); },
        set_minDistance: function(v) { return CS.Call(3, 211, 0, false, this, v); },
        get_maxDistance: function() { return CS.Call(2, 211, 1, false, this); },
        set_maxDistance: function(v) { return CS.Call(3, 211, 1, false, this, v); },
        get_reverbPreset: function() { return CS.Call(2, 211, 2, false, this); },
        set_reverbPreset: function(v) { return CS.Call(3, 211, 2, false, this, v); },
        get_room: function() { return CS.Call(2, 211, 3, false, this); },
        set_room: function(v) { return CS.Call(3, 211, 3, false, this, v); },
        get_roomHF: function() { return CS.Call(2, 211, 4, false, this); },
        set_roomHF: function(v) { return CS.Call(3, 211, 4, false, this, v); },
        get_roomLF: function() { return CS.Call(2, 211, 5, false, this); },
        set_roomLF: function(v) { return CS.Call(3, 211, 5, false, this, v); },
        get_decayTime: function() { return CS.Call(2, 211, 6, false, this); },
        set_decayTime: function(v) { return CS.Call(3, 211, 6, false, this, v); },
        get_decayHFRatio: function() { return CS.Call(2, 211, 7, false, this); },
        set_decayHFRatio: function(v) { return CS.Call(3, 211, 7, false, this, v); },
        get_reflections: function() { return CS.Call(2, 211, 8, false, this); },
        set_reflections: function(v) { return CS.Call(3, 211, 8, false, this, v); },
        get_reflectionsDelay: function() { return CS.Call(2, 211, 9, false, this); },
        set_reflectionsDelay: function(v) { return CS.Call(3, 211, 9, false, this, v); },
        get_reverb: function() { return CS.Call(2, 211, 10, false, this); },
        set_reverb: function(v) { return CS.Call(3, 211, 10, false, this, v); },
        get_reverbDelay: function() { return CS.Call(2, 211, 11, false, this); },
        set_reverbDelay: function(v) { return CS.Call(3, 211, 11, false, this, v); },
        get_HFReference: function() { return CS.Call(2, 211, 12, false, this); },
        set_HFReference: function(v) { return CS.Call(3, 211, 12, false, this, v); },
        get_LFReference: function() { return CS.Call(2, 211, 13, false, this); },
        set_LFReference: function(v) { return CS.Call(3, 211, 13, false, this, v); },
        get_roomRolloffFactor: function() { return CS.Call(2, 211, 14, false, this); },
        set_roomRolloffFactor: function(v) { return CS.Call(3, 211, 14, false, this, v); },
        get_diffusion: function() { return CS.Call(2, 211, 15, false, this); },
        set_diffusion: function(v) { return CS.Call(3, 211, 15, false, this, v); },
        get_density: function() { return CS.Call(2, 211, 16, false, this); },
        set_density: function(v) { return CS.Call(3, 211, 16, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioReverbZone);

// UnityEngine.AudioLowPassFilter
var UnityEngine$AudioLowPassFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioLowPassFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 212, 0, true, this); },
        get_cutoffFrequency: function() { return CS.Call(2, 212, 0, false, this); },
        set_cutoffFrequency: function(v) { return CS.Call(3, 212, 0, false, this, v); },
        get_lowpassResonaceQ: function() { return CS.Call(2, 212, 1, false, this); },
        set_lowpassResonaceQ: function(v) { return CS.Call(3, 212, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioLowPassFilter);

// UnityEngine.AudioHighPassFilter
var UnityEngine$AudioHighPassFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioHighPassFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 213, 0, true, this); },
        get_cutoffFrequency: function() { return CS.Call(2, 213, 0, false, this); },
        set_cutoffFrequency: function(v) { return CS.Call(3, 213, 0, false, this, v); },
        get_highpassResonaceQ: function() { return CS.Call(2, 213, 1, false, this); },
        set_highpassResonaceQ: function(v) { return CS.Call(3, 213, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioHighPassFilter);

// UnityEngine.AudioDistortionFilter
var UnityEngine$AudioDistortionFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioDistortionFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 214, 0, true, this); },
        get_distortionLevel: function() { return CS.Call(2, 214, 0, false, this); },
        set_distortionLevel: function(v) { return CS.Call(3, 214, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioDistortionFilter);

// UnityEngine.AudioEchoFilter
var UnityEngine$AudioEchoFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioEchoFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 215, 0, true, this); },
        get_delay: function() { return CS.Call(2, 215, 0, false, this); },
        set_delay: function(v) { return CS.Call(3, 215, 0, false, this, v); },
        get_decayRatio: function() { return CS.Call(2, 215, 1, false, this); },
        set_decayRatio: function(v) { return CS.Call(3, 215, 1, false, this, v); },
        get_dryMix: function() { return CS.Call(2, 215, 2, false, this); },
        set_dryMix: function(v) { return CS.Call(3, 215, 2, false, this, v); },
        get_wetMix: function() { return CS.Call(2, 215, 3, false, this); },
        set_wetMix: function(v) { return CS.Call(3, 215, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioEchoFilter);

// UnityEngine.AudioChorusFilter
var UnityEngine$AudioChorusFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioChorusFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 216, 0, true, this); },
        get_dryMix: function() { return CS.Call(2, 216, 0, false, this); },
        set_dryMix: function(v) { return CS.Call(3, 216, 0, false, this, v); },
        get_wetMix1: function() { return CS.Call(2, 216, 1, false, this); },
        set_wetMix1: function(v) { return CS.Call(3, 216, 1, false, this, v); },
        get_wetMix2: function() { return CS.Call(2, 216, 2, false, this); },
        set_wetMix2: function(v) { return CS.Call(3, 216, 2, false, this, v); },
        get_wetMix3: function() { return CS.Call(2, 216, 3, false, this); },
        set_wetMix3: function(v) { return CS.Call(3, 216, 3, false, this, v); },
        get_delay: function() { return CS.Call(2, 216, 4, false, this); },
        set_delay: function(v) { return CS.Call(3, 216, 4, false, this, v); },
        get_rate: function() { return CS.Call(2, 216, 5, false, this); },
        set_rate: function(v) { return CS.Call(3, 216, 5, false, this, v); },
        get_depth: function() { return CS.Call(2, 216, 6, false, this); },
        set_depth: function(v) { return CS.Call(3, 216, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioChorusFilter);

// UnityEngine.AudioReverbFilter
var UnityEngine$AudioReverbFilter = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AudioReverbFilter",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    definition: {
        ctor: function() { CS.Call(5, 217, 0, true, this); },
        get_reverbPreset: function() { return CS.Call(2, 217, 0, false, this); },
        set_reverbPreset: function(v) { return CS.Call(3, 217, 0, false, this, v); },
        get_dryLevel: function() { return CS.Call(2, 217, 1, false, this); },
        set_dryLevel: function(v) { return CS.Call(3, 217, 1, false, this, v); },
        get_room: function() { return CS.Call(2, 217, 2, false, this); },
        set_room: function(v) { return CS.Call(3, 217, 2, false, this, v); },
        get_roomHF: function() { return CS.Call(2, 217, 3, false, this); },
        set_roomHF: function(v) { return CS.Call(3, 217, 3, false, this, v); },
        get_roomRolloff: function() { return CS.Call(2, 217, 4, false, this); },
        set_roomRolloff: function(v) { return CS.Call(3, 217, 4, false, this, v); },
        get_decayTime: function() { return CS.Call(2, 217, 5, false, this); },
        set_decayTime: function(v) { return CS.Call(3, 217, 5, false, this, v); },
        get_decayHFRatio: function() { return CS.Call(2, 217, 6, false, this); },
        set_decayHFRatio: function(v) { return CS.Call(3, 217, 6, false, this, v); },
        get_reflectionsLevel: function() { return CS.Call(2, 217, 7, false, this); },
        set_reflectionsLevel: function(v) { return CS.Call(3, 217, 7, false, this, v); },
        get_reflectionsDelay: function() { return CS.Call(2, 217, 8, false, this); },
        set_reflectionsDelay: function(v) { return CS.Call(3, 217, 8, false, this, v); },
        get_reverbLevel: function() { return CS.Call(2, 217, 9, false, this); },
        set_reverbLevel: function(v) { return CS.Call(3, 217, 9, false, this, v); },
        get_reverbDelay: function() { return CS.Call(2, 217, 10, false, this); },
        set_reverbDelay: function(v) { return CS.Call(3, 217, 10, false, this, v); },
        get_diffusion: function() { return CS.Call(2, 217, 11, false, this); },
        set_diffusion: function(v) { return CS.Call(3, 217, 11, false, this, v); },
        get_density: function() { return CS.Call(2, 217, 12, false, this); },
        set_density: function(v) { return CS.Call(3, 217, 12, false, this, v); },
        get_hfReference: function() { return CS.Call(2, 217, 13, false, this); },
        set_hfReference: function(v) { return CS.Call(3, 217, 13, false, this, v); },
        get_roomLF: function() { return CS.Call(2, 217, 14, false, this); },
        set_roomLF: function(v) { return CS.Call(3, 217, 14, false, this, v); },
        get_lFReference: function() { return CS.Call(2, 217, 15, false, this); },
        set_lFReference: function(v) { return CS.Call(3, 217, 15, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AudioReverbFilter);

// UnityEngine.Microphone
var UnityEngine$Microphone = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Microphone",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        get_devices: function() { return CS.Call(2, 218, 0, true); },
        set_devices: function(v) { return CS.Call(3, 218, 0, true, v); },
        End: function(a0/*String*/) { 
            return CS.Call(4, 218, 0, true, a0); //Ret: Void
        },
        GetDeviceCaps: function(a0/*String*/, a1/*Int32&*/, a2/*Int32&*/) { 
            return CS.Call(4, 218, 1, true, a0, a1, a2); //Ret: Void
        },
        GetPosition: function(a0/*String*/) { 
            return CS.Call(4, 218, 2, true, a0); //Ret: Int32
        },
        IsRecording: function(a0/*String*/) { 
            return CS.Call(4, 218, 3, true, a0); //Ret: Boolean
        },
        Start: function(a0/*String*/, a1/*Boolean*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 218, 4, true, a0, a1, a2, a3); //Ret: AudioClip
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 218, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Microphone);

// UnityEngine.WebCamDevice
var UnityEngine$WebCamDevice = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WebCamDevice",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 219, 0, true, this); },
        get_name: function() { return CS.Call(2, 219, 0, false, this); },
        set_name: function(v) { return CS.Call(3, 219, 0, false, this, v); },
        get_isFrontFacing: function() { return CS.Call(2, 219, 1, false, this); },
        set_isFrontFacing: function(v) { return CS.Call(3, 219, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WebCamDevice);

// UnityEngine.WebCamTexture
var UnityEngine$WebCamTexture = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.WebCamTexture",
    Kind: "Class",
    baseTypeName: "UnityEngine.Texture",
    staticDefinition: {
        get_devices: function() { return CS.Call(2, 220, 5, true); },
        set_devices: function(v) { return CS.Call(3, 220, 5, true, v); },
    },
    definition: {
        ctor$$String$$Int32$$Int32$$Int32: function(a0, a1, a2, a3) { CS.Call(5, 220, 0, true, this, a0, a1, a2, a3); },
        ctor$$String$$Int32$$Int32: function(a0, a1, a2) { CS.Call(5, 220, 1, true, this, a0, a1, a2); },
        ctor$$String: function(a0) { CS.Call(5, 220, 2, true, this, a0); },
        ctor$$Int32$$Int32$$Int32: function(a0, a1, a2) { CS.Call(5, 220, 3, true, this, a0, a1, a2); },
        ctor$$Int32$$Int32: function(a0, a1) { CS.Call(5, 220, 4, true, this, a0, a1); },
        ctor: function() { CS.Call(5, 220, 5, true, this); },
        get_isPlaying: function() { return CS.Call(2, 220, 0, false, this); },
        set_isPlaying: function(v) { return CS.Call(3, 220, 0, false, this, v); },
        get_deviceName: function() { return CS.Call(2, 220, 1, false, this); },
        set_deviceName: function(v) { return CS.Call(3, 220, 1, false, this, v); },
        get_requestedFPS: function() { return CS.Call(2, 220, 2, false, this); },
        set_requestedFPS: function(v) { return CS.Call(3, 220, 2, false, this, v); },
        get_requestedWidth: function() { return CS.Call(2, 220, 3, false, this); },
        set_requestedWidth: function(v) { return CS.Call(3, 220, 3, false, this, v); },
        get_requestedHeight: function() { return CS.Call(2, 220, 4, false, this); },
        set_requestedHeight: function(v) { return CS.Call(3, 220, 4, false, this, v); },
        get_videoRotationAngle: function() { return CS.Call(2, 220, 6, false, this); },
        set_videoRotationAngle: function(v) { return CS.Call(3, 220, 6, false, this, v); },
        get_videoVerticallyMirrored: function() { return CS.Call(2, 220, 7, false, this); },
        set_videoVerticallyMirrored: function(v) { return CS.Call(3, 220, 7, false, this, v); },
        get_didUpdateThisFrame: function() { return CS.Call(2, 220, 8, false, this); },
        set_didUpdateThisFrame: function(v) { return CS.Call(3, 220, 8, false, this, v); },
        GetPixel: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 220, 0, false, this, a0, a1); //Ret: Color
        },
        GetPixels$$Int32$$Int32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 220, 1, false, this, a0, a1, a2, a3); //Ret: Color[]
        },
        GetPixels: function() { 
            return CS.Call(4, 220, 2, false, this); //Ret: Color[]
        },
        GetPixels32$$Color32$Array: function(a0/*Color32[]*/) { 
            return CS.Call(4, 220, 3, false, this, a0); //Ret: Color32[]
        },
        GetPixels32: function() { 
            return CS.Call(4, 220, 4, false, this); //Ret: Color32[]
        },
        Pause: function() { 
            return CS.Call(4, 220, 5, false, this); //Ret: Void
        },
        Play: function() { 
            return CS.Call(4, 220, 6, false, this); //Ret: Void
        },
        Stop: function() { 
            return CS.Call(4, 220, 7, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$WebCamTexture);

// UnityEngine.AnimationClipPair
var UnityEngine$AnimationClipPair = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimationClipPair",
    Kind: "Class",
    baseTypeName: "System.Object",
    fields: {
        originalClip: {
            get: function() { return CS.Call(0, 221, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 221, 0, false, this, v); }
        },
        overrideClip: {
            get: function() { return CS.Call(0, 221, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 221, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 221, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimationClipPair);

// UnityEngine.AnimatorOverrideController
var UnityEngine$AnimatorOverrideController = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimatorOverrideController",
    Kind: "Class",
    baseTypeName: "UnityEngine.RuntimeAnimatorController",
    definition: {
        ctor: function() { CS.Call(5, 222, 0, true, this); },
        get_runtimeAnimatorController: function() { return CS.Call(2, 222, 0, false, this); },
        set_runtimeAnimatorController: function(v) { return CS.Call(3, 222, 0, false, this, v); },
        get_Item$$String: function(ind0) { return CS.Call(2, 222, 1, false, this, ind0); },
        set_Item$$String: function(ind0, v) { return CS.Call(3, 222, 1, false, this, ind0, v); },
        get_Item$$AnimationClip: function(ind0) { return CS.Call(2, 222, 2, false, this, ind0); },
        set_Item$$AnimationClip: function(ind0, v) { return CS.Call(3, 222, 2, false, this, ind0, v); },
        get_clips: function() { return CS.Call(2, 222, 3, false, this); },
        set_clips: function(v) { return CS.Call(3, 222, 3, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimatorOverrideController);

// UnityEngine.AnimationEvent
var UnityEngine$AnimationEvent = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimationEvent",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 223, 0, true, this); },
        get_stringParameter: function() { return CS.Call(2, 223, 0, false, this); },
        set_stringParameter: function(v) { return CS.Call(3, 223, 0, false, this, v); },
        get_floatParameter: function() { return CS.Call(2, 223, 1, false, this); },
        set_floatParameter: function(v) { return CS.Call(3, 223, 1, false, this, v); },
        get_intParameter: function() { return CS.Call(2, 223, 2, false, this); },
        set_intParameter: function(v) { return CS.Call(3, 223, 2, false, this, v); },
        get_objectReferenceParameter: function() { return CS.Call(2, 223, 3, false, this); },
        set_objectReferenceParameter: function(v) { return CS.Call(3, 223, 3, false, this, v); },
        get_functionName: function() { return CS.Call(2, 223, 4, false, this); },
        set_functionName: function(v) { return CS.Call(3, 223, 4, false, this, v); },
        get_time: function() { return CS.Call(2, 223, 5, false, this); },
        set_time: function(v) { return CS.Call(3, 223, 5, false, this, v); },
        get_messageOptions: function() { return CS.Call(2, 223, 6, false, this); },
        set_messageOptions: function(v) { return CS.Call(3, 223, 6, false, this, v); },
        get_animationState: function() { return CS.Call(2, 223, 7, false, this); },
        set_animationState: function(v) { return CS.Call(3, 223, 7, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimationEvent);

// UnityEngine.AnimationClip
var UnityEngine$AnimationClip = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimationClip",
    Kind: "Class",
    baseTypeName: "UnityEngine.Motion",
    definition: {
        ctor: function() { CS.Call(5, 224, 0, true, this); },
        get_length: function() { return CS.Call(2, 224, 0, false, this); },
        set_length: function(v) { return CS.Call(3, 224, 0, false, this, v); },
        get_frameRate: function() { return CS.Call(2, 224, 1, false, this); },
        set_frameRate: function(v) { return CS.Call(3, 224, 1, false, this, v); },
        get_wrapMode: function() { return CS.Call(2, 224, 2, false, this); },
        set_wrapMode: function(v) { return CS.Call(3, 224, 2, false, this, v); },
        get_localBounds: function() { return CS.Call(2, 224, 3, false, this); },
        set_localBounds: function(v) { return CS.Call(3, 224, 3, false, this, v); },
        AddEvent: function(a0/*AnimationEvent*/) { 
            return CS.Call(4, 224, 0, false, this, a0); //Ret: Void
        },
        ClearCurves: function() { 
            return CS.Call(4, 224, 1, false, this); //Ret: Void
        },
        EnsureQuaternionContinuity: function() { 
            return CS.Call(4, 224, 2, false, this); //Ret: Void
        },
        SetCurve: function(a0/*String*/, a1/*Type*/, a2/*String*/, a3/*AnimationCurve*/) { 
            return CS.Call(4, 224, 3, false, this, a0, a1.get_FullName(), a2, a3); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimationClip);

// UnityEngine.Keyframe
var UnityEngine$Keyframe = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Keyframe",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 225, 0, true, this); },
        ctor$$Single$$Single: function(a0, a1) { CS.Call(5, 225, 1, true, this, a0, a1); },
        ctor$$Single$$Single$$Single$$Single: function(a0, a1, a2, a3) { CS.Call(5, 225, 2, true, this, a0, a1, a2, a3); },
        get_time: function() { return CS.Call(2, 225, 0, false, this); },
        set_time: function(v) { return CS.Call(3, 225, 0, false, this, v); },
        get_value: function() { return CS.Call(2, 225, 1, false, this); },
        set_value: function(v) { return CS.Call(3, 225, 1, false, this, v); },
        get_inTangent: function() { return CS.Call(2, 225, 2, false, this); },
        set_inTangent: function(v) { return CS.Call(3, 225, 2, false, this, v); },
        get_outTangent: function() { return CS.Call(2, 225, 3, false, this); },
        set_outTangent: function(v) { return CS.Call(3, 225, 3, false, this, v); },
        get_tangentMode: function() { return CS.Call(2, 225, 4, false, this); },
        set_tangentMode: function(v) { return CS.Call(3, 225, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Keyframe);

// UnityEngine.AnimationCurve
var UnityEngine$AnimationCurve = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimationCurve",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        EaseInOut: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 226, 6, true, a0, a1, a2, a3); //Ret: AnimationCurve
        },
        Linear: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 226, 7, true, a0, a1, a2, a3); //Ret: AnimationCurve
        },
    },
    definition: {
        ctor$$Keyframe$Array: function(a0) { CS.Call(5, 226, 0, true, this, a0); },
        ctor: function() { CS.Call(5, 226, 1, true, this); },
        get_keys: function() { return CS.Call(2, 226, 0, false, this); },
        set_keys: function(v) { return CS.Call(3, 226, 0, false, this, v); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 226, 1, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 226, 1, false, this, ind0, v); },
        get_length: function() { return CS.Call(2, 226, 2, false, this); },
        set_length: function(v) { return CS.Call(3, 226, 2, false, this, v); },
        get_preWrapMode: function() { return CS.Call(2, 226, 3, false, this); },
        set_preWrapMode: function(v) { return CS.Call(3, 226, 3, false, this, v); },
        get_postWrapMode: function() { return CS.Call(2, 226, 4, false, this); },
        set_postWrapMode: function(v) { return CS.Call(3, 226, 4, false, this, v); },
        AddKey$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 226, 0, false, this, a0, a1); //Ret: Int32
        },
        AddKey$$Keyframe: function(a0/*Keyframe*/) { 
            return CS.Call(4, 226, 1, false, this, a0); //Ret: Int32
        },
        Evaluate: function(a0/*Single*/) { 
            return CS.Call(4, 226, 2, false, this, a0); //Ret: Single
        },
        MoveKey: function(a0/*Int32*/, a1/*Keyframe*/) { 
            return CS.Call(4, 226, 3, false, this, a0, a1); //Ret: Int32
        },
        RemoveKey: function(a0/*Int32*/) { 
            return CS.Call(4, 226, 4, false, this, a0); //Ret: Void
        },
        SmoothTangents: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 226, 5, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimationCurve);

// UnityEngine.Animation
var UnityEngine$Animation = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Animation",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    interfaceNames: ["System.Collections.IEnumerable"],
    definition: {
        ctor: function() { CS.Call(5, 227, 0, true, this); },
        get_clip: function() { return CS.Call(2, 227, 0, false, this); },
        set_clip: function(v) { return CS.Call(3, 227, 0, false, this, v); },
        get_playAutomatically: function() { return CS.Call(2, 227, 1, false, this); },
        set_playAutomatically: function(v) { return CS.Call(3, 227, 1, false, this, v); },
        get_wrapMode: function() { return CS.Call(2, 227, 2, false, this); },
        set_wrapMode: function(v) { return CS.Call(3, 227, 2, false, this, v); },
        get_isPlaying: function() { return CS.Call(2, 227, 3, false, this); },
        set_isPlaying: function(v) { return CS.Call(3, 227, 3, false, this, v); },
        get_Item$$String: function(ind0) { return CS.Call(2, 227, 4, false, this, ind0); },
        set_Item$$String: function(ind0, v) { return CS.Call(3, 227, 4, false, this, ind0, v); },
        get_animatePhysics: function() { return CS.Call(2, 227, 5, false, this); },
        set_animatePhysics: function(v) { return CS.Call(3, 227, 5, false, this, v); },
        get_cullingType: function() { return CS.Call(2, 227, 6, false, this); },
        set_cullingType: function(v) { return CS.Call(3, 227, 6, false, this, v); },
        get_localBounds: function() { return CS.Call(2, 227, 7, false, this); },
        set_localBounds: function(v) { return CS.Call(3, 227, 7, false, this, v); },
        AddClip$$AnimationClip$$String$$Int32$$Int32$$Boolean: function(a0/*AnimationClip*/, a1/*String*/, a2/*Int32*/, a3/*Int32*/, a4/*Boolean*/) { 
            return CS.Call(4, 227, 0, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        AddClip$$AnimationClip$$String$$Int32$$Int32: function(a0/*AnimationClip*/, a1/*String*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 227, 1, false, this, a0, a1, a2, a3); //Ret: Void
        },
        AddClip$$AnimationClip$$String: function(a0/*AnimationClip*/, a1/*String*/) { 
            return CS.Call(4, 227, 2, false, this, a0, a1); //Ret: Void
        },
        Blend$$String$$Single$$Single: function(a0/*String*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 227, 3, false, this, a0, a1, a2); //Ret: Void
        },
        Blend$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 227, 4, false, this, a0, a1); //Ret: Void
        },
        Blend$$String: function(a0/*String*/) { 
            return CS.Call(4, 227, 5, false, this, a0); //Ret: Void
        },
        CrossFade$$String$$Single$$PlayMode: function(a0/*String*/, a1/*Single*/, a2/*PlayMode*/) { 
            return CS.Call(4, 227, 6, false, this, a0, a1, a2); //Ret: Void
        },
        CrossFade$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 227, 7, false, this, a0, a1); //Ret: Void
        },
        CrossFade$$String: function(a0/*String*/) { 
            return CS.Call(4, 227, 8, false, this, a0); //Ret: Void
        },
        CrossFadeQueued$$String$$Single$$QueueMode$$PlayMode: function(a0/*String*/, a1/*Single*/, a2/*QueueMode*/, a3/*PlayMode*/) { 
            return CS.Call(4, 227, 9, false, this, a0, a1, a2, a3); //Ret: AnimationState
        },
        CrossFadeQueued$$String$$Single$$QueueMode: function(a0/*String*/, a1/*Single*/, a2/*QueueMode*/) { 
            return CS.Call(4, 227, 10, false, this, a0, a1, a2); //Ret: AnimationState
        },
        CrossFadeQueued$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 227, 11, false, this, a0, a1); //Ret: AnimationState
        },
        CrossFadeQueued$$String: function(a0/*String*/) { 
            return CS.Call(4, 227, 12, false, this, a0); //Ret: AnimationState
        },
        GetClip: function(a0/*String*/) { 
            return CS.Call(4, 227, 13, false, this, a0); //Ret: AnimationClip
        },
        GetClipCount: function() { 
            return CS.Call(4, 227, 14, false, this); //Ret: Int32
        },
        GetEnumerator: function() { 
            return CS.Call(4, 227, 15, false, this); //Ret: IEnumerator
        },
        IsPlaying: function(a0/*String*/) { 
            return CS.Call(4, 227, 16, false, this, a0); //Ret: Boolean
        },
        Play$$String$$PlayMode: function(a0/*String*/, a1/*PlayMode*/) { 
            return CS.Call(4, 227, 17, false, this, a0, a1); //Ret: Boolean
        },
        Play$$String: function(a0/*String*/) { 
            return CS.Call(4, 227, 18, false, this, a0); //Ret: Boolean
        },
        Play$$PlayMode: function(a0/*PlayMode*/) { 
            return CS.Call(4, 227, 19, false, this, a0); //Ret: Boolean
        },
        Play: function() { 
            return CS.Call(4, 227, 20, false, this); //Ret: Boolean
        },
        PlayQueued$$String$$QueueMode$$PlayMode: function(a0/*String*/, a1/*QueueMode*/, a2/*PlayMode*/) { 
            return CS.Call(4, 227, 21, false, this, a0, a1, a2); //Ret: AnimationState
        },
        PlayQueued$$String$$QueueMode: function(a0/*String*/, a1/*QueueMode*/) { 
            return CS.Call(4, 227, 22, false, this, a0, a1); //Ret: AnimationState
        },
        PlayQueued$$String: function(a0/*String*/) { 
            return CS.Call(4, 227, 23, false, this, a0); //Ret: AnimationState
        },
        RemoveClip$$AnimationClip: function(a0/*AnimationClip*/) { 
            return CS.Call(4, 227, 24, false, this, a0); //Ret: Void
        },
        RemoveClip$$String: function(a0/*String*/) { 
            return CS.Call(4, 227, 25, false, this, a0); //Ret: Void
        },
        Rewind$$String: function(a0/*String*/) { 
            return CS.Call(4, 227, 26, false, this, a0); //Ret: Void
        },
        Rewind: function() { 
            return CS.Call(4, 227, 27, false, this); //Ret: Void
        },
        Sample: function() { 
            return CS.Call(4, 227, 28, false, this); //Ret: Void
        },
        Stop$$String: function(a0/*String*/) { 
            return CS.Call(4, 227, 29, false, this, a0); //Ret: Void
        },
        Stop: function() { 
            return CS.Call(4, 227, 30, false, this); //Ret: Void
        },
        SyncLayer: function(a0/*Int32*/) { 
            return CS.Call(4, 227, 31, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Animation);

// UnityEngine.AnimationState
var UnityEngine$AnimationState = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimationState",
    Kind: "Class",
    baseTypeName: "UnityEngine.TrackedReference",
    definition: {
        ctor: function() { CS.Call(5, 228, 0, true, this); },
        get_enabled: function() { return CS.Call(2, 228, 0, false, this); },
        set_enabled: function(v) { return CS.Call(3, 228, 0, false, this, v); },
        get_weight: function() { return CS.Call(2, 228, 1, false, this); },
        set_weight: function(v) { return CS.Call(3, 228, 1, false, this, v); },
        get_wrapMode: function() { return CS.Call(2, 228, 2, false, this); },
        set_wrapMode: function(v) { return CS.Call(3, 228, 2, false, this, v); },
        get_time: function() { return CS.Call(2, 228, 3, false, this); },
        set_time: function(v) { return CS.Call(3, 228, 3, false, this, v); },
        get_normalizedTime: function() { return CS.Call(2, 228, 4, false, this); },
        set_normalizedTime: function(v) { return CS.Call(3, 228, 4, false, this, v); },
        get_speed: function() { return CS.Call(2, 228, 5, false, this); },
        set_speed: function(v) { return CS.Call(3, 228, 5, false, this, v); },
        get_normalizedSpeed: function() { return CS.Call(2, 228, 6, false, this); },
        set_normalizedSpeed: function(v) { return CS.Call(3, 228, 6, false, this, v); },
        get_length: function() { return CS.Call(2, 228, 7, false, this); },
        set_length: function(v) { return CS.Call(3, 228, 7, false, this, v); },
        get_layer: function() { return CS.Call(2, 228, 8, false, this); },
        set_layer: function(v) { return CS.Call(3, 228, 8, false, this, v); },
        get_clip: function() { return CS.Call(2, 228, 9, false, this); },
        set_clip: function(v) { return CS.Call(3, 228, 9, false, this, v); },
        get_name: function() { return CS.Call(2, 228, 10, false, this); },
        set_name: function(v) { return CS.Call(3, 228, 10, false, this, v); },
        get_blendMode: function() { return CS.Call(2, 228, 11, false, this); },
        set_blendMode: function(v) { return CS.Call(3, 228, 11, false, this, v); },
        AddMixingTransform$$Transform$$Boolean: function(a0/*Transform*/, a1/*Boolean*/) { 
            return CS.Call(4, 228, 0, false, this, a0, a1); //Ret: Void
        },
        AddMixingTransform$$Transform: function(a0/*Transform*/) { 
            return CS.Call(4, 228, 1, false, this, a0); //Ret: Void
        },
        RemoveMixingTransform: function(a0/*Transform*/) { 
            return CS.Call(4, 228, 2, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimationState);

// UnityEngine.AnimationInfo
var UnityEngine$AnimationInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimationInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 229, 0, true, this); },
        get_clip: function() { return CS.Call(2, 229, 0, false, this); },
        set_clip: function(v) { return CS.Call(3, 229, 0, false, this, v); },
        get_weight: function() { return CS.Call(2, 229, 1, false, this); },
        set_weight: function(v) { return CS.Call(3, 229, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimationInfo);

// UnityEngine.AnimatorStateInfo
var UnityEngine$AnimatorStateInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimatorStateInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 230, 0, true, this); },
        get_nameHash: function() { return CS.Call(2, 230, 0, false, this); },
        set_nameHash: function(v) { return CS.Call(3, 230, 0, false, this, v); },
        get_normalizedTime: function() { return CS.Call(2, 230, 1, false, this); },
        set_normalizedTime: function(v) { return CS.Call(3, 230, 1, false, this, v); },
        get_length: function() { return CS.Call(2, 230, 2, false, this); },
        set_length: function(v) { return CS.Call(3, 230, 2, false, this, v); },
        get_tagHash: function() { return CS.Call(2, 230, 3, false, this); },
        set_tagHash: function(v) { return CS.Call(3, 230, 3, false, this, v); },
        get_loop: function() { return CS.Call(2, 230, 4, false, this); },
        set_loop: function(v) { return CS.Call(3, 230, 4, false, this, v); },
        IsName: function(a0/*String*/) { 
            return CS.Call(4, 230, 0, false, this, a0); //Ret: Boolean
        },
        IsTag: function(a0/*String*/) { 
            return CS.Call(4, 230, 1, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimatorStateInfo);

// UnityEngine.AnimatorTransitionInfo
var UnityEngine$AnimatorTransitionInfo = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimatorTransitionInfo",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 231, 0, true, this); },
        get_nameHash: function() { return CS.Call(2, 231, 0, false, this); },
        set_nameHash: function(v) { return CS.Call(3, 231, 0, false, this, v); },
        get_userNameHash: function() { return CS.Call(2, 231, 1, false, this); },
        set_userNameHash: function(v) { return CS.Call(3, 231, 1, false, this, v); },
        get_normalizedTime: function() { return CS.Call(2, 231, 2, false, this); },
        set_normalizedTime: function(v) { return CS.Call(3, 231, 2, false, this, v); },
        IsName: function(a0/*String*/) { 
            return CS.Call(4, 231, 0, false, this, a0); //Ret: Boolean
        },
        IsUserName: function(a0/*String*/) { 
            return CS.Call(4, 231, 1, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimatorTransitionInfo);

// UnityEngine.MatchTargetWeightMask
var UnityEngine$MatchTargetWeightMask = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.MatchTargetWeightMask",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 232, 0, true, this); },
        ctor$$Vector3$$Single: function(a0, a1) { CS.Call(5, 232, 1, true, this, a0, a1); },
        get_positionXYZWeight: function() { return CS.Call(2, 232, 0, false, this); },
        set_positionXYZWeight: function(v) { return CS.Call(3, 232, 0, false, this, v); },
        get_rotationWeight: function() { return CS.Call(2, 232, 1, false, this); },
        set_rotationWeight: function(v) { return CS.Call(3, 232, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$MatchTargetWeightMask);

// UnityEngine.Animator
var UnityEngine$Animator = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Animator",
    Kind: "Class",
    baseTypeName: "UnityEngine.Behaviour",
    staticDefinition: {
        StringToHash: function(a0/*String*/) { 
            return CS.Call(4, 233, 67, true, a0); //Ret: Int32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 233, 0, true, this); },
        get_isOptimizable: function() { return CS.Call(2, 233, 0, false, this); },
        set_isOptimizable: function(v) { return CS.Call(3, 233, 0, false, this, v); },
        get_isHuman: function() { return CS.Call(2, 233, 1, false, this); },
        set_isHuman: function(v) { return CS.Call(3, 233, 1, false, this, v); },
        get_hasRootMotion: function() { return CS.Call(2, 233, 2, false, this); },
        set_hasRootMotion: function(v) { return CS.Call(3, 233, 2, false, this, v); },
        get_humanScale: function() { return CS.Call(2, 233, 3, false, this); },
        set_humanScale: function(v) { return CS.Call(3, 233, 3, false, this, v); },
        get_deltaPosition: function() { return CS.Call(2, 233, 4, false, this); },
        set_deltaPosition: function(v) { return CS.Call(3, 233, 4, false, this, v); },
        get_deltaRotation: function() { return CS.Call(2, 233, 5, false, this); },
        set_deltaRotation: function(v) { return CS.Call(3, 233, 5, false, this, v); },
        get_rootPosition: function() { return CS.Call(2, 233, 6, false, this); },
        set_rootPosition: function(v) { return CS.Call(3, 233, 6, false, this, v); },
        get_rootRotation: function() { return CS.Call(2, 233, 7, false, this); },
        set_rootRotation: function(v) { return CS.Call(3, 233, 7, false, this, v); },
        get_applyRootMotion: function() { return CS.Call(2, 233, 8, false, this); },
        set_applyRootMotion: function(v) { return CS.Call(3, 233, 8, false, this, v); },
        get_updateMode: function() { return CS.Call(2, 233, 9, false, this); },
        set_updateMode: function(v) { return CS.Call(3, 233, 9, false, this, v); },
        get_hasTransformHierarchy: function() { return CS.Call(2, 233, 10, false, this); },
        set_hasTransformHierarchy: function(v) { return CS.Call(3, 233, 10, false, this, v); },
        get_gravityWeight: function() { return CS.Call(2, 233, 11, false, this); },
        set_gravityWeight: function(v) { return CS.Call(3, 233, 11, false, this, v); },
        get_bodyPosition: function() { return CS.Call(2, 233, 12, false, this); },
        set_bodyPosition: function(v) { return CS.Call(3, 233, 12, false, this, v); },
        get_bodyRotation: function() { return CS.Call(2, 233, 13, false, this); },
        set_bodyRotation: function(v) { return CS.Call(3, 233, 13, false, this, v); },
        get_stabilizeFeet: function() { return CS.Call(2, 233, 14, false, this); },
        set_stabilizeFeet: function(v) { return CS.Call(3, 233, 14, false, this, v); },
        get_layerCount: function() { return CS.Call(2, 233, 15, false, this); },
        set_layerCount: function(v) { return CS.Call(3, 233, 15, false, this, v); },
        get_feetPivotActive: function() { return CS.Call(2, 233, 16, false, this); },
        set_feetPivotActive: function(v) { return CS.Call(3, 233, 16, false, this, v); },
        get_pivotWeight: function() { return CS.Call(2, 233, 17, false, this); },
        set_pivotWeight: function(v) { return CS.Call(3, 233, 17, false, this, v); },
        get_pivotPosition: function() { return CS.Call(2, 233, 18, false, this); },
        set_pivotPosition: function(v) { return CS.Call(3, 233, 18, false, this, v); },
        get_isMatchingTarget: function() { return CS.Call(2, 233, 19, false, this); },
        set_isMatchingTarget: function(v) { return CS.Call(3, 233, 19, false, this, v); },
        get_speed: function() { return CS.Call(2, 233, 20, false, this); },
        set_speed: function(v) { return CS.Call(3, 233, 20, false, this, v); },
        get_targetPosition: function() { return CS.Call(2, 233, 21, false, this); },
        set_targetPosition: function(v) { return CS.Call(3, 233, 21, false, this, v); },
        get_targetRotation: function() { return CS.Call(2, 233, 22, false, this); },
        set_targetRotation: function(v) { return CS.Call(3, 233, 22, false, this, v); },
        get_cullingMode: function() { return CS.Call(2, 233, 23, false, this); },
        set_cullingMode: function(v) { return CS.Call(3, 233, 23, false, this, v); },
        get_playbackTime: function() { return CS.Call(2, 233, 24, false, this); },
        set_playbackTime: function(v) { return CS.Call(3, 233, 24, false, this, v); },
        get_recorderStartTime: function() { return CS.Call(2, 233, 25, false, this); },
        set_recorderStartTime: function(v) { return CS.Call(3, 233, 25, false, this, v); },
        get_recorderStopTime: function() { return CS.Call(2, 233, 26, false, this); },
        set_recorderStopTime: function(v) { return CS.Call(3, 233, 26, false, this, v); },
        get_runtimeAnimatorController: function() { return CS.Call(2, 233, 27, false, this); },
        set_runtimeAnimatorController: function(v) { return CS.Call(3, 233, 27, false, this, v); },
        get_avatar: function() { return CS.Call(2, 233, 28, false, this); },
        set_avatar: function(v) { return CS.Call(3, 233, 28, false, this, v); },
        get_layersAffectMassCenter: function() { return CS.Call(2, 233, 29, false, this); },
        set_layersAffectMassCenter: function(v) { return CS.Call(3, 233, 29, false, this, v); },
        get_leftFeetBottomHeight: function() { return CS.Call(2, 233, 30, false, this); },
        set_leftFeetBottomHeight: function(v) { return CS.Call(3, 233, 30, false, this, v); },
        get_rightFeetBottomHeight: function() { return CS.Call(2, 233, 31, false, this); },
        set_rightFeetBottomHeight: function(v) { return CS.Call(3, 233, 31, false, this, v); },
        get_logWarnings: function() { return CS.Call(2, 233, 32, false, this); },
        set_logWarnings: function(v) { return CS.Call(3, 233, 32, false, this, v); },
        get_fireEvents: function() { return CS.Call(2, 233, 33, false, this); },
        set_fireEvents: function(v) { return CS.Call(3, 233, 33, false, this, v); },
        CrossFade$$String$$Single$$Int32$$Single: function(a0/*String*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 233, 0, false, this, a0, a1, a2, a3); //Ret: Void
        },
        CrossFade$$Int32$$Single$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 233, 1, false, this, a0, a1, a2, a3); //Ret: Void
        },
        CrossFade$$String$$Single$$Int32: function(a0/*String*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 233, 2, false, this, a0, a1, a2); //Ret: Void
        },
        CrossFade$$Int32$$Single$$Int32: function(a0/*Int32*/, a1/*Single*/, a2/*Int32*/) { 
            return CS.Call(4, 233, 3, false, this, a0, a1, a2); //Ret: Void
        },
        CrossFade$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 233, 4, false, this, a0, a1); //Ret: Void
        },
        CrossFade$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 233, 5, false, this, a0, a1); //Ret: Void
        },
        GetAnimatorTransitionInfo: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 6, false, this, a0); //Ret: AnimatorTransitionInfo
        },
        GetBoneTransform: function(a0/*HumanBodyBones*/) { 
            return CS.Call(4, 233, 7, false, this, a0); //Ret: Transform
        },
        GetBool$$String: function(a0/*String*/) { 
            return CS.Call(4, 233, 8, false, this, a0); //Ret: Boolean
        },
        GetBool$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 9, false, this, a0); //Ret: Boolean
        },
        GetCurrentAnimationClipState: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 10, false, this, a0); //Ret: AnimationInfo[]
        },
        GetCurrentAnimatorStateInfo: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 11, false, this, a0); //Ret: AnimatorStateInfo
        },
        GetFloat$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 12, false, this, a0); //Ret: Single
        },
        GetFloat$$String: function(a0/*String*/) { 
            return CS.Call(4, 233, 13, false, this, a0); //Ret: Single
        },
        GetIKPosition: function(a0/*AvatarIKGoal*/) { 
            return CS.Call(4, 233, 14, false, this, a0); //Ret: Vector3
        },
        GetIKPositionWeight: function(a0/*AvatarIKGoal*/) { 
            return CS.Call(4, 233, 15, false, this, a0); //Ret: Single
        },
        GetIKRotation: function(a0/*AvatarIKGoal*/) { 
            return CS.Call(4, 233, 16, false, this, a0); //Ret: Quaternion
        },
        GetIKRotationWeight: function(a0/*AvatarIKGoal*/) { 
            return CS.Call(4, 233, 17, false, this, a0); //Ret: Single
        },
        GetInteger$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 18, false, this, a0); //Ret: Int32
        },
        GetInteger$$String: function(a0/*String*/) { 
            return CS.Call(4, 233, 19, false, this, a0); //Ret: Int32
        },
        GetLayerName: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 20, false, this, a0); //Ret: String
        },
        GetLayerWeight: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 21, false, this, a0); //Ret: Single
        },
        GetNextAnimationClipState: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 22, false, this, a0); //Ret: AnimationInfo[]
        },
        GetNextAnimatorStateInfo: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 23, false, this, a0); //Ret: AnimatorStateInfo
        },
        InterruptMatchTarget$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 233, 24, false, this, a0); //Ret: Void
        },
        InterruptMatchTarget: function() { 
            return CS.Call(4, 233, 25, false, this); //Ret: Void
        },
        IsInTransition: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 26, false, this, a0); //Ret: Boolean
        },
        IsParameterControlledByCurve$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 27, false, this, a0); //Ret: Boolean
        },
        IsParameterControlledByCurve$$String: function(a0/*String*/) { 
            return CS.Call(4, 233, 28, false, this, a0); //Ret: Boolean
        },
        MatchTarget$$Vector3$$Quaternion$$AvatarTarget$$MatchTargetWeightMask$$Single$$Single: function(a0/*Vector3*/, a1/*Quaternion*/, a2/*AvatarTarget*/, a3/*MatchTargetWeightMask*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 233, 29, false, this, a0, a1, a2, a3, a4, a5); //Ret: Void
        },
        MatchTarget$$Vector3$$Quaternion$$AvatarTarget$$MatchTargetWeightMask$$Single: function(a0/*Vector3*/, a1/*Quaternion*/, a2/*AvatarTarget*/, a3/*MatchTargetWeightMask*/, a4/*Single*/) { 
            return CS.Call(4, 233, 30, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        Play$$String$$Int32$$Single: function(a0/*String*/, a1/*Int32*/, a2/*Single*/) { 
            return CS.Call(4, 233, 31, false, this, a0, a1, a2); //Ret: Void
        },
        Play$$Int32$$Int32$$Single: function(a0/*Int32*/, a1/*Int32*/, a2/*Single*/) { 
            return CS.Call(4, 233, 32, false, this, a0, a1, a2); //Ret: Void
        },
        Play$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 233, 33, false, this, a0, a1); //Ret: Void
        },
        Play$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 233, 34, false, this, a0, a1); //Ret: Void
        },
        Play$$String: function(a0/*String*/) { 
            return CS.Call(4, 233, 35, false, this, a0); //Ret: Void
        },
        Play$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 36, false, this, a0); //Ret: Void
        },
        Rebind: function() { 
            return CS.Call(4, 233, 37, false, this); //Ret: Void
        },
        ResetTrigger$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 38, false, this, a0); //Ret: Void
        },
        ResetTrigger$$String: function(a0/*String*/) { 
            return CS.Call(4, 233, 39, false, this, a0); //Ret: Void
        },
        SetBool$$Int32$$Boolean: function(a0/*Int32*/, a1/*Boolean*/) { 
            return CS.Call(4, 233, 40, false, this, a0, a1); //Ret: Void
        },
        SetBool$$String$$Boolean: function(a0/*String*/, a1/*Boolean*/) { 
            return CS.Call(4, 233, 41, false, this, a0, a1); //Ret: Void
        },
        SetFloat$$Int32$$Single$$Single$$Single: function(a0/*Int32*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 233, 42, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SetFloat$$String$$Single$$Single$$Single: function(a0/*String*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 233, 43, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SetFloat$$String$$Single: function(a0/*String*/, a1/*Single*/) { 
            return CS.Call(4, 233, 44, false, this, a0, a1); //Ret: Void
        },
        SetFloat$$Int32$$Single: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 233, 45, false, this, a0, a1); //Ret: Void
        },
        SetIKPosition: function(a0/*AvatarIKGoal*/, a1/*Vector3*/) { 
            return CS.Call(4, 233, 46, false, this, a0, a1); //Ret: Void
        },
        SetIKPositionWeight: function(a0/*AvatarIKGoal*/, a1/*Single*/) { 
            return CS.Call(4, 233, 47, false, this, a0, a1); //Ret: Void
        },
        SetIKRotation: function(a0/*AvatarIKGoal*/, a1/*Quaternion*/) { 
            return CS.Call(4, 233, 48, false, this, a0, a1); //Ret: Void
        },
        SetIKRotationWeight: function(a0/*AvatarIKGoal*/, a1/*Single*/) { 
            return CS.Call(4, 233, 49, false, this, a0, a1); //Ret: Void
        },
        SetInteger$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 233, 50, false, this, a0, a1); //Ret: Void
        },
        SetInteger$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 233, 51, false, this, a0, a1); //Ret: Void
        },
        SetLayerWeight: function(a0/*Int32*/, a1/*Single*/) { 
            return CS.Call(4, 233, 52, false, this, a0, a1); //Ret: Void
        },
        SetLookAtPosition: function(a0/*Vector3*/) { 
            return CS.Call(4, 233, 53, false, this, a0); //Ret: Void
        },
        SetLookAtWeight$$Single$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/, a4/*Single*/) { 
            return CS.Call(4, 233, 54, false, this, a0, a1, a2, a3, a4); //Ret: Void
        },
        SetLookAtWeight$$Single$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 233, 55, false, this, a0, a1, a2, a3); //Ret: Void
        },
        SetLookAtWeight$$Single$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 233, 56, false, this, a0, a1, a2); //Ret: Void
        },
        SetLookAtWeight$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 233, 57, false, this, a0, a1); //Ret: Void
        },
        SetLookAtWeight$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 233, 58, false, this, a0); //Ret: Void
        },
        SetTarget: function(a0/*AvatarTarget*/, a1/*Single*/) { 
            return CS.Call(4, 233, 59, false, this, a0, a1); //Ret: Void
        },
        SetTrigger$$String: function(a0/*String*/) { 
            return CS.Call(4, 233, 60, false, this, a0); //Ret: Void
        },
        SetTrigger$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 61, false, this, a0); //Ret: Void
        },
        StartPlayback: function() { 
            return CS.Call(4, 233, 62, false, this); //Ret: Void
        },
        StartRecording: function(a0/*Int32*/) { 
            return CS.Call(4, 233, 63, false, this, a0); //Ret: Void
        },
        StopPlayback: function() { 
            return CS.Call(4, 233, 64, false, this); //Ret: Void
        },
        StopRecording: function() { 
            return CS.Call(4, 233, 65, false, this); //Ret: Void
        },
        Update: function(a0/*Single*/) { 
            return CS.Call(4, 233, 66, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Animator);

// UnityEngine.AnimatorUtility
var UnityEngine$AnimatorUtility = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AnimatorUtility",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        DeoptimizeTransformHierarchy: function(a0/*GameObject*/) { 
            return CS.Call(4, 234, 0, true, a0); //Ret: Void
        },
        OptimizeTransformHierarchy: function(a0/*GameObject*/, a1/*String[]*/) { 
            return CS.Call(4, 234, 1, true, a0, a1); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 234, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AnimatorUtility);

// UnityEngine.SkeletonBone
var UnityEngine$SkeletonBone = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.SkeletonBone",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        name: {
            get: function() { return CS.Call(0, 235, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 235, 0, false, this, v); }
        },
        position: {
            get: function() { return CS.Call(0, 235, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 235, 1, false, this, v); }
        },
        rotation: {
            get: function() { return CS.Call(0, 235, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 235, 2, false, this, v); }
        },
        scale: {
            get: function() { return CS.Call(0, 235, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 235, 3, false, this, v); }
        },
        transformModified: {
            get: function() { return CS.Call(0, 235, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 235, 4, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 235, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$SkeletonBone);

// UnityEngine.HumanLimit
var UnityEngine$HumanLimit = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HumanLimit",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function() { CS.Call(5, 236, 0, true, this); },
        get_useDefaultValues: function() { return CS.Call(2, 236, 0, false, this); },
        set_useDefaultValues: function(v) { return CS.Call(3, 236, 0, false, this, v); },
        get_min: function() { return CS.Call(2, 236, 1, false, this); },
        set_min: function(v) { return CS.Call(3, 236, 1, false, this, v); },
        get_max: function() { return CS.Call(2, 236, 2, false, this); },
        set_max: function(v) { return CS.Call(3, 236, 2, false, this, v); },
        get_center: function() { return CS.Call(2, 236, 3, false, this); },
        set_center: function(v) { return CS.Call(3, 236, 3, false, this, v); },
        get_axisLength: function() { return CS.Call(2, 236, 4, false, this); },
        set_axisLength: function(v) { return CS.Call(3, 236, 4, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HumanLimit);

// UnityEngine.HumanBone
var UnityEngine$HumanBone = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HumanBone",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        limit: {
            get: function() { return CS.Call(0, 237, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 237, 0, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 237, 0, true, this); },
        get_boneName: function() { return CS.Call(2, 237, 0, false, this); },
        set_boneName: function(v) { return CS.Call(3, 237, 0, false, this, v); },
        get_humanName: function() { return CS.Call(2, 237, 1, false, this); },
        set_humanName: function(v) { return CS.Call(3, 237, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HumanBone);

// UnityEngine.HumanDescription
var UnityEngine$HumanDescription = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HumanDescription",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        human: {
            get: function() { return CS.Call(0, 238, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 238, 0, false, this, v); }
        },
        skeleton: {
            get: function() { return CS.Call(0, 238, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 238, 1, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 238, 0, true, this); },
        get_upperArmTwist: function() { return CS.Call(2, 238, 0, false, this); },
        set_upperArmTwist: function(v) { return CS.Call(3, 238, 0, false, this, v); },
        get_lowerArmTwist: function() { return CS.Call(2, 238, 1, false, this); },
        set_lowerArmTwist: function(v) { return CS.Call(3, 238, 1, false, this, v); },
        get_upperLegTwist: function() { return CS.Call(2, 238, 2, false, this); },
        set_upperLegTwist: function(v) { return CS.Call(3, 238, 2, false, this, v); },
        get_lowerLegTwist: function() { return CS.Call(2, 238, 3, false, this); },
        set_lowerLegTwist: function(v) { return CS.Call(3, 238, 3, false, this, v); },
        get_armStretch: function() { return CS.Call(2, 238, 4, false, this); },
        set_armStretch: function(v) { return CS.Call(3, 238, 4, false, this, v); },
        get_legStretch: function() { return CS.Call(2, 238, 5, false, this); },
        set_legStretch: function(v) { return CS.Call(3, 238, 5, false, this, v); },
        get_feetSpacing: function() { return CS.Call(2, 238, 6, false, this); },
        set_feetSpacing: function(v) { return CS.Call(3, 238, 6, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HumanDescription);

// UnityEngine.AvatarBuilder
var UnityEngine$AvatarBuilder = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.AvatarBuilder",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        BuildGenericAvatar: function(a0/*GameObject*/, a1/*String*/) { 
            return CS.Call(4, 239, 0, true, a0, a1); //Ret: Avatar
        },
        BuildHumanAvatar: function(a0/*GameObject*/, a1/*HumanDescription*/) { 
            return CS.Call(4, 239, 1, true, a0, a1); //Ret: Avatar
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 239, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$AvatarBuilder);

// UnityEngine.RuntimeAnimatorController
var UnityEngine$RuntimeAnimatorController = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.RuntimeAnimatorController",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 240, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$RuntimeAnimatorController);

// UnityEngine.Avatar
var UnityEngine$Avatar = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.Avatar",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    definition: {
        ctor: function() { CS.Call(5, 241, 0, true, this); },
        get_isValid: function() { return CS.Call(2, 241, 0, false, this); },
        set_isValid: function(v) { return CS.Call(3, 241, 0, false, this, v); },
        get_isHuman: function() { return CS.Call(2, 241, 1, false, this); },
        set_isHuman: function(v) { return CS.Call(3, 241, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$Avatar);

// UnityEngine.HumanTrait
var UnityEngine$HumanTrait = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.HumanTrait",
    Kind: "Class",
    baseTypeName: "UnityEngine.Object",
    staticDefinition: {
        get_MuscleCount: function() { return CS.Call(2, 242, 0, true); },
        set_MuscleCount: function(v) { return CS.Call(3, 242, 0, true, v); },
        get_MuscleName: function() { return CS.Call(2, 242, 1, true); },
        set_MuscleName: function(v) { return CS.Call(3, 242, 1, true, v); },
        get_BoneCount: function() { return CS.Call(2, 242, 2, true); },
        set_BoneCount: function(v) { return CS.Call(3, 242, 2, true, v); },
        get_BoneName: function() { return CS.Call(2, 242, 3, true); },
        set_BoneName: function(v) { return CS.Call(3, 242, 3, true, v); },
        get_RequiredBoneCount: function() { return CS.Call(2, 242, 4, true); },
        set_RequiredBoneCount: function(v) { return CS.Call(3, 242, 4, true, v); },
        BoneFromMuscle: function(a0/*Int32*/) { 
            return CS.Call(4, 242, 0, true, a0); //Ret: Int32
        },
        GetMuscleDefaultMax: function(a0/*Int32*/) { 
            return CS.Call(4, 242, 1, true, a0); //Ret: Single
        },
        GetMuscleDefaultMin: function(a0/*Int32*/) { 
            return CS.Call(4, 242, 2, true, a0); //Ret: Single
        },
        MuscleFromBone: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 242, 3, true, a0, a1); //Ret: Int32
        },
        RequiredBone: function(a0/*Int32*/) { 
            return CS.Call(4, 242, 4, true, a0); //Ret: Boolean
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 242, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$HumanTrait);

// UnityEngine.UIVertex
var UnityEngine$UIVertex = 
{
    assemblyName: "UnityEngine, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "UnityEngine.UIVertex",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    staticFields: {
        simpleVert: {
            get: function() { return CS.Call(0, 243, 6, true); }, 
            set: function(v) { return CS.Call(1, 243, 6, true, v); }
        },
    },
    fields: {
        position: {
            get: function() { return CS.Call(0, 243, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 243, 0, false, this, v); }
        },
        normal: {
            get: function() { return CS.Call(0, 243, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 243, 1, false, this, v); }
        },
        color: {
            get: function() { return CS.Call(0, 243, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 243, 2, false, this, v); }
        },
        uv0: {
            get: function() { return CS.Call(0, 243, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 243, 3, false, this, v); }
        },
        uv1: {
            get: function() { return CS.Call(0, 243, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 243, 4, false, this, v); }
        },
        tangent: {
            get: function() { return CS.Call(0, 243, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 243, 5, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 243, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(UnityEngine$UIVertex);

// DG.Tweening.Color2
var DG$Tweening$Color2 = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Color2",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    fields: {
        ca: {
            get: function() { return CS.Call(0, 244, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 244, 0, false, this, v); }
        },
        cb: {
            get: function() { return CS.Call(0, 244, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 244, 1, false, this, v); }
        },
    },
    staticDefinition: {
        op_Addition: function(a0/*Color2*/, a1/*Color2*/) { 
            return CS.Call(4, 244, 0, true, a0, a1); //Ret: Color2
        },
        op_Multiply: function(a0/*Color2*/, a1/*Single*/) { 
            return CS.Call(4, 244, 1, true, a0, a1); //Ret: Color2
        },
        op_Subtraction: function(a0/*Color2*/, a1/*Color2*/) { 
            return CS.Call(4, 244, 2, true, a0, a1); //Ret: Color2
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 244, 0, true, this); },
        ctor$$Color$$Color: function(a0, a1) { CS.Call(5, 244, 1, true, this, a0, a1); },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Color2);

// DG.Tweening.DOTween
var DG$Tweening$DOTween = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.DOTween",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        Version: {
            get: function() { return CS.Call(0, 245, 0, true); }, 
            set: function(v) { return CS.Call(1, 245, 0, true, v); }
        },
        useSafeMode: {
            get: function() { return CS.Call(0, 245, 1, true); }, 
            set: function(v) { return CS.Call(1, 245, 1, true, v); }
        },
        showUnityEditorReport: {
            get: function() { return CS.Call(0, 245, 2, true); }, 
            set: function(v) { return CS.Call(1, 245, 2, true, v); }
        },
        timeScale: {
            get: function() { return CS.Call(0, 245, 3, true); }, 
            set: function(v) { return CS.Call(1, 245, 3, true, v); }
        },
        useSmoothDeltaTime: {
            get: function() { return CS.Call(0, 245, 4, true); }, 
            set: function(v) { return CS.Call(1, 245, 4, true, v); }
        },
        drawGizmos: {
            get: function() { return CS.Call(0, 245, 5, true); }, 
            set: function(v) { return CS.Call(1, 245, 5, true, v); }
        },
        defaultUpdateType: {
            get: function() { return CS.Call(0, 245, 6, true); }, 
            set: function(v) { return CS.Call(1, 245, 6, true, v); }
        },
        defaultTimeScaleIndependent: {
            get: function() { return CS.Call(0, 245, 7, true); }, 
            set: function(v) { return CS.Call(1, 245, 7, true, v); }
        },
        defaultAutoPlay: {
            get: function() { return CS.Call(0, 245, 8, true); }, 
            set: function(v) { return CS.Call(1, 245, 8, true, v); }
        },
        defaultAutoKill: {
            get: function() { return CS.Call(0, 245, 9, true); }, 
            set: function(v) { return CS.Call(1, 245, 9, true, v); }
        },
        defaultLoopType: {
            get: function() { return CS.Call(0, 245, 10, true); }, 
            set: function(v) { return CS.Call(1, 245, 10, true, v); }
        },
        defaultRecyclable: {
            get: function() { return CS.Call(0, 245, 11, true); }, 
            set: function(v) { return CS.Call(1, 245, 11, true, v); }
        },
        defaultEaseType: {
            get: function() { return CS.Call(0, 245, 12, true); }, 
            set: function(v) { return CS.Call(1, 245, 12, true, v); }
        },
        defaultEaseOvershootOrAmplitude: {
            get: function() { return CS.Call(0, 245, 13, true); }, 
            set: function(v) { return CS.Call(1, 245, 13, true, v); }
        },
        defaultEasePeriod: {
            get: function() { return CS.Call(0, 245, 14, true); }, 
            set: function(v) { return CS.Call(1, 245, 14, true, v); }
        },
    },
    staticDefinition: {
        get_logBehaviour: function() { return CS.Call(2, 245, 0, true); },
        set_logBehaviour: function(v) { return CS.Call(3, 245, 0, true, v); },
        Clear: function(a0/*Boolean*/) { 
            return CS.Call(4, 245, 0, true, a0); //Ret: Void
        },
        ClearCachedTweens: function() { 
            return CS.Call(4, 245, 1, true); //Ret: Void
        },
        Complete: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 245, 2, true, a0, a1); //Ret: Int32
        },
        CompleteAll: function(a0/*Boolean*/) { 
            return CS.Call(4, 245, 3, true, a0); //Ret: Int32
        },
        Flip: function(a0/*Object*/) { 
            return CS.Call(4, 245, 4, true, a0); //Ret: Int32
        },
        FlipAll: function() { 
            return CS.Call(4, 245, 5, true); //Ret: Int32
        },
        Goto: function(a0/*Object*/, a1/*Single*/, a2/*Boolean*/) { 
            return CS.Call(4, 245, 6, true, a0, a1, a2); //Ret: Int32
        },
        GotoAll: function(a0/*Single*/, a1/*Boolean*/) { 
            return CS.Call(4, 245, 7, true, a0, a1); //Ret: Int32
        },
        Init: function(a0/*Nullable`1*/, a1/*Nullable`1*/, a2/*Nullable`1*/) { 
            return CS.Call(4, 245, 8, true, a0, a1, a2); //Ret: IDOTweenInit
        },
        IsTweening: function(a0/*Object*/) { 
            return CS.Call(4, 245, 9, true, a0); //Ret: Boolean
        },
        Kill: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 245, 10, true, a0, a1); //Ret: Int32
        },
        KillAll$$Boolean$$Object$Array: function(a0/*Boolean*/, a1/*Object[]*/) { 
            return CS.Call(4, 245, 11, true, a0, jsb_formatParamsArray(1, a1, arguments)); //Ret: Int32
        },
        KillAll$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 245, 12, true, a0); //Ret: Int32
        },
        Pause: function(a0/*Object*/) { 
            return CS.Call(4, 245, 13, true, a0); //Ret: Int32
        },
        PauseAll: function() { 
            return CS.Call(4, 245, 14, true); //Ret: Int32
        },
        PausedTweens: function() { 
            return CS.Call(4, 245, 15, true); //Ret: List`1
        },
        Play$$Object$$Object: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 245, 16, true, a0, a1); //Ret: Int32
        },
        Play$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 245, 17, true, a0); //Ret: Int32
        },
        PlayAll: function() { 
            return CS.Call(4, 245, 18, true); //Ret: Int32
        },
        PlayBackwards$$Object$$Object: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 245, 19, true, a0, a1); //Ret: Int32
        },
        PlayBackwards$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 245, 20, true, a0); //Ret: Int32
        },
        PlayBackwardsAll: function() { 
            return CS.Call(4, 245, 21, true); //Ret: Int32
        },
        PlayForward$$Object$$Object: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 245, 22, true, a0, a1); //Ret: Int32
        },
        PlayForward$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 245, 23, true, a0); //Ret: Int32
        },
        PlayForwardAll: function() { 
            return CS.Call(4, 245, 24, true); //Ret: Int32
        },
        PlayingTweens: function() { 
            return CS.Call(4, 245, 25, true); //Ret: List`1
        },
        Punch: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Vector3*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/) { 
            return CS.Call(4, 245, 26, true, a0, a1, a2, a3, a4, a5); //Ret: TweenerCore`3
        },
        Restart$$Object$$Object$$Boolean: function(a0/*Object*/, a1/*Object*/, a2/*Boolean*/) { 
            return CS.Call(4, 245, 27, true, a0, a1, a2); //Ret: Int32
        },
        Restart$$Object$$Boolean: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 245, 28, true, a0, a1); //Ret: Int32
        },
        RestartAll: function(a0/*Boolean*/) { 
            return CS.Call(4, 245, 29, true, a0); //Ret: Int32
        },
        Rewind: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 245, 30, true, a0, a1); //Ret: Int32
        },
        RewindAll: function(a0/*Boolean*/) { 
            return CS.Call(4, 245, 31, true, a0); //Ret: Int32
        },
        Sequence: function() { 
            return CS.Call(4, 245, 32, true); //Ret: Sequence
        },
        SetTweensCapacity: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 245, 33, true, a0, a1); //Ret: Void
        },
        Shake$$DOGetter$1$Vector3$$DOSetter$1$Vector3$$Single$$Vector3$$Int32$$Single$$Boolean: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Single*/, a3/*Vector3*/, a4/*Int32*/, a5/*Single*/, a6/*Boolean*/) { 
            return CS.Call(4, 245, 34, true, a0, a1, a2, a3, a4, a5, a6); //Ret: TweenerCore`3
        },
        Shake$$DOGetter$1$Vector3$$DOSetter$1$Vector3$$Single$$Single$$Int32$$Single$$Boolean$$Boolean: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Single*/, a3/*Single*/, a4/*Int32*/, a5/*Single*/, a6/*Boolean*/, a7/*Boolean*/) { 
            return CS.Call(4, 245, 35, true, a0, a1, a2, a3, a4, a5, a6, a7); //Ret: TweenerCore`3
        },
        SmoothRewind: function(a0/*Object*/) { 
            return CS.Call(4, 245, 36, true, a0); //Ret: Int32
        },
        SmoothRewindAll: function() { 
            return CS.Call(4, 245, 37, true); //Ret: Int32
        },
        To$3$$ABSTweenPlugin$3$$DOGetter$1$$DOSetter$1$$T2$$Single: function(t0, t1, t2, a0/*ABSTweenPlugin`3*/, a1/*DOGetter`1*/, a2/*DOSetter`1*/, a3/*T2*/, a4/*Single*/) { 
            var native_t0 = t0.getNativeType();
            var native_t1 = t1.getNativeType();
            var native_t2 = t2.getNativeType();
            return CS.Call(4, 245, 38, true, native_t0, native_t1, native_t2, a0, a1, a2, a3, a4); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$Int32$$DOSetter$1$Int32$$Int32$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Int32*/, a3/*Single*/) { 
            return CS.Call(4, 245, 39, true, a0, a1, a2, a3); //Ret: Tweener
        },
        To$$DOSetter$1$Single$$Single$$Single$$Single: function(a0/*DOSetter`1*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 245, 40, true, a0, a1, a2, a3); //Ret: Tweener
        },
        To$$DOGetter$1$Double$$DOSetter$1$Double$$Double$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Double*/, a3/*Single*/) { 
            return CS.Call(4, 245, 41, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$Vector2$$DOSetter$1$Vector2$$Vector2$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Vector2*/, a3/*Single*/) { 
            return CS.Call(4, 245, 42, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$RectOffset$$DOSetter$1$RectOffset$$RectOffset$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*RectOffset*/, a3/*Single*/) { 
            return CS.Call(4, 245, 43, true, a0, a1, a2, a3); //Ret: Tweener
        },
        To$$DOGetter$1$Quaternion$$DOSetter$1$Quaternion$$Vector3$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Vector3*/, a3/*Single*/) { 
            return CS.Call(4, 245, 44, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$Color$$DOSetter$1$Color$$Color$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Color*/, a3/*Single*/) { 
            return CS.Call(4, 245, 45, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$Rect$$DOSetter$1$Rect$$Rect$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Rect*/, a3/*Single*/) { 
            return CS.Call(4, 245, 46, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$UInt32$$DOSetter$1$UInt32$$UInt32$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*UInt32*/, a3/*Single*/) { 
            return CS.Call(4, 245, 47, true, a0, a1, a2, a3); //Ret: Tweener
        },
        To$$DOGetter$1$Int64$$DOSetter$1$Int64$$Int64$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Int64*/, a3/*Single*/) { 
            return CS.Call(4, 245, 48, true, a0, a1, a2, a3); //Ret: Tweener
        },
        To$$DOGetter$1$Vector3$$DOSetter$1$Vector3$$Vector3$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Vector3*/, a3/*Single*/) { 
            return CS.Call(4, 245, 49, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$Vector4$$DOSetter$1$Vector4$$Vector4$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Vector4*/, a3/*Single*/) { 
            return CS.Call(4, 245, 50, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$UInt64$$DOSetter$1$UInt64$$UInt64$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*UInt64*/, a3/*Single*/) { 
            return CS.Call(4, 245, 51, true, a0, a1, a2, a3); //Ret: Tweener
        },
        To$$DOGetter$1$String$$DOSetter$1$String$$String$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 245, 52, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        To$$DOGetter$1$Single$$DOSetter$1$Single$$Single$$Single: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 245, 53, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        ToAlpha: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 245, 54, true, a0, a1, a2, a3); //Ret: Tweener
        },
        ToArray: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Vector3[]*/, a3/*Single[]*/) { 
            return CS.Call(4, 245, 55, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        ToAxis: function(a0/*DOGetter`1*/, a1/*DOSetter`1*/, a2/*Single*/, a3/*Single*/, a4/*AxisConstraint*/) { 
            return CS.Call(4, 245, 56, true, a0, a1, a2, a3, a4); //Ret: TweenerCore`3
        },
        TogglePause: function(a0/*Object*/) { 
            return CS.Call(4, 245, 57, true, a0); //Ret: Int32
        },
        TogglePauseAll: function() { 
            return CS.Call(4, 245, 58, true); //Ret: Int32
        },
        TotalPlayingTweens: function() { 
            return CS.Call(4, 245, 59, true); //Ret: Int32
        },
        TweensById: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 245, 60, true, a0, a1); //Ret: List`1
        },
        TweensByTarget: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 245, 61, true, a0, a1); //Ret: List`1
        },
        Validate: function() { 
            return CS.Call(4, 245, 62, true); //Ret: Int32
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 245, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$DOTween);

// DG.Tweening.DOVirtual
var DG$Tweening$DOVirtual = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.DOVirtual",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        DelayedCall: function(a0/*Single*/, a1/*TweenCallback*/, a2/*Boolean*/) { 
            return CS.Call(4, 246, 0, true, a0, a1, a2); //Ret: Tween
        },
        EasedValue$$Single$$Single$$Single$$Ease$$Single$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Ease*/, a4/*Single*/, a5/*Single*/) { 
            return CS.Call(4, 246, 1, true, a0, a1, a2, a3, a4, a5); //Ret: Single
        },
        EasedValue$$Single$$Single$$Single$$Ease$$Single: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Ease*/, a4/*Single*/) { 
            return CS.Call(4, 246, 2, true, a0, a1, a2, a3, a4); //Ret: Single
        },
        EasedValue$$Single$$Single$$Single$$AnimationCurve: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*AnimationCurve*/) { 
            return CS.Call(4, 246, 3, true, a0, a1, a2, a3); //Ret: Single
        },
        EasedValue$$Single$$Single$$Single$$Ease: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*Ease*/) { 
            return CS.Call(4, 246, 4, true, a0, a1, a2, a3); //Ret: Single
        },
        Float: function(a0/*Single*/, a1/*Single*/, a2/*Single*/, a3/*TweenCallback`1*/) { 
            return CS.Call(4, 246, 5, true, a0, a1, a2, a3); //Ret: Tweener
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$DOVirtual);

// DG.Tweening.EaseFactory
var DG$Tweening$EaseFactory = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.EaseFactory",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        StopMotion$$Int32$$EaseFunction: function(a0/*Int32*/, a1/*EaseFunction*/) { 
            return CS.Call(4, 247, 0, true, a0, a1); //Ret: EaseFunction
        },
        StopMotion$$Int32$$AnimationCurve: function(a0/*Int32*/, a1/*AnimationCurve*/) { 
            return CS.Call(4, 247, 1, true, a0, a1); //Ret: EaseFunction
        },
        StopMotion$$Int32$$Nullable$1$Ease: function(a0/*Int32*/, a1/*Nullable`1*/) { 
            return CS.Call(4, 247, 2, true, a0, a1); //Ret: EaseFunction
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 247, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$EaseFactory);

// DG.Tweening.TweenExtensions
var DG$Tweening$TweenExtensions = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.TweenExtensions",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        Complete$$Tween$$Boolean: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 248, 0, true, a0, a1); //Ret: Void
        },
        Complete$$Tween: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 1, true, a0); //Ret: Void
        },
        CompletedLoops: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 2, true, a0); //Ret: Int32
        },
        Delay: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 3, true, a0); //Ret: Single
        },
        Duration: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 248, 4, true, a0, a1); //Ret: Single
        },
        Elapsed: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 248, 5, true, a0, a1); //Ret: Single
        },
        ElapsedDirectionalPercentage: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 6, true, a0); //Ret: Single
        },
        ElapsedPercentage: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 248, 7, true, a0, a1); //Ret: Single
        },
        Flip: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 8, true, a0); //Ret: Void
        },
        ForceInit: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 9, true, a0); //Ret: Void
        },
        Goto: function(a0/*Tween*/, a1/*Single*/, a2/*Boolean*/) { 
            return CS.Call(4, 248, 10, true, a0, a1, a2); //Ret: Void
        },
        GotoWaypoint: function(a0/*Tween*/, a1/*Int32*/, a2/*Boolean*/) { 
            return CS.Call(4, 248, 11, true, a0, a1, a2); //Ret: Void
        },
        IsActive: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 12, true, a0); //Ret: Boolean
        },
        IsBackwards: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 13, true, a0); //Ret: Boolean
        },
        IsComplete: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 14, true, a0); //Ret: Boolean
        },
        IsInitialized: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 15, true, a0); //Ret: Boolean
        },
        IsPlaying: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 16, true, a0); //Ret: Boolean
        },
        Kill: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 248, 17, true, a0, a1); //Ret: Void
        },
        Loops: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 18, true, a0); //Ret: Int32
        },
        PathGetDrawPoints: function(a0/*Tween*/, a1/*Int32*/) { 
            return CS.Call(4, 248, 19, true, a0, a1); //Ret: Vector3[]
        },
        PathGetPoint: function(a0/*Tween*/, a1/*Single*/) { 
            return CS.Call(4, 248, 20, true, a0, a1); //Ret: Vector3
        },
        PathLength: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 21, true, a0); //Ret: Single
        },
        Pause$1: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 248, 22, true, native_t0, a0); //Ret: T
        },
        Play$1: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 248, 23, true, native_t0, a0); //Ret: T
        },
        PlayBackwards: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 24, true, a0); //Ret: Void
        },
        PlayForward: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 25, true, a0); //Ret: Void
        },
        Restart: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 248, 26, true, a0, a1); //Ret: Void
        },
        Rewind: function(a0/*Tween*/, a1/*Boolean*/) { 
            return CS.Call(4, 248, 27, true, a0, a1); //Ret: Void
        },
        SmoothRewind: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 28, true, a0); //Ret: Void
        },
        TogglePause: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 29, true, a0); //Ret: Void
        },
        WaitForCompletion: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 30, true, a0); //Ret: YieldInstruction
        },
        WaitForElapsedLoops: function(a0/*Tween*/, a1/*Int32*/) { 
            return CS.Call(4, 248, 31, true, a0, a1); //Ret: YieldInstruction
        },
        WaitForKill: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 32, true, a0); //Ret: YieldInstruction
        },
        WaitForPosition: function(a0/*Tween*/, a1/*Single*/) { 
            return CS.Call(4, 248, 33, true, a0, a1); //Ret: YieldInstruction
        },
        WaitForRewind: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 34, true, a0); //Ret: YieldInstruction
        },
        WaitForStart: function(a0/*Tween*/) { 
            return CS.Call(4, 248, 35, true, a0); //Ret: Coroutine
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$TweenExtensions);

// DG.Tweening.Sequence
var DG$Tweening$Sequence = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Sequence",
    Kind: "Class",
    baseTypeName: "DG.Tweening.Tween",
};
jsb_ReplaceOrPushJsType(DG$Tweening$Sequence);

// DG.Tweening.ShortcutExtensions
var DG$Tweening$ShortcutExtensions = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.ShortcutExtensions",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        DOAspect: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 0, true, a0, a1, a2); //Ret: Tweener
        },
        DOBlendableColor$$Material$$Color$$String$$Single: function(a0/*Material*/, a1/*Color*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 250, 1, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOBlendableColor$$Light$$Color$$Single: function(a0/*Light*/, a1/*Color*/, a2/*Single*/) { 
            return CS.Call(4, 250, 2, true, a0, a1, a2); //Ret: Tweener
        },
        DOBlendableColor$$Material$$Color$$Single: function(a0/*Material*/, a1/*Color*/, a2/*Single*/) { 
            return CS.Call(4, 250, 3, true, a0, a1, a2); //Ret: Tweener
        },
        DOBlendableLocalMoveBy: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 4, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOBlendableLocalRotateBy: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*RotateMode*/) { 
            return CS.Call(4, 250, 5, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOBlendableMoveBy: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 6, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOBlendableRotateBy: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*RotateMode*/) { 
            return CS.Call(4, 250, 7, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOBlendableScaleBy: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 250, 8, true, a0, a1, a2); //Ret: Tweener
        },
        DOColor$$Material$$Color$$String$$Single: function(a0/*Material*/, a1/*Color*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 250, 9, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOColor$$LineRenderer$$Color2$$Color2$$Single: function(a0/*LineRenderer*/, a1/*Color2*/, a2/*Color2*/, a3/*Single*/) { 
            return CS.Call(4, 250, 10, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOColor$$Material$$Color$$Single: function(a0/*Material*/, a1/*Color*/, a2/*Single*/) { 
            return CS.Call(4, 250, 11, true, a0, a1, a2); //Ret: Tweener
        },
        DOColor$$Light$$Color$$Single: function(a0/*Light*/, a1/*Color*/, a2/*Single*/) { 
            return CS.Call(4, 250, 12, true, a0, a1, a2); //Ret: Tweener
        },
        DOColor$$Camera$$Color$$Single: function(a0/*Camera*/, a1/*Color*/, a2/*Single*/) { 
            return CS.Call(4, 250, 13, true, a0, a1, a2); //Ret: Tweener
        },
        DOComplete$$Component$$Boolean: function(a0/*Component*/, a1/*Boolean*/) { 
            return CS.Call(4, 250, 14, true, a0, a1); //Ret: Int32
        },
        DOComplete$$Material$$Boolean: function(a0/*Material*/, a1/*Boolean*/) { 
            return CS.Call(4, 250, 15, true, a0, a1); //Ret: Int32
        },
        DOFade$$Material$$Single$$String$$Single: function(a0/*Material*/, a1/*Single*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 250, 16, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOFade$$Material$$Single$$Single: function(a0/*Material*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 17, true, a0, a1, a2); //Ret: Tweener
        },
        DOFade$$AudioSource$$Single$$Single: function(a0/*AudioSource*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 18, true, a0, a1, a2); //Ret: Tweener
        },
        DOFarClipPlane: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 19, true, a0, a1, a2); //Ret: Tweener
        },
        DOFieldOfView: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 20, true, a0, a1, a2); //Ret: Tweener
        },
        DOFlip$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 250, 21, true, a0); //Ret: Int32
        },
        DOFlip$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 250, 22, true, a0); //Ret: Int32
        },
        DOFloat: function(a0/*Material*/, a1/*Single*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 250, 23, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOGoto$$Component$$Single$$Boolean: function(a0/*Component*/, a1/*Single*/, a2/*Boolean*/) { 
            return CS.Call(4, 250, 24, true, a0, a1, a2); //Ret: Int32
        },
        DOGoto$$Material$$Single$$Boolean: function(a0/*Material*/, a1/*Single*/, a2/*Boolean*/) { 
            return CS.Call(4, 250, 25, true, a0, a1, a2); //Ret: Int32
        },
        DOIntensity: function(a0/*Light*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 26, true, a0, a1, a2); //Ret: Tweener
        },
        DOJump$$Transform$$Vector3$$Single$$Int32$$Single$$Boolean: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 250, 27, true, a0, a1, a2, a3, a4, a5); //Ret: Sequence
        },
        DOJump$$Rigidbody$$Vector3$$Single$$Int32$$Single$$Boolean: function(a0/*Rigidbody*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 250, 28, true, a0, a1, a2, a3, a4, a5); //Ret: Sequence
        },
        DOKill$$Component$$Boolean: function(a0/*Component*/, a1/*Boolean*/) { 
            return CS.Call(4, 250, 29, true, a0, a1); //Ret: Int32
        },
        DOKill$$Material$$Boolean: function(a0/*Material*/, a1/*Boolean*/) { 
            return CS.Call(4, 250, 30, true, a0, a1); //Ret: Int32
        },
        DOLocalJump: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 250, 31, true, a0, a1, a2, a3, a4, a5); //Ret: Sequence
        },
        DOLocalMove: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 32, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOLocalMoveX: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 33, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOLocalMoveY: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 34, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOLocalMoveZ: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 35, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOLocalPath: function(a0/*Transform*/, a1/*Vector3[]*/, a2/*Single*/, a3/*PathType*/, a4/*PathMode*/, a5/*Int32*/, a6/*Nullable`1*/) { 
            return CS.Call(4, 250, 36, true, a0, a1, a2, a3, a4, a5, a6); //Ret: TweenerCore`3
        },
        DOLocalRotate: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*RotateMode*/) { 
            return CS.Call(4, 250, 37, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOLocalRotateQuaternion: function(a0/*Transform*/, a1/*Quaternion*/, a2/*Single*/) { 
            return CS.Call(4, 250, 38, true, a0, a1, a2); //Ret: Tweener
        },
        DOLookAt$$Transform$$Vector3$$Single$$AxisConstraint$$Nullable$1$Vector3: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*AxisConstraint*/, a4/*Nullable`1*/) { 
            return CS.Call(4, 250, 39, true, a0, a1, a2, a3, a4); //Ret: Tweener
        },
        DOLookAt$$Rigidbody$$Vector3$$Single$$AxisConstraint$$Nullable$1$Vector3: function(a0/*Rigidbody*/, a1/*Vector3*/, a2/*Single*/, a3/*AxisConstraint*/, a4/*Nullable`1*/) { 
            return CS.Call(4, 250, 40, true, a0, a1, a2, a3, a4); //Ret: Tweener
        },
        DOMove$$Transform$$Vector3$$Single$$Boolean: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 41, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMove$$Rigidbody$$Vector3$$Single$$Boolean: function(a0/*Rigidbody*/, a1/*Vector3*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 42, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMoveX$$Rigidbody$$Single$$Single$$Boolean: function(a0/*Rigidbody*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 43, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMoveX$$Transform$$Single$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 44, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMoveY$$Rigidbody$$Single$$Single$$Boolean: function(a0/*Rigidbody*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 45, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMoveY$$Transform$$Single$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 46, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMoveZ$$Rigidbody$$Single$$Single$$Boolean: function(a0/*Rigidbody*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 47, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOMoveZ$$Transform$$Single$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Boolean*/) { 
            return CS.Call(4, 250, 48, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DONearClipPlane: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 49, true, a0, a1, a2); //Ret: Tweener
        },
        DOOffset$$Material$$Vector2$$String$$Single: function(a0/*Material*/, a1/*Vector2*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 250, 50, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOOffset$$Material$$Vector2$$Single: function(a0/*Material*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 250, 51, true, a0, a1, a2); //Ret: Tweener
        },
        DOOrthoSize: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 52, true, a0, a1, a2); //Ret: Tweener
        },
        DOPath: function(a0/*Transform*/, a1/*Vector3[]*/, a2/*Single*/, a3/*PathType*/, a4/*PathMode*/, a5/*Int32*/, a6/*Nullable`1*/) { 
            return CS.Call(4, 250, 53, true, a0, a1, a2, a3, a4, a5, a6); //Ret: TweenerCore`3
        },
        DOPause$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 250, 54, true, a0); //Ret: Int32
        },
        DOPause$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 250, 55, true, a0); //Ret: Int32
        },
        DOPitch: function(a0/*AudioSource*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 56, true, a0, a1, a2); //Ret: Tweener
        },
        DOPixelRect: function(a0/*Camera*/, a1/*Rect*/, a2/*Single*/) { 
            return CS.Call(4, 250, 57, true, a0, a1, a2); //Ret: Tweener
        },
        DOPlay$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 250, 58, true, a0); //Ret: Int32
        },
        DOPlay$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 250, 59, true, a0); //Ret: Int32
        },
        DOPlayBackwards$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 250, 60, true, a0); //Ret: Int32
        },
        DOPlayBackwards$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 250, 61, true, a0); //Ret: Int32
        },
        DOPlayForward$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 250, 62, true, a0); //Ret: Int32
        },
        DOPlayForward$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 250, 63, true, a0); //Ret: Int32
        },
        DOPunchPosition: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 250, 64, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOPunchRotation: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 250, 65, true, a0, a1, a2, a3, a4); //Ret: Tweener
        },
        DOPunchScale: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/) { 
            return CS.Call(4, 250, 66, true, a0, a1, a2, a3, a4); //Ret: Tweener
        },
        DORect: function(a0/*Camera*/, a1/*Rect*/, a2/*Single*/) { 
            return CS.Call(4, 250, 67, true, a0, a1, a2); //Ret: Tweener
        },
        DOResize: function(a0/*TrailRenderer*/, a1/*Single*/, a2/*Single*/, a3/*Single*/) { 
            return CS.Call(4, 250, 68, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DORestart$$Component$$Boolean: function(a0/*Component*/, a1/*Boolean*/) { 
            return CS.Call(4, 250, 69, true, a0, a1); //Ret: Int32
        },
        DORestart$$Material$$Boolean: function(a0/*Material*/, a1/*Boolean*/) { 
            return CS.Call(4, 250, 70, true, a0, a1); //Ret: Int32
        },
        DORewind$$Component$$Boolean: function(a0/*Component*/, a1/*Boolean*/) { 
            return CS.Call(4, 250, 71, true, a0, a1); //Ret: Int32
        },
        DORewind$$Material$$Boolean: function(a0/*Material*/, a1/*Boolean*/) { 
            return CS.Call(4, 250, 72, true, a0, a1); //Ret: Int32
        },
        DORotate$$Transform$$Vector3$$Single$$RotateMode: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/, a3/*RotateMode*/) { 
            return CS.Call(4, 250, 73, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DORotate$$Rigidbody$$Vector3$$Single$$RotateMode: function(a0/*Rigidbody*/, a1/*Vector3*/, a2/*Single*/, a3/*RotateMode*/) { 
            return CS.Call(4, 250, 74, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DORotateQuaternion: function(a0/*Transform*/, a1/*Quaternion*/, a2/*Single*/) { 
            return CS.Call(4, 250, 75, true, a0, a1, a2); //Ret: Tweener
        },
        DOScale$$Transform$$Single$$Single: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 76, true, a0, a1, a2); //Ret: Tweener
        },
        DOScale$$Transform$$Vector3$$Single: function(a0/*Transform*/, a1/*Vector3*/, a2/*Single*/) { 
            return CS.Call(4, 250, 77, true, a0, a1, a2); //Ret: Tweener
        },
        DOScaleX: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 78, true, a0, a1, a2); //Ret: Tweener
        },
        DOScaleY: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 79, true, a0, a1, a2); //Ret: Tweener
        },
        DOScaleZ: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 80, true, a0, a1, a2); //Ret: Tweener
        },
        DOShadowStrength: function(a0/*Light*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 81, true, a0, a1, a2); //Ret: Tweener
        },
        DOShakePosition$$Camera$$Single$$Vector3$$Int32$$Single$$Boolean: function(a0/*Camera*/, a1/*Single*/, a2/*Vector3*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 250, 82, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakePosition$$Transform$$Single$$Vector3$$Int32$$Single$$Boolean$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Vector3*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/, a6/*Boolean*/) { 
            return CS.Call(4, 250, 83, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Tweener
        },
        DOShakePosition$$Camera$$Single$$Single$$Int32$$Single$$Boolean: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 250, 84, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakePosition$$Transform$$Single$$Single$$Int32$$Single$$Boolean$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/, a6/*Boolean*/) { 
            return CS.Call(4, 250, 85, true, a0, a1, a2, a3, a4, a5, a6); //Ret: Tweener
        },
        DOShakeRotation$$Camera$$Single$$Vector3$$Int32$$Single$$Boolean: function(a0/*Camera*/, a1/*Single*/, a2/*Vector3*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 250, 86, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakeRotation$$Transform$$Single$$Vector3$$Int32$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Vector3*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 250, 87, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakeRotation$$Transform$$Single$$Single$$Int32$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 250, 88, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakeRotation$$Camera$$Single$$Single$$Int32$$Single$$Boolean: function(a0/*Camera*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 250, 89, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakeScale$$Transform$$Single$$Vector3$$Int32$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Vector3*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 250, 90, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOShakeScale$$Transform$$Single$$Single$$Int32$$Single$$Boolean: function(a0/*Transform*/, a1/*Single*/, a2/*Single*/, a3/*Int32*/, a4/*Single*/, a5/*Boolean*/) { 
            return CS.Call(4, 250, 91, true, a0, a1, a2, a3, a4, a5); //Ret: Tweener
        },
        DOSmoothRewind$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 250, 92, true, a0); //Ret: Int32
        },
        DOSmoothRewind$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 250, 93, true, a0); //Ret: Int32
        },
        DOTiling$$Material$$Vector2$$String$$Single: function(a0/*Material*/, a1/*Vector2*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 250, 94, true, a0, a1, a2, a3); //Ret: Tweener
        },
        DOTiling$$Material$$Vector2$$Single: function(a0/*Material*/, a1/*Vector2*/, a2/*Single*/) { 
            return CS.Call(4, 250, 95, true, a0, a1, a2); //Ret: Tweener
        },
        DOTime: function(a0/*TrailRenderer*/, a1/*Single*/, a2/*Single*/) { 
            return CS.Call(4, 250, 96, true, a0, a1, a2); //Ret: Tweener
        },
        DOTogglePause$$Material: function(a0/*Material*/) { 
            return CS.Call(4, 250, 97, true, a0); //Ret: Int32
        },
        DOTogglePause$$Component: function(a0/*Component*/) { 
            return CS.Call(4, 250, 98, true, a0); //Ret: Int32
        },
        DOVector: function(a0/*Material*/, a1/*Vector4*/, a2/*String*/, a3/*Single*/) { 
            return CS.Call(4, 250, 99, true, a0, a1, a2, a3); //Ret: Tweener
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$ShortcutExtensions);

// DG.Tweening.TweenParams
var DG$Tweening$TweenParams = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.TweenParams",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        Params: {
            get: function() { return CS.Call(0, 251, 0, true); }, 
            set: function(v) { return CS.Call(1, 251, 0, true, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 251, 0, true, this); },
        Clear: function() { 
            return CS.Call(4, 251, 0, false, this); //Ret: TweenParams
        },
        OnComplete: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 251, 1, false, this, a0); //Ret: TweenParams
        },
        OnKill: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 251, 2, false, this, a0); //Ret: TweenParams
        },
        OnPlay: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 251, 3, false, this, a0); //Ret: TweenParams
        },
        OnRewind: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 251, 4, false, this, a0); //Ret: TweenParams
        },
        OnStart: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 251, 5, false, this, a0); //Ret: TweenParams
        },
        OnStepComplete: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 251, 6, false, this, a0); //Ret: TweenParams
        },
        OnUpdate: function(a0/*TweenCallback*/) { 
            return CS.Call(4, 251, 7, false, this, a0); //Ret: TweenParams
        },
        OnWaypointChange: function(a0/*TweenCallback`1*/) { 
            return CS.Call(4, 251, 8, false, this, a0); //Ret: TweenParams
        },
        SetAutoKill: function(a0/*Boolean*/) { 
            return CS.Call(4, 251, 9, false, this, a0); //Ret: TweenParams
        },
        SetDelay: function(a0/*Single*/) { 
            return CS.Call(4, 251, 10, false, this, a0); //Ret: TweenParams
        },
        SetEase$$Ease$$Nullable$1$Single$$Nullable$1$Single: function(a0/*Ease*/, a1/*Nullable`1*/, a2/*Nullable`1*/) { 
            return CS.Call(4, 251, 11, false, this, a0, a1, a2); //Ret: TweenParams
        },
        SetEase$$AnimationCurve: function(a0/*AnimationCurve*/) { 
            return CS.Call(4, 251, 12, false, this, a0); //Ret: TweenParams
        },
        SetEase$$EaseFunction: function(a0/*EaseFunction*/) { 
            return CS.Call(4, 251, 13, false, this, a0); //Ret: TweenParams
        },
        SetId: function(a0/*Object*/) { 
            return CS.Call(4, 251, 14, false, this, a0); //Ret: TweenParams
        },
        SetLoops: function(a0/*Int32*/, a1/*Nullable`1*/) { 
            return CS.Call(4, 251, 15, false, this, a0, a1); //Ret: TweenParams
        },
        SetRecyclable: function(a0/*Boolean*/) { 
            return CS.Call(4, 251, 16, false, this, a0); //Ret: TweenParams
        },
        SetRelative: function(a0/*Boolean*/) { 
            return CS.Call(4, 251, 17, false, this, a0); //Ret: TweenParams
        },
        SetSpeedBased: function(a0/*Boolean*/) { 
            return CS.Call(4, 251, 18, false, this, a0); //Ret: TweenParams
        },
        SetTarget: function(a0/*Object*/) { 
            return CS.Call(4, 251, 19, false, this, a0); //Ret: TweenParams
        },
        SetUpdate$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 251, 20, false, this, a0); //Ret: TweenParams
        },
        SetUpdate$$UpdateType$$Boolean: function(a0/*UpdateType*/, a1/*Boolean*/) { 
            return CS.Call(4, 251, 21, false, this, a0, a1); //Ret: TweenParams
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$TweenParams);

// DG.Tweening.TweenSettingsExtensions
var DG$Tweening$TweenSettingsExtensions = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.TweenSettingsExtensions",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        Append: function(a0/*Sequence*/, a1/*Tween*/) { 
            return CS.Call(4, 252, 0, true, a0, a1); //Ret: Sequence
        },
        AppendCallback: function(a0/*Sequence*/, a1/*TweenCallback*/) { 
            return CS.Call(4, 252, 1, true, a0, a1); //Ret: Sequence
        },
        AppendInterval: function(a0/*Sequence*/, a1/*Single*/) { 
            return CS.Call(4, 252, 2, true, a0, a1); //Ret: Sequence
        },
        From$1$$T$$Boolean: function(t0, a0/*T*/, a1/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 3, true, native_t0, a0, a1); //Ret: T
        },
        From$1$$T: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 4, true, native_t0, a0); //Ret: T
        },
        Insert: function(a0/*Sequence*/, a1/*Single*/, a2/*Tween*/) { 
            return CS.Call(4, 252, 5, true, a0, a1, a2); //Ret: Sequence
        },
        InsertCallback: function(a0/*Sequence*/, a1/*Single*/, a2/*TweenCallback*/) { 
            return CS.Call(4, 252, 6, true, a0, a1, a2); //Ret: Sequence
        },
        Join: function(a0/*Sequence*/, a1/*Tween*/) { 
            return CS.Call(4, 252, 7, true, a0, a1); //Ret: Sequence
        },
        OnComplete$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 8, true, native_t0, a0, a1); //Ret: T
        },
        OnKill$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 9, true, native_t0, a0, a1); //Ret: T
        },
        OnPause$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 10, true, native_t0, a0, a1); //Ret: T
        },
        OnPlay$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 11, true, native_t0, a0, a1); //Ret: T
        },
        OnRewind$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 12, true, native_t0, a0, a1); //Ret: T
        },
        OnStart$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 13, true, native_t0, a0, a1); //Ret: T
        },
        OnStepComplete$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 14, true, native_t0, a0, a1); //Ret: T
        },
        OnUpdate$1: function(t0, a0/*T*/, a1/*TweenCallback*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 15, true, native_t0, a0, a1); //Ret: T
        },
        OnWaypointChange$1: function(t0, a0/*T*/, a1/*TweenCallback`1*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 16, true, native_t0, a0, a1); //Ret: T
        },
        Prepend: function(a0/*Sequence*/, a1/*Tween*/) { 
            return CS.Call(4, 252, 17, true, a0, a1); //Ret: Sequence
        },
        PrependCallback: function(a0/*Sequence*/, a1/*TweenCallback*/) { 
            return CS.Call(4, 252, 18, true, a0, a1); //Ret: Sequence
        },
        PrependInterval: function(a0/*Sequence*/, a1/*Single*/) { 
            return CS.Call(4, 252, 19, true, a0, a1); //Ret: Sequence
        },
        SetAs$1$$T$$Tween: function(t0, a0/*T*/, a1/*Tween*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 20, true, native_t0, a0, a1); //Ret: T
        },
        SetAs$1$$T$$TweenParams: function(t0, a0/*T*/, a1/*TweenParams*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 21, true, native_t0, a0, a1); //Ret: T
        },
        SetAutoKill$1$$T$$Boolean: function(t0, a0/*T*/, a1/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 22, true, native_t0, a0, a1); //Ret: T
        },
        SetAutoKill$1$$T: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 23, true, native_t0, a0); //Ret: T
        },
        SetDelay$1: function(t0, a0/*T*/, a1/*Single*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 24, true, native_t0, a0, a1); //Ret: T
        },
        SetEase$1$$T$$Ease$$Single$$Single: function(t0, a0/*T*/, a1/*Ease*/, a2/*Single*/, a3/*Single*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 25, true, native_t0, a0, a1, a2, a3); //Ret: T
        },
        SetEase$1$$T$$Ease$$Single: function(t0, a0/*T*/, a1/*Ease*/, a2/*Single*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 26, true, native_t0, a0, a1, a2); //Ret: T
        },
        SetEase$1$$T$$Ease: function(t0, a0/*T*/, a1/*Ease*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 27, true, native_t0, a0, a1); //Ret: T
        },
        SetEase$1$$T$$EaseFunction: function(t0, a0/*T*/, a1/*EaseFunction*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 28, true, native_t0, a0, a1); //Ret: T
        },
        SetEase$1$$T$$AnimationCurve: function(t0, a0/*T*/, a1/*AnimationCurve*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 29, true, native_t0, a0, a1); //Ret: T
        },
        SetId$1: function(t0, a0/*T*/, a1/*Object*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 30, true, native_t0, a0, a1); //Ret: T
        },
        SetLookAt$$TweenerCore$3$Vector3$Path$PathOptions$$Transform$$Nullable$1$Vector3$$Nullable$1$Vector3: function(a0/*TweenerCore`3*/, a1/*Transform*/, a2/*Nullable`1*/, a3/*Nullable`1*/) { 
            return CS.Call(4, 252, 31, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        SetLookAt$$TweenerCore$3$Vector3$Path$PathOptions$$Vector3$$Nullable$1$Vector3$$Nullable$1$Vector3: function(a0/*TweenerCore`3*/, a1/*Vector3*/, a2/*Nullable`1*/, a3/*Nullable`1*/) { 
            return CS.Call(4, 252, 32, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        SetLookAt$$TweenerCore$3$Vector3$Path$PathOptions$$Single$$Nullable$1$Vector3$$Nullable$1$Vector3: function(a0/*TweenerCore`3*/, a1/*Single*/, a2/*Nullable`1*/, a3/*Nullable`1*/) { 
            return CS.Call(4, 252, 33, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        SetLoops$1$$T$$Int32$$LoopType: function(t0, a0/*T*/, a1/*Int32*/, a2/*LoopType*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 34, true, native_t0, a0, a1, a2); //Ret: T
        },
        SetLoops$1$$T$$Int32: function(t0, a0/*T*/, a1/*Int32*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 35, true, native_t0, a0, a1); //Ret: T
        },
        SetOptions$$TweenerCore$3$Color$Color$ColorOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 252, 36, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Rect$Rect$RectOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 252, 37, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector4$Vector4$VectorOptions$$AxisConstraint$$Boolean: function(a0/*TweenerCore`3*/, a1/*AxisConstraint*/, a2/*Boolean*/) { 
            return CS.Call(4, 252, 38, true, a0, a1, a2); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector3$Vector3$VectorOptions$$AxisConstraint$$Boolean: function(a0/*TweenerCore`3*/, a1/*AxisConstraint*/, a2/*Boolean*/) { 
            return CS.Call(4, 252, 39, true, a0, a1, a2); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector4$Vector4$VectorOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 252, 40, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector3$Path$PathOptions$$AxisConstraint$$AxisConstraint: function(a0/*TweenerCore`3*/, a1/*AxisConstraint*/, a2/*AxisConstraint*/) { 
            return CS.Call(4, 252, 41, true, a0, a1, a2); //Ret: TweenerCore`3
        },
        SetOptions$$TweenerCore$3$Vector3$Path$PathOptions$$Boolean$$AxisConstraint$$AxisConstraint: function(a0/*TweenerCore`3*/, a1/*Boolean*/, a2/*AxisConstraint*/, a3/*AxisConstraint*/) { 
            return CS.Call(4, 252, 42, true, a0, a1, a2, a3); //Ret: TweenerCore`3
        },
        SetOptions$$TweenerCore$3$Vector3$Vector3$Array$Vector3ArrayOptions$$AxisConstraint$$Boolean: function(a0/*TweenerCore`3*/, a1/*AxisConstraint*/, a2/*Boolean*/) { 
            return CS.Call(4, 252, 43, true, a0, a1, a2); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$String$String$StringOptions$$Boolean$$ScrambleMode$$String: function(a0/*TweenerCore`3*/, a1/*Boolean*/, a2/*ScrambleMode*/, a3/*String*/) { 
            return CS.Call(4, 252, 44, true, a0, a1, a2, a3); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector3$Vector3$Array$Vector3ArrayOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 252, 45, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector3$Vector3$VectorOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 252, 46, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Single$Single$FloatOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 252, 47, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector2$Vector2$VectorOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 252, 48, true, a0, a1); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Vector2$Vector2$VectorOptions$$AxisConstraint$$Boolean: function(a0/*TweenerCore`3*/, a1/*AxisConstraint*/, a2/*Boolean*/) { 
            return CS.Call(4, 252, 49, true, a0, a1, a2); //Ret: Tweener
        },
        SetOptions$$TweenerCore$3$Quaternion$Vector3$QuaternionOptions$$Boolean: function(a0/*TweenerCore`3*/, a1/*Boolean*/) { 
            return CS.Call(4, 252, 50, true, a0, a1); //Ret: Tweener
        },
        SetRecyclable$1$$T$$Boolean: function(t0, a0/*T*/, a1/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 51, true, native_t0, a0, a1); //Ret: T
        },
        SetRecyclable$1$$T: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 52, true, native_t0, a0); //Ret: T
        },
        SetRelative$1$$T$$Boolean: function(t0, a0/*T*/, a1/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 53, true, native_t0, a0, a1); //Ret: T
        },
        SetRelative$1$$T: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 54, true, native_t0, a0); //Ret: T
        },
        SetSpeedBased$1$$T$$Boolean: function(t0, a0/*T*/, a1/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 55, true, native_t0, a0, a1); //Ret: T
        },
        SetSpeedBased$1$$T: function(t0, a0/*T*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 56, true, native_t0, a0); //Ret: T
        },
        SetTarget$1: function(t0, a0/*T*/, a1/*Object*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 57, true, native_t0, a0, a1); //Ret: T
        },
        SetUpdate$1$$T$$UpdateType$$Boolean: function(t0, a0/*T*/, a1/*UpdateType*/, a2/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 58, true, native_t0, a0, a1, a2); //Ret: T
        },
        SetUpdate$1$$T$$Boolean: function(t0, a0/*T*/, a1/*Boolean*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 59, true, native_t0, a0, a1); //Ret: T
        },
        SetUpdate$1$$T$$UpdateType: function(t0, a0/*T*/, a1/*UpdateType*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 252, 60, true, native_t0, a0, a1); //Ret: T
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$TweenSettingsExtensions);

// DG.Tweening.Tween
var DG$Tweening$Tween = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Tween",
    Kind: "Class",
    baseTypeName: "DG.Tweening.Core.ABSSequentiable",
    fields: {
        timeScale: {
            get: function() { return CS.Call(0, 253, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 253, 0, false, this, v); }
        },
        isBackwards: {
            get: function() { return CS.Call(0, 253, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 253, 1, false, this, v); }
        },
        id: {
            get: function() { return CS.Call(0, 253, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 253, 2, false, this, v); }
        },
        target: {
            get: function() { return CS.Call(0, 253, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 253, 3, false, this, v); }
        },
        easeOvershootOrAmplitude: {
            get: function() { return CS.Call(0, 253, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 253, 4, false, this, v); }
        },
        easePeriod: {
            get: function() { return CS.Call(0, 253, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 253, 5, false, this, v); }
        },
    },
    definition: {
        get_fullPosition: function() { return CS.Call(2, 253, 0, false, this); },
        set_fullPosition: function(v) { return CS.Call(3, 253, 0, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Tween);

// DG.Tweening.Tweener
var DG$Tweening$Tweener = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Tweener",
    Kind: "Class",
    baseTypeName: "DG.Tweening.Tween",
    definition: {
        ChangeEndValue$$Object$$Boolean: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 254, 0, false, this, a0, a1); //Ret: Tweener
        },
        ChangeEndValue$$Object$$Single$$Boolean: function(a0/*Object*/, a1/*Single*/, a2/*Boolean*/) { 
            return CS.Call(4, 254, 1, false, this, a0, a1, a2); //Ret: Tweener
        },
        ChangeStartValue: function(a0/*Object*/, a1/*Single*/) { 
            return CS.Call(4, 254, 2, false, this, a0, a1); //Ret: Tweener
        },
        ChangeValues: function(a0/*Object*/, a1/*Object*/, a2/*Single*/) { 
            return CS.Call(4, 254, 3, false, this, a0, a1, a2); //Ret: Tweener
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Tweener);

// DG.Tweening.Core.ABSSequentiable
var DG$Tweening$Core$ABSSequentiable = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Core.ABSSequentiable",
    Kind: "Class",
    baseTypeName: "System.Object",
};
jsb_ReplaceOrPushJsType(DG$Tweening$Core$ABSSequentiable);

// DG.Tweening.Core.Debugger
var DG$Tweening$Core$Debugger = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Core.Debugger",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        logPriority: {
            get: function() { return CS.Call(0, 256, 0, true); }, 
            set: function(v) { return CS.Call(1, 256, 0, true, v); }
        },
    },
    staticDefinition: {
        Log: function(a0/*Object*/) { 
            return CS.Call(4, 256, 0, true, a0); //Ret: Void
        },
        LogError: function(a0/*Object*/) { 
            return CS.Call(4, 256, 1, true, a0); //Ret: Void
        },
        LogInvalidTween: function(a0/*Tween*/) { 
            return CS.Call(4, 256, 2, true, a0); //Ret: Void
        },
        LogMissingMaterialProperty: function(a0/*String*/) { 
            return CS.Call(4, 256, 3, true, a0); //Ret: Void
        },
        LogNestedTween: function(a0/*Tween*/) { 
            return CS.Call(4, 256, 4, true, a0); //Ret: Void
        },
        LogNonPathTween: function(a0/*Tween*/) { 
            return CS.Call(4, 256, 5, true, a0); //Ret: Void
        },
        LogNullTween: function(a0/*Tween*/) { 
            return CS.Call(4, 256, 6, true, a0); //Ret: Void
        },
        LogRemoveActiveTweenError: function(a0/*String*/) { 
            return CS.Call(4, 256, 7, true, a0); //Ret: Void
        },
        LogReport: function(a0/*Object*/) { 
            return CS.Call(4, 256, 8, true, a0); //Ret: Void
        },
        LogWarning: function(a0/*Object*/) { 
            return CS.Call(4, 256, 9, true, a0); //Ret: Void
        },
        SetLogPriority: function(a0/*LogBehaviour*/) { 
            return CS.Call(4, 256, 10, true, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Core$Debugger);

// DG.Tweening.Core.DOTweenComponent
var DG$Tweening$Core$DOTweenComponent = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Core.DOTweenComponent",
    Kind: "Class",
    baseTypeName: "UnityEngine.MonoBehaviour",
    interfaceNames: ["DG.Tweening.IDOTweenInit"],
    fields: {
        inspectorUpdater: {
            get: function() { return CS.Call(0, 257, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 257, 0, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 257, 0, true, this); },
        SetCapacity: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 257, 0, false, this, a0, a1); //Ret: IDOTweenInit
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Core$DOTweenComponent);

// DG.Tweening.Core.DOTweenSettings
var DG$Tweening$Core$DOTweenSettings = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Core.DOTweenSettings",
    Kind: "Class",
    baseTypeName: "UnityEngine.ScriptableObject",
    staticFields: {
        AssetName: {
            get: function() { return CS.Call(0, 258, 0, true); }, 
            set: function(v) { return CS.Call(1, 258, 0, true, v); }
        },
    },
    fields: {
        useSafeMode: {
            get: function() { return CS.Call(0, 258, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 1, false, this, v); }
        },
        timeScale: {
            get: function() { return CS.Call(0, 258, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 2, false, this, v); }
        },
        useSmoothDeltaTime: {
            get: function() { return CS.Call(0, 258, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 3, false, this, v); }
        },
        showUnityEditorReport: {
            get: function() { return CS.Call(0, 258, 4, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 4, false, this, v); }
        },
        logBehaviour: {
            get: function() { return CS.Call(0, 258, 5, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 5, false, this, v); }
        },
        drawGizmos: {
            get: function() { return CS.Call(0, 258, 6, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 6, false, this, v); }
        },
        defaultRecyclable: {
            get: function() { return CS.Call(0, 258, 7, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 7, false, this, v); }
        },
        defaultAutoPlay: {
            get: function() { return CS.Call(0, 258, 8, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 8, false, this, v); }
        },
        defaultUpdateType: {
            get: function() { return CS.Call(0, 258, 9, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 9, false, this, v); }
        },
        defaultTimeScaleIndependent: {
            get: function() { return CS.Call(0, 258, 10, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 10, false, this, v); }
        },
        defaultEaseType: {
            get: function() { return CS.Call(0, 258, 11, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 11, false, this, v); }
        },
        defaultEaseOvershootOrAmplitude: {
            get: function() { return CS.Call(0, 258, 12, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 12, false, this, v); }
        },
        defaultEasePeriod: {
            get: function() { return CS.Call(0, 258, 13, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 13, false, this, v); }
        },
        defaultAutoKill: {
            get: function() { return CS.Call(0, 258, 14, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 14, false, this, v); }
        },
        defaultLoopType: {
            get: function() { return CS.Call(0, 258, 15, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 15, false, this, v); }
        },
        storeSettingsLocation: {
            get: function() { return CS.Call(0, 258, 16, false, this); }, 
            set: function(v) { return CS.Call(1, 258, 16, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 258, 0, true, this); },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Core$DOTweenSettings);

// DG.Tweening.Core.Extensions
var DG$Tweening$Core$Extensions = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Core.Extensions",
    Kind: "Class",
    baseTypeName: "System.Object",
};
jsb_ReplaceOrPushJsType(DG$Tweening$Core$Extensions);

// DG.Tweening.Core.TweenerCore`3
var DG$Tweening$Core$TweenerCore$3 = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.Core.TweenerCore$3",
    Kind: "Class",
    baseTypeName: "DG.Tweening.Tweener",
    definition: {
        ChangeEndValue$$Object$$Boolean: function(a0/*Object*/, a1/*Boolean*/) { 
            return CS.Call(4, 260, 0, false, this, a0, a1); //Ret: Tweener
        },
        ChangeEndValue$$Object$$Single$$Boolean: function(a0/*Object*/, a1/*Single*/, a2/*Boolean*/) { 
            return CS.Call(4, 260, 1, false, this, a0, a1, a2); //Ret: Tweener
        },
        ChangeStartValue: function(a0/*Object*/, a1/*Single*/) { 
            return CS.Call(4, 260, 2, false, this, a0, a1); //Ret: Tweener
        },
        ChangeValues: function(a0/*Object*/, a1/*Object*/, a2/*Single*/) { 
            return CS.Call(4, 260, 3, false, this, a0, a1, a2); //Ret: Tweener
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$Core$TweenerCore$3);

// TestExtensionMethod
var TestExtensionMethod = 
{
    assemblyName: "Assembly-CSharp-firstpass, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "TestExtensionMethod",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetOrAddComponent$1: function(T, go) { 
            var t = go.GetComponent$1(T);
            if (t == null){
                t = go.AddComponent$1(T);
            }
            return t; //Ret: T
        },
    },
};
jsb_ReplaceOrPushJsType(TestExtensionMethod);

// APIExportTest
var APIExportTest = 
{
    assemblyName: "Assembly-CSharp-firstpass, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "APIExportTest",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        OnStaticDelegateFinish: {
            get: function() { return CS.Call(0, 262, 2, true); }, 
            set: function(v) { return CS.Call(1, 262, 2, true, v); }
        },
        StaticObject: {
            get: function() { return CS.Call(0, 262, 4, true); }, 
            set: function(v) { return CS.Call(1, 262, 4, true, v); }
        },
    },
    fields: {
        IDs: {
            get: function() { return CS.Call(0, 262, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 262, 0, false, this, v); }
        },
        OnDelegateFinish: {
            get: function() { return CS.Call(0, 262, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 262, 1, false, this, v); }
        },
        toggle: {
            get: function() { return CS.Call(0, 262, 3, false, this); }, 
            set: function(v) { return CS.Call(1, 262, 3, false, this, v); }
        },
    },
    staticDefinition: {
        get_StaticID: function() { return CS.Call(2, 262, 0, true); },
        set_StaticID: function(v) { return CS.Call(3, 262, 0, true, v); },
        add_OnStaticEventFinish: function(a0/*Action*/) { 
            return CS.Call(4, 262, 7, true, a0); //Ret: Void
        },
        remove_OnStaticEventFinish: function(a0/*Action*/) { 
            return CS.Call(4, 262, 8, true, a0); //Ret: Void
        },
        SendStaticEvent: function() { 
            return CS.Call(4, 262, 9, true); //Ret: Void
        },
        test123: function(a0/*Object[]*/) { 
            return CS.Call(4, 262, 10, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Void
        },
        testRefParams: function(a0/*String&*/, a1/*String&*/) { 
            return CS.Call(4, 262, 11, true, a0, a1); //Ret: Void
        },
        testReturnArray: function() { 
            return CS.Call(4, 262, 12, true); //Ret: RefObject[]
        },
        testReturnDic: function() { 
            return CS.Call(4, 262, 13, true); //Ret: Dictionary`2
        },
        testReturnHashSet: function() { 
            return CS.Call(4, 262, 14, true); //Ret: HashSet`1
        },
        testReturnList: function() { 
            return CS.Call(4, 262, 15, true); //Ret: List`1
        },
        testString: function(a0/*String[]*/) { 
            return CS.Call(4, 262, 16, true, jsb_formatParamsArray(0, a0, arguments)); //Ret: Void
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 262, 0, true, this); },
        ctor$$Int32: function(a0) { CS.Call(5, 262, 1, true, this, a0); },
        ctor$$IEnumerable: function(a0) { CS.Call(5, 262, 2, true, this, a0); },
        get_ID: function() { return CS.Call(2, 262, 1, false, this); },
        set_ID: function(v) { return CS.Call(3, 262, 1, false, this, v); },
        add_OnEventFinish: function(a0/*Action`1*/) { 
            return CS.Call(4, 262, 0, false, this, a0); //Ret: Void
        },
        AddDelegate: function(a0/*Action*/) { 
            return CS.Call(4, 262, 1, false, this, a0); //Ret: Void
        },
        AddEvent: function(a0/*Action`1*/) { 
            return CS.Call(4, 262, 2, false, this, a0); //Ret: Void
        },
        remove_OnEventFinish: function(a0/*Action`1*/) { 
            return CS.Call(4, 262, 3, false, this, a0); //Ret: Void
        },
        RemoveDelegate: function(a0/*Action*/) { 
            return CS.Call(4, 262, 4, false, this, a0); //Ret: Void
        },
        RemoveEvent: function(a0/*Action`1*/) { 
            return CS.Call(4, 262, 5, false, this, a0); //Ret: Void
        },
        SendEvent: function() { 
            return CS.Call(4, 262, 6, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(APIExportTest);

// APIExportTest+RefObject
var APIExportTest$RefObject = 
{
    assemblyName: "Assembly-CSharp-firstpass, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "APIExportTest.RefObject",
    Kind: "Class",
    baseTypeName: "System.Object",
    fields: {
        Name: {
            get: function() { return CS.Call(0, 263, 0, false, this); }, 
            set: function(v) { return CS.Call(1, 263, 0, false, this, v); }
        },
        x: {
            get: function() { return CS.Call(0, 263, 1, false, this); }, 
            set: function(v) { return CS.Call(1, 263, 1, false, this, v); }
        },
        y: {
            get: function() { return CS.Call(0, 263, 2, false, this); }, 
            set: function(v) { return CS.Call(1, 263, 2, false, this, v); }
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 263, 0, true, this); },
        PrintLog: function() { 
            return CS.Call(4, 263, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(APIExportTest$RefObject);

// System.Collections.IEnumerator
var System$Collections$IEnumerator = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Collections.IEnumerator",
    Kind: "Interface",
    definition: {
        get_Current: function() { return CS.Call(2, 264, 0, false, this); },
        set_Current: function(v) { return CS.Call(3, 264, 0, false, this, v); },
        MoveNext: function() { 
            return CS.Call(4, 264, 0, false, this); //Ret: Boolean
        },
        Reset: function() { 
            return CS.Call(4, 264, 1, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$IEnumerator);

// System.Collections.ICollection
var System$Collections$ICollection = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Collections.ICollection",
    Kind: "Interface",
    interfaceNames: ["System.Collections.IEnumerable"],
    definition: {
        get_Count: function() { return CS.Call(2, 265, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 265, 0, false, this, v); },
        get_IsSynchronized: function() { return CS.Call(2, 265, 1, false, this); },
        set_IsSynchronized: function(v) { return CS.Call(3, 265, 1, false, this, v); },
        get_SyncRoot: function() { return CS.Call(2, 265, 2, false, this); },
        set_SyncRoot: function(v) { return CS.Call(3, 265, 2, false, this, v); },
        CopyTo: function(a0/*Array*/, a1/*Int32*/) { 
            return CS.Call(4, 265, 0, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$ICollection);

// System.IDisposable
var System$IDisposable = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.IDisposable",
    Kind: "Interface",
    definition: {
        Dispose: function() { 
            return CS.Call(4, 266, 0, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$IDisposable);

// System.IConvertible
var System$IConvertible = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.IConvertible",
    Kind: "Interface",
    definition: {
        GetTypeCode: function() { 
            return CS.Call(4, 267, 0, false, this); //Ret: TypeCode
        },
        ToBoolean: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 1, false, this, a0); //Ret: Boolean
        },
        ToByte: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 2, false, this, a0); //Ret: Byte
        },
        ToChar: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 3, false, this, a0); //Ret: Char
        },
        ToDateTime: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 4, false, this, a0); //Ret: DateTime
        },
        ToDecimal: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 5, false, this, a0); //Ret: Decimal
        },
        ToDouble: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 6, false, this, a0); //Ret: Double
        },
        ToInt16: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 7, false, this, a0); //Ret: Int16
        },
        ToInt32: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 8, false, this, a0); //Ret: Int32
        },
        ToInt64: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 9, false, this, a0); //Ret: Int64
        },
        ToSByte: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 10, false, this, a0); //Ret: SByte
        },
        ToSingle: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 11, false, this, a0); //Ret: Single
        },
        toString: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 12, false, this, a0); //Ret: String
        },
        ToType: function(a0/*Type*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 267, 13, false, this, a0.get_FullName(), a1); //Ret: Object
        },
        ToUInt16: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 14, false, this, a0); //Ret: UInt16
        },
        ToUInt32: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 15, false, this, a0); //Ret: UInt32
        },
        ToUInt64: function(a0/*IFormatProvider*/) { 
            return CS.Call(4, 267, 16, false, this, a0); //Ret: UInt64
        },
    },
};
jsb_ReplaceOrPushJsType(System$IConvertible);

// System.Collections.IList
var System$Collections$IList = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Collections.IList",
    Kind: "Interface",
    interfaceNames: ["System.Collections.IEnumerable", "System.Collections.ICollection"],
    definition: {
        get_IsFixedSize: function() { return CS.Call(2, 268, 0, false, this); },
        set_IsFixedSize: function(v) { return CS.Call(3, 268, 0, false, this, v); },
        get_IsReadOnly: function() { return CS.Call(2, 268, 1, false, this); },
        set_IsReadOnly: function(v) { return CS.Call(3, 268, 1, false, this, v); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 268, 2, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 268, 2, false, this, ind0, v); },
        Add: function(a0/*Object*/) { 
            return CS.Call(4, 268, 0, false, this, a0); //Ret: Int32
        },
        Clear: function() { 
            return CS.Call(4, 268, 1, false, this); //Ret: Void
        },
        Contains: function(a0/*Object*/) { 
            return CS.Call(4, 268, 2, false, this, a0); //Ret: Boolean
        },
        IndexOf: function(a0/*Object*/) { 
            return CS.Call(4, 268, 3, false, this, a0); //Ret: Int32
        },
        Insert: function(a0/*Int32*/, a1/*Object*/) { 
            return CS.Call(4, 268, 4, false, this, a0, a1); //Ret: Void
        },
        Remove: function(a0/*Object*/) { 
            return CS.Call(4, 268, 5, false, this, a0); //Ret: Void
        },
        RemoveAt: function(a0/*Int32*/) { 
            return CS.Call(4, 268, 6, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$IList);

// System.Collections.IDictionary
var System$Collections$IDictionary = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Collections.IDictionary",
    Kind: "Interface",
    interfaceNames: ["System.Collections.IEnumerable", "System.Collections.ICollection"],
    definition: {
        get_IsFixedSize: function() { return CS.Call(2, 269, 0, false, this); },
        set_IsFixedSize: function(v) { return CS.Call(3, 269, 0, false, this, v); },
        get_IsReadOnly: function() { return CS.Call(2, 269, 1, false, this); },
        set_IsReadOnly: function(v) { return CS.Call(3, 269, 1, false, this, v); },
        get_Item$$Object: function(ind0) { return CS.Call(2, 269, 2, false, this, ind0); },
        set_Item$$Object: function(ind0, v) { return CS.Call(3, 269, 2, false, this, ind0, v); },
        get_Keys: function() { return CS.Call(2, 269, 3, false, this); },
        set_Keys: function(v) { return CS.Call(3, 269, 3, false, this, v); },
        get_Values: function() { return CS.Call(2, 269, 4, false, this); },
        set_Values: function(v) { return CS.Call(3, 269, 4, false, this, v); },
        Add: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 269, 0, false, this, a0, a1); //Ret: Void
        },
        Clear: function() { 
            return CS.Call(4, 269, 1, false, this); //Ret: Void
        },
        Contains: function(a0/*Object*/) { 
            return CS.Call(4, 269, 2, false, this, a0); //Ret: Boolean
        },
        GetEnumerator: function() { 
            return CS.Call(4, 269, 3, false, this); //Ret: IDictionaryEnumerator
        },
        Remove: function(a0/*Object*/) { 
            return CS.Call(4, 269, 4, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$IDictionary);

// System.Collections.Generic.List`1
var System$Collections$Generic$List$1 = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "CSList",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.IEnumerable", "System.Collections.ICollection", "System.Collections.IList", "System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1", "System.Collections.Generic.IList$1"],
    definition: {
        ctor: function(t0) { CS.Call(5, 270, 0, true, this, t0.getNativeType()); },
        ctor$$IEnumerable$1: function(t0, a0) { CS.Call(5, 270, 1, true, this, t0.getNativeType(), a0); },
        ctor$$Int32: function(t0, a0) { CS.Call(5, 270, 2, true, this, t0.getNativeType(), a0); },
        get_Capacity: function() { return CS.Call(2, 270, 0, false, this); },
        set_Capacity: function(v) { return CS.Call(3, 270, 0, false, this, v); },
        get_Count: function() { return CS.Call(2, 270, 1, false, this); },
        set_Count: function(v) { return CS.Call(3, 270, 1, false, this, v); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 270, 2, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 270, 2, false, this, ind0, v); },
        Add: function(a0/*T*/) { 
            return CS.Call(4, 270, 0, false, this, a0); //Ret: Void
        },
        AddRange: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 270, 1, false, this, a0); //Ret: Void
        },
        AsReadOnly: function() { 
            return CS.Call(4, 270, 2, false, this); //Ret: ReadOnlyCollection`1
        },
        BinarySearch$$Int32$$Int32$$T$$IComparer$1: function(a0/*Int32*/, a1/*Int32*/, a2/*T*/, a3/*IComparer`1*/) { 
            return CS.Call(4, 270, 3, false, this, a0, a1, a2, a3); //Ret: Int32
        },
        BinarySearch$$T$$IComparer$1: function(a0/*T*/, a1/*IComparer`1*/) { 
            return CS.Call(4, 270, 4, false, this, a0, a1); //Ret: Int32
        },
        BinarySearch$$T: function(a0/*T*/) { 
            return CS.Call(4, 270, 5, false, this, a0); //Ret: Int32
        },
        Clear: function() { 
            return CS.Call(4, 270, 6, false, this); //Ret: Void
        },
        Contains: function(a0/*T*/) { 
            return CS.Call(4, 270, 7, false, this, a0); //Ret: Boolean
        },
        ConvertAll$1: function(t0, a0/*Converter`2*/) { 
            var native_t0 = t0.getNativeType();
            return CS.Call(4, 270, 8, false, this, native_t0, a0); //Ret: List`1
        },
        CopyTo$$Int32$$T$Array$$Int32$$Int32: function(a0/*Int32*/, a1/*T[]*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 270, 9, false, this, a0, a1, a2, a3); //Ret: Void
        },
        CopyTo$$T$Array$$Int32: function(a0/*T[]*/, a1/*Int32*/) { 
            return CS.Call(4, 270, 10, false, this, a0, a1); //Ret: Void
        },
        CopyTo$$T$Array: function(a0/*T[]*/) { 
            return CS.Call(4, 270, 11, false, this, a0); //Ret: Void
        },
        Exists: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 270, 12, false, this, a0); //Ret: Boolean
        },
        Find: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 270, 13, false, this, a0); //Ret: T
        },
        FindAll: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 270, 14, false, this, a0); //Ret: List`1
        },
        FindIndex$$Int32$$Int32$$Predicate$1: function(a0/*Int32*/, a1/*Int32*/, a2/*Predicate`1*/) { 
            return CS.Call(4, 270, 15, false, this, a0, a1, a2); //Ret: Int32
        },
        FindIndex$$Int32$$Predicate$1: function(a0/*Int32*/, a1/*Predicate`1*/) { 
            return CS.Call(4, 270, 16, false, this, a0, a1); //Ret: Int32
        },
        FindIndex$$Predicate$1: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 270, 17, false, this, a0); //Ret: Int32
        },
        FindLast: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 270, 18, false, this, a0); //Ret: T
        },
        FindLastIndex$$Int32$$Int32$$Predicate$1: function(a0/*Int32*/, a1/*Int32*/, a2/*Predicate`1*/) { 
            return CS.Call(4, 270, 19, false, this, a0, a1, a2); //Ret: Int32
        },
        FindLastIndex$$Int32$$Predicate$1: function(a0/*Int32*/, a1/*Predicate`1*/) { 
            return CS.Call(4, 270, 20, false, this, a0, a1); //Ret: Int32
        },
        FindLastIndex$$Predicate$1: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 270, 21, false, this, a0); //Ret: Int32
        },
        ForEach: function(a0/*Action`1*/) { 
            return CS.Call(4, 270, 22, false, this, a0); //Ret: Void
        },
        GetEnumerator: function() { 
            return CS.Call(4, 270, 23, false, this); //Ret: Enumerator
        },
        GetRange: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 270, 24, false, this, a0, a1); //Ret: List`1
        },
        IndexOf$$T$$Int32$$Int32: function(a0/*T*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 270, 25, false, this, a0, a1, a2); //Ret: Int32
        },
        IndexOf$$T$$Int32: function(a0/*T*/, a1/*Int32*/) { 
            return CS.Call(4, 270, 26, false, this, a0, a1); //Ret: Int32
        },
        IndexOf$$T: function(a0/*T*/) { 
            return CS.Call(4, 270, 27, false, this, a0); //Ret: Int32
        },
        Insert: function(a0/*Int32*/, a1/*T*/) { 
            return CS.Call(4, 270, 28, false, this, a0, a1); //Ret: Void
        },
        InsertRange: function(a0/*Int32*/, a1/*IEnumerable`1*/) { 
            return CS.Call(4, 270, 29, false, this, a0, a1); //Ret: Void
        },
        LastIndexOf$$T$$Int32$$Int32: function(a0/*T*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 270, 30, false, this, a0, a1, a2); //Ret: Int32
        },
        LastIndexOf$$T$$Int32: function(a0/*T*/, a1/*Int32*/) { 
            return CS.Call(4, 270, 31, false, this, a0, a1); //Ret: Int32
        },
        LastIndexOf$$T: function(a0/*T*/) { 
            return CS.Call(4, 270, 32, false, this, a0); //Ret: Int32
        },
        Remove: function(a0/*T*/) { 
            return CS.Call(4, 270, 33, false, this, a0); //Ret: Boolean
        },
        RemoveAll: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 270, 34, false, this, a0); //Ret: Int32
        },
        RemoveAt: function(a0/*Int32*/) { 
            return CS.Call(4, 270, 35, false, this, a0); //Ret: Void
        },
        RemoveRange: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 270, 36, false, this, a0, a1); //Ret: Void
        },
        Reverse$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 270, 37, false, this, a0, a1); //Ret: Void
        },
        Reverse: function() { 
            return CS.Call(4, 270, 38, false, this); //Ret: Void
        },
        Sort$$Int32$$Int32$$IComparer$1: function(a0/*Int32*/, a1/*Int32*/, a2/*IComparer`1*/) { 
            return CS.Call(4, 270, 39, false, this, a0, a1, a2); //Ret: Void
        },
        Sort$$Comparison$1: function(a0/*Comparison`1*/) { 
            return CS.Call(4, 270, 40, false, this, a0); //Ret: Void
        },
        Sort$$IComparer$1: function(a0/*IComparer`1*/) { 
            return CS.Call(4, 270, 41, false, this, a0); //Ret: Void
        },
        Sort: function() { 
            return CS.Call(4, 270, 42, false, this); //Ret: Void
        },
        ToArray: function() { 
            return CS.Call(4, 270, 43, false, this); //Ret: T[]
        },
        TrimExcess: function() { 
            return CS.Call(4, 270, 44, false, this); //Ret: Void
        },
        TrueForAll: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 270, 45, false, this, a0); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Generic$List$1);

// System.Collections.Generic.Dictionary`2
var System$Collections$Generic$Dictionary$2 = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "CSDictionary",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.IEnumerable", "System.Runtime.Serialization.ISerializable", "System.Collections.ICollection", "System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1", "System.Collections.Generic.IDictionary$2", "System.Collections.IDictionary", "System.Runtime.Serialization.IDeserializationCallback"],
    definition: {
        ctor: function(t0, t1) { CS.Call(5, 271, 0, true, this, t0.getNativeType(), t1.getNativeType()); },
        ctor$$IEqualityComparer$1: function(t0, t1, a0) { CS.Call(5, 271, 1, true, this, t0.getNativeType(), t1.getNativeType(), a0); },
        ctor$$IDictionary$2: function(t0, t1, a0) { CS.Call(5, 271, 2, true, this, t0.getNativeType(), t1.getNativeType(), a0); },
        ctor$$Int32: function(t0, t1, a0) { CS.Call(5, 271, 3, true, this, t0.getNativeType(), t1.getNativeType(), a0); },
        ctor$$IDictionary$2$$IEqualityComparer$1: function(t0, t1, a0, a1) { CS.Call(5, 271, 4, true, this, t0.getNativeType(), t1.getNativeType(), a0, a1); },
        ctor$$Int32$$IEqualityComparer$1: function(t0, t1, a0, a1) { CS.Call(5, 271, 5, true, this, t0.getNativeType(), t1.getNativeType(), a0, a1); },
        get_Count: function() { return CS.Call(2, 271, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 271, 0, false, this, v); },
        get_Item$$TKey: function(ind0) { return CS.Call(2, 271, 1, false, this, ind0); },
        set_Item$$TKey: function(ind0, v) { return CS.Call(3, 271, 1, false, this, ind0, v); },
        get_Comparer: function() { return CS.Call(2, 271, 2, false, this); },
        set_Comparer: function(v) { return CS.Call(3, 271, 2, false, this, v); },
        get_Keys: function() { return CS.Call(2, 271, 3, false, this); },
        set_Keys: function(v) { return CS.Call(3, 271, 3, false, this, v); },
        get_Values: function() { return CS.Call(2, 271, 4, false, this); },
        set_Values: function(v) { return CS.Call(3, 271, 4, false, this, v); },
        Add: function(a0/*TKey*/, a1/*TValue*/) { 
            return CS.Call(4, 271, 0, false, this, a0, a1); //Ret: Void
        },
        Clear: function() { 
            return CS.Call(4, 271, 1, false, this); //Ret: Void
        },
        ContainsKey: function(a0/*TKey*/) { 
            return CS.Call(4, 271, 2, false, this, a0); //Ret: Boolean
        },
        ContainsValue: function(a0/*TValue*/) { 
            return CS.Call(4, 271, 3, false, this, a0); //Ret: Boolean
        },
        GetEnumerator: function() { 
            return CS.Call(4, 271, 4, false, this); //Ret: Enumerator
        },
        GetObjectData: function(a0/*SerializationInfo*/, a1/*StreamingContext*/) { 
            return CS.Call(4, 271, 5, false, this, a0, a1); //Ret: Void
        },
        OnDeserialization: function(a0/*Object*/) { 
            return CS.Call(4, 271, 6, false, this, a0); //Ret: Void
        },
        Remove: function(a0/*TKey*/) { 
            return CS.Call(4, 271, 7, false, this, a0); //Ret: Boolean
        },
        TryGetValue: function(a0/*TKey*/, a1/*TValue&*/) { 
            return CS.Call(4, 271, 8, false, this, a0, a1); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Generic$Dictionary$2);

// System.Collections.Generic.KeyValuePair`2
var System$Collections$Generic$KeyValuePair$2 = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "CSKeyValuePair",
    Kind: "Struct",
    baseTypeName: "System.ValueType",
    definition: {
        ctor: function(t0, t1) { CS.Call(5, 272, 0, true, this, t0.getNativeType(), t1.getNativeType()); },
        ctor$$TKey$$TValue: function(t0, t1, a0, a1) { CS.Call(5, 272, 1, true, this, t0.getNativeType(), t1.getNativeType(), a0, a1); },
        get_Key: function() { return CS.Call(2, 272, 0, false, this); },
        set_Key: function(v) { return CS.Call(3, 272, 0, false, this, v); },
        get_Value: function() { return CS.Call(2, 272, 1, false, this); },
        set_Value: function(v) { return CS.Call(3, 272, 1, false, this, v); },
        toString: function() { 
            return CS.Call(4, 272, 0, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Generic$KeyValuePair$2);

// System.Collections.Generic.Dictionary`2+KeyCollection
var System$Collections$Generic$Dictionary$2$KeyCollection = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "CSKeyCollection",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.IEnumerable", "System.Collections.ICollection", "System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1"],
    definition: {
        ctor: function(t0, t1, a0) { CS.Call(5, 273, 0, true, this, t0.getNativeType(), t1.getNativeType(), a0); },
        get_Count: function() { return CS.Call(2, 273, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 273, 0, false, this, v); },
        CopyTo: function(a0/*TKey[]*/, a1/*Int32*/) { 
            return CS.Call(4, 273, 0, false, this, a0, a1); //Ret: Void
        },
        GetEnumerator: function() { 
            return CS.Call(4, 273, 1, false, this); //Ret: Enumerator
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Generic$Dictionary$2$KeyCollection);

// System.Collections.Generic.Dictionary`2+ValueCollection
var System$Collections$Generic$Dictionary$2$ValueCollection = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "CSValueCollection",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.IEnumerable", "System.Collections.ICollection", "System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1"],
    definition: {
        ctor: function(t0, t1, a0) { CS.Call(5, 274, 0, true, this, t0.getNativeType(), t1.getNativeType(), a0); },
        get_Count: function() { return CS.Call(2, 274, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 274, 0, false, this, v); },
        CopyTo: function(a0/*TValue[]*/, a1/*Int32*/) { 
            return CS.Call(4, 274, 0, false, this, a0, a1); //Ret: Void
        },
        GetEnumerator: function() { 
            return CS.Call(4, 274, 1, false, this); //Ret: Enumerator
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Generic$Dictionary$2$ValueCollection);

// System.Collections.Generic.HashSet`1
var System$Collections$Generic$HashSet$1 = 
{
    assemblyName: "System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "CSHashSet",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.IEnumerable", "System.Runtime.Serialization.ISerializable", "System.Runtime.Serialization.IDeserializationCallback", "System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1"],
    staticDefinition: {
        CreateSetComparer: function() { 
            return CS.Call(4, 275, 22, true); //Ret: IEqualityComparer`1
        },
    },
    definition: {
        ctor: function(t0) { CS.Call(5, 275, 0, true, this, t0.getNativeType()); },
        ctor$$IEqualityComparer$1: function(t0, a0) { CS.Call(5, 275, 1, true, this, t0.getNativeType(), a0); },
        ctor$$IEnumerable$1: function(t0, a0) { CS.Call(5, 275, 2, true, this, t0.getNativeType(), a0); },
        ctor$$IEnumerable$1$$IEqualityComparer$1: function(t0, a0, a1) { CS.Call(5, 275, 3, true, this, t0.getNativeType(), a0, a1); },
        get_Count: function() { return CS.Call(2, 275, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 275, 0, false, this, v); },
        get_Comparer: function() { return CS.Call(2, 275, 1, false, this); },
        set_Comparer: function(v) { return CS.Call(3, 275, 1, false, this, v); },
        Add: function(a0/*T*/) { 
            return CS.Call(4, 275, 0, false, this, a0); //Ret: Boolean
        },
        Clear: function() { 
            return CS.Call(4, 275, 1, false, this); //Ret: Void
        },
        Contains: function(a0/*T*/) { 
            return CS.Call(4, 275, 2, false, this, a0); //Ret: Boolean
        },
        CopyTo$$T$Array$$Int32$$Int32: function(a0/*T[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 275, 3, false, this, a0, a1, a2); //Ret: Void
        },
        CopyTo$$T$Array$$Int32: function(a0/*T[]*/, a1/*Int32*/) { 
            return CS.Call(4, 275, 4, false, this, a0, a1); //Ret: Void
        },
        CopyTo$$T$Array: function(a0/*T[]*/) { 
            return CS.Call(4, 275, 5, false, this, a0); //Ret: Void
        },
        ExceptWith: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 275, 6, false, this, a0); //Ret: Void
        },
        GetEnumerator: function() { 
            return CS.Call(4, 275, 7, false, this); //Ret: Enumerator
        },
        GetObjectData: function(a0/*SerializationInfo*/, a1/*StreamingContext*/) { 
            return CS.Call(4, 275, 8, false, this, a0, a1); //Ret: Void
        },
        IntersectWith: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 275, 9, false, this, a0); //Ret: Void
        },
        IsProperSubsetOf: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 275, 10, false, this, a0); //Ret: Boolean
        },
        IsProperSupersetOf: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 275, 11, false, this, a0); //Ret: Boolean
        },
        IsSubsetOf: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 275, 12, false, this, a0); //Ret: Boolean
        },
        IsSupersetOf: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 275, 13, false, this, a0); //Ret: Boolean
        },
        OnDeserialization: function(a0/*Object*/) { 
            return CS.Call(4, 275, 14, false, this, a0); //Ret: Void
        },
        Overlaps: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 275, 15, false, this, a0); //Ret: Boolean
        },
        Remove: function(a0/*T*/) { 
            return CS.Call(4, 275, 16, false, this, a0); //Ret: Boolean
        },
        RemoveWhere: function(a0/*Predicate`1*/) { 
            return CS.Call(4, 275, 17, false, this, a0); //Ret: Int32
        },
        SetEquals: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 275, 18, false, this, a0); //Ret: Boolean
        },
        SymmetricExceptWith: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 275, 19, false, this, a0); //Ret: Void
        },
        TrimExcess: function() { 
            return CS.Call(4, 275, 20, false, this); //Ret: Void
        },
        UnionWith: function(a0/*IEnumerable`1*/) { 
            return CS.Call(4, 275, 21, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Generic$HashSet$1);

// System.Collections.Hashtable
var System$Collections$Hashtable = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Collections.Hashtable",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.IEnumerable", "System.ICloneable", "System.Runtime.Serialization.ISerializable", "System.Collections.ICollection", "System.Collections.IDictionary", "System.Runtime.Serialization.IDeserializationCallback"],
    staticDefinition: {
        Synchronized: function(a0/*Hashtable*/) { 
            return CS.Call(4, 276, 11, true, a0); //Ret: Hashtable
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 276, 0, true, this); },
        ctor$$Int32$$Single: function(a0, a1) { CS.Call(5, 276, 1, true, this, a0, a1); },
        ctor$$Int32: function(a0) { CS.Call(5, 276, 2, true, this, a0); },
        ctor$$IDictionary$$Single: function(a0, a1) { CS.Call(5, 276, 3, true, this, a0, a1); },
        ctor$$IDictionary: function(a0) { CS.Call(5, 276, 4, true, this, a0); },
        ctor$$IDictionary$$IEqualityComparer: function(a0, a1) { CS.Call(5, 276, 5, true, this, a0, a1); },
        ctor$$IDictionary$$Single$$IEqualityComparer: function(a0, a1, a2) { CS.Call(5, 276, 6, true, this, a0, a1, a2); },
        ctor$$IEqualityComparer: function(a0) { CS.Call(5, 276, 7, true, this, a0); },
        ctor$$Int32$$IEqualityComparer: function(a0, a1) { CS.Call(5, 276, 8, true, this, a0, a1); },
        ctor$$Int32$$Single$$IEqualityComparer: function(a0, a1, a2) { CS.Call(5, 276, 9, true, this, a0, a1, a2); },
        get_Count: function() { return CS.Call(2, 276, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 276, 0, false, this, v); },
        get_IsSynchronized: function() { return CS.Call(2, 276, 1, false, this); },
        set_IsSynchronized: function(v) { return CS.Call(3, 276, 1, false, this, v); },
        get_SyncRoot: function() { return CS.Call(2, 276, 2, false, this); },
        set_SyncRoot: function(v) { return CS.Call(3, 276, 2, false, this, v); },
        get_IsFixedSize: function() { return CS.Call(2, 276, 3, false, this); },
        set_IsFixedSize: function(v) { return CS.Call(3, 276, 3, false, this, v); },
        get_IsReadOnly: function() { return CS.Call(2, 276, 4, false, this); },
        set_IsReadOnly: function(v) { return CS.Call(3, 276, 4, false, this, v); },
        get_Keys: function() { return CS.Call(2, 276, 5, false, this); },
        set_Keys: function(v) { return CS.Call(3, 276, 5, false, this, v); },
        get_Values: function() { return CS.Call(2, 276, 6, false, this); },
        set_Values: function(v) { return CS.Call(3, 276, 6, false, this, v); },
        get_Item$$Object: function(ind0) { return CS.Call(2, 276, 7, false, this, ind0); },
        set_Item$$Object: function(ind0, v) { return CS.Call(3, 276, 7, false, this, ind0, v); },
        Add: function(a0/*Object*/, a1/*Object*/) { 
            return CS.Call(4, 276, 0, false, this, a0, a1); //Ret: Void
        },
        Clear: function() { 
            return CS.Call(4, 276, 1, false, this); //Ret: Void
        },
        Clone: function() { 
            return CS.Call(4, 276, 2, false, this); //Ret: Object
        },
        Contains: function(a0/*Object*/) { 
            return CS.Call(4, 276, 3, false, this, a0); //Ret: Boolean
        },
        ContainsKey: function(a0/*Object*/) { 
            return CS.Call(4, 276, 4, false, this, a0); //Ret: Boolean
        },
        ContainsValue: function(a0/*Object*/) { 
            return CS.Call(4, 276, 5, false, this, a0); //Ret: Boolean
        },
        CopyTo: function(a0/*Array*/, a1/*Int32*/) { 
            return CS.Call(4, 276, 6, false, this, a0, a1); //Ret: Void
        },
        GetEnumerator: function() { 
            return CS.Call(4, 276, 7, false, this); //Ret: IDictionaryEnumerator
        },
        GetObjectData: function(a0/*SerializationInfo*/, a1/*StreamingContext*/) { 
            return CS.Call(4, 276, 8, false, this, a0, a1); //Ret: Void
        },
        OnDeserialization: function(a0/*Object*/) { 
            return CS.Call(4, 276, 9, false, this, a0); //Ret: Void
        },
        Remove: function(a0/*Object*/) { 
            return CS.Call(4, 276, 10, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$Hashtable);

// System.WeakReference
var System$WeakReference = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.WeakReference",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Runtime.Serialization.ISerializable"],
    definition: {
        ctor$$Object: function(a0) { CS.Call(5, 277, 0, true, this, a0); },
        ctor$$Object$$Boolean: function(a0, a1) { CS.Call(5, 277, 1, true, this, a0, a1); },
        get_IsAlive: function() { return CS.Call(2, 277, 0, false, this); },
        set_IsAlive: function(v) { return CS.Call(3, 277, 0, false, this, v); },
        get_Target: function() { return CS.Call(2, 277, 1, false, this); },
        set_Target: function(v) { return CS.Call(3, 277, 1, false, this, v); },
        get_TrackResurrection: function() { return CS.Call(2, 277, 2, false, this); },
        set_TrackResurrection: function(v) { return CS.Call(3, 277, 2, false, this, v); },
        GetObjectData: function(a0/*SerializationInfo*/, a1/*StreamingContext*/) { 
            return CS.Call(4, 277, 0, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$WeakReference);

// System.Diagnostics.Stopwatch
var System$Diagnostics$Stopwatch = 
{
    assemblyName: "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Diagnostics.Stopwatch",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        Frequency: {
            get: function() { return CS.Call(0, 278, 0, true); }, 
            set: function(v) { return CS.Call(1, 278, 0, true, v); }
        },
        IsHighResolution: {
            get: function() { return CS.Call(0, 278, 1, true); }, 
            set: function(v) { return CS.Call(1, 278, 1, true, v); }
        },
    },
    staticDefinition: {
        GetTimestamp: function() { 
            return CS.Call(4, 278, 3, true); //Ret: Int64
        },
        StartNew: function() { 
            return CS.Call(4, 278, 4, true); //Ret: Stopwatch
        },
    },
    definition: {
        ctor: function() { CS.Call(5, 278, 0, true, this); },
        get_Elapsed: function() { return CS.Call(2, 278, 0, false, this); },
        set_Elapsed: function(v) { return CS.Call(3, 278, 0, false, this, v); },
        get_ElapsedMilliseconds: function() { return CS.Call(2, 278, 1, false, this); },
        set_ElapsedMilliseconds: function(v) { return CS.Call(3, 278, 1, false, this, v); },
        get_ElapsedTicks: function() { return CS.Call(2, 278, 2, false, this); },
        set_ElapsedTicks: function(v) { return CS.Call(3, 278, 2, false, this, v); },
        get_IsRunning: function() { return CS.Call(2, 278, 3, false, this); },
        set_IsRunning: function(v) { return CS.Call(3, 278, 3, false, this, v); },
        Reset: function() { 
            return CS.Call(4, 278, 0, false, this); //Ret: Void
        },
        Start: function() { 
            return CS.Call(4, 278, 1, false, this); //Ret: Void
        },
        Stop: function() { 
            return CS.Call(4, 278, 2, false, this); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Diagnostics$Stopwatch);

// System.Math
var System$Math = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Math",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        E: {
            get: function() { return CS.Call(0, 279, 0, true); }, 
            set: function(v) { return CS.Call(1, 279, 0, true, v); }
        },
        PI: {
            get: function() { return CS.Call(0, 279, 1, true); }, 
            set: function(v) { return CS.Call(1, 279, 1, true, v); }
        },
    },
    staticDefinition: {
        Abs$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 279, 0, true, a0); //Ret: Int64
        },
        Abs$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 279, 1, true, a0); //Ret: SByte
        },
        Abs$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 279, 2, true, a0); //Ret: Int16
        },
        Abs$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 279, 3, true, a0); //Ret: Int32
        },
        Abs$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 279, 4, true, a0); //Ret: Decimal
        },
        Abs$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 279, 5, true, a0); //Ret: Double
        },
        Abs$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 279, 6, true, a0); //Ret: Single
        },
        Acos: function(a0/*Double*/) { 
            return CS.Call(4, 279, 7, true, a0); //Ret: Double
        },
        Asin: function(a0/*Double*/) { 
            return CS.Call(4, 279, 8, true, a0); //Ret: Double
        },
        Atan: function(a0/*Double*/) { 
            return CS.Call(4, 279, 9, true, a0); //Ret: Double
        },
        Atan2: function(a0/*Double*/, a1/*Double*/) { 
            return CS.Call(4, 279, 10, true, a0, a1); //Ret: Double
        },
        BigMul: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 279, 11, true, a0, a1); //Ret: Int64
        },
        Ceiling$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 279, 12, true, a0); //Ret: Double
        },
        Ceiling$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 279, 13, true, a0); //Ret: Decimal
        },
        Cos: function(a0/*Double*/) { 
            return CS.Call(4, 279, 14, true, a0); //Ret: Double
        },
        Cosh: function(a0/*Double*/) { 
            return CS.Call(4, 279, 15, true, a0); //Ret: Double
        },
        DivRem$$Int64$$Int64$$Int64: function(a0/*Int64*/, a1/*Int64*/, a2/*Int64&*/) { 
            return CS.Call(4, 279, 16, true, a0, a1, a2); //Ret: Int64
        },
        DivRem$$Int32$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/, a2/*Int32&*/) { 
            return CS.Call(4, 279, 17, true, a0, a1, a2); //Ret: Int32
        },
        Exp: function(a0/*Double*/) { 
            return CS.Call(4, 279, 18, true, a0); //Ret: Double
        },
        Floor$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 279, 19, true, a0); //Ret: Double
        },
        Floor$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 279, 20, true, a0); //Ret: Decimal
        },
        IEEERemainder: function(a0/*Double*/, a1/*Double*/) { 
            return CS.Call(4, 279, 21, true, a0, a1); //Ret: Double
        },
        Log$$Double$$Double: function(a0/*Double*/, a1/*Double*/) { 
            return CS.Call(4, 279, 22, true, a0, a1); //Ret: Double
        },
        Log$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 279, 23, true, a0); //Ret: Double
        },
        Log10: function(a0/*Double*/) { 
            return CS.Call(4, 279, 24, true, a0); //Ret: Double
        },
        Max$$UInt16$$UInt16: function(a0/*UInt16*/, a1/*UInt16*/) { 
            return CS.Call(4, 279, 25, true, a0, a1); //Ret: UInt16
        },
        Max$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 279, 26, true, a0, a1); //Ret: Single
        },
        Max$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 279, 27, true, a0, a1); //Ret: Int32
        },
        Max$$Double$$Double: function(a0/*Double*/, a1/*Double*/) { 
            return CS.Call(4, 279, 28, true, a0, a1); //Ret: Double
        },
        Max$$Byte$$Byte: function(a0/*Byte*/, a1/*Byte*/) { 
            return CS.Call(4, 279, 29, true, a0, a1); //Ret: Byte
        },
        Max$$Decimal$$Decimal: function(a0/*Decimal*/, a1/*Decimal*/) { 
            return CS.Call(4, 279, 30, true, a0, a1); //Ret: Decimal
        },
        Max$$UInt32$$UInt32: function(a0/*UInt32*/, a1/*UInt32*/) { 
            return CS.Call(4, 279, 31, true, a0, a1); //Ret: UInt32
        },
        Max$$UInt64$$UInt64: function(a0/*UInt64*/, a1/*UInt64*/) { 
            return CS.Call(4, 279, 32, true, a0, a1); //Ret: UInt64
        },
        Max$$Int16$$Int16: function(a0/*Int16*/, a1/*Int16*/) { 
            return CS.Call(4, 279, 33, true, a0, a1); //Ret: Int16
        },
        Max$$Int64$$Int64: function(a0/*Int64*/, a1/*Int64*/) { 
            return CS.Call(4, 279, 34, true, a0, a1); //Ret: Int64
        },
        Max$$SByte$$SByte: function(a0/*SByte*/, a1/*SByte*/) { 
            return CS.Call(4, 279, 35, true, a0, a1); //Ret: SByte
        },
        Min$$UInt16$$UInt16: function(a0/*UInt16*/, a1/*UInt16*/) { 
            return CS.Call(4, 279, 36, true, a0, a1); //Ret: UInt16
        },
        Min$$Double$$Double: function(a0/*Double*/, a1/*Double*/) { 
            return CS.Call(4, 279, 37, true, a0, a1); //Ret: Double
        },
        Min$$Single$$Single: function(a0/*Single*/, a1/*Single*/) { 
            return CS.Call(4, 279, 38, true, a0, a1); //Ret: Single
        },
        Min$$UInt64$$UInt64: function(a0/*UInt64*/, a1/*UInt64*/) { 
            return CS.Call(4, 279, 39, true, a0, a1); //Ret: UInt64
        },
        Min$$Decimal$$Decimal: function(a0/*Decimal*/, a1/*Decimal*/) { 
            return CS.Call(4, 279, 40, true, a0, a1); //Ret: Decimal
        },
        Min$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 279, 41, true, a0, a1); //Ret: Int32
        },
        Min$$Int16$$Int16: function(a0/*Int16*/, a1/*Int16*/) { 
            return CS.Call(4, 279, 42, true, a0, a1); //Ret: Int16
        },
        Min$$UInt32$$UInt32: function(a0/*UInt32*/, a1/*UInt32*/) { 
            return CS.Call(4, 279, 43, true, a0, a1); //Ret: UInt32
        },
        Min$$Int64$$Int64: function(a0/*Int64*/, a1/*Int64*/) { 
            return CS.Call(4, 279, 44, true, a0, a1); //Ret: Int64
        },
        Min$$SByte$$SByte: function(a0/*SByte*/, a1/*SByte*/) { 
            return CS.Call(4, 279, 45, true, a0, a1); //Ret: SByte
        },
        Min$$Byte$$Byte: function(a0/*Byte*/, a1/*Byte*/) { 
            return CS.Call(4, 279, 46, true, a0, a1); //Ret: Byte
        },
        Pow: function(a0/*Double*/, a1/*Double*/) { 
            return CS.Call(4, 279, 47, true, a0, a1); //Ret: Double
        },
        Round$$Decimal$$Int32$$MidpointRounding: function(a0/*Decimal*/, a1/*Int32*/, a2/*MidpointRounding*/) { 
            return CS.Call(4, 279, 48, true, a0, a1, a2); //Ret: Decimal
        },
        Round$$Double$$Int32$$MidpointRounding: function(a0/*Double*/, a1/*Int32*/, a2/*MidpointRounding*/) { 
            return CS.Call(4, 279, 49, true, a0, a1, a2); //Ret: Double
        },
        Round$$Decimal$$MidpointRounding: function(a0/*Decimal*/, a1/*MidpointRounding*/) { 
            return CS.Call(4, 279, 50, true, a0, a1); //Ret: Decimal
        },
        Round$$Decimal$$Int32: function(a0/*Decimal*/, a1/*Int32*/) { 
            return CS.Call(4, 279, 51, true, a0, a1); //Ret: Decimal
        },
        Round$$Double$$MidpointRounding: function(a0/*Double*/, a1/*MidpointRounding*/) { 
            return CS.Call(4, 279, 52, true, a0, a1); //Ret: Double
        },
        Round$$Double$$Int32: function(a0/*Double*/, a1/*Int32*/) { 
            return CS.Call(4, 279, 53, true, a0, a1); //Ret: Double
        },
        Round$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 279, 54, true, a0); //Ret: Decimal
        },
        Round$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 279, 55, true, a0); //Ret: Double
        },
        Sign$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 279, 56, true, a0); //Ret: Int32
        },
        Sign$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 279, 57, true, a0); //Ret: Int32
        },
        Sign$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 279, 58, true, a0); //Ret: Int32
        },
        Sign$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 279, 59, true, a0); //Ret: Int32
        },
        Sign$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 279, 60, true, a0); //Ret: Int32
        },
        Sign$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 279, 61, true, a0); //Ret: Int32
        },
        Sign$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 279, 62, true, a0); //Ret: Int32
        },
        Sin: function(a0/*Double*/) { 
            return CS.Call(4, 279, 63, true, a0); //Ret: Double
        },
        Sinh: function(a0/*Double*/) { 
            return CS.Call(4, 279, 64, true, a0); //Ret: Double
        },
        Sqrt: function(a0/*Double*/) { 
            return CS.Call(4, 279, 65, true, a0); //Ret: Double
        },
        Tan: function(a0/*Double*/) { 
            return CS.Call(4, 279, 66, true, a0); //Ret: Double
        },
        Tanh: function(a0/*Double*/) { 
            return CS.Call(4, 279, 67, true, a0); //Ret: Double
        },
        Truncate$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 279, 68, true, a0); //Ret: Double
        },
        Truncate$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 279, 69, true, a0); //Ret: Decimal
        },
    },
};
jsb_ReplaceOrPushJsType(System$Math);

// System.Random
var System$Random = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Random",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        ctor: function() { CS.Call(5, 280, 0, true, this); },
        ctor$$Int32: function(a0) { CS.Call(5, 280, 1, true, this, a0); },
        Next$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 280, 0, false, this, a0, a1); //Ret: Int32
        },
        Next$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 280, 1, false, this, a0); //Ret: Int32
        },
        Next: function() { 
            return CS.Call(4, 280, 2, false, this); //Ret: Int32
        },
        NextBytes: function(a0/*Byte[]*/) { 
            return CS.Call(4, 280, 3, false, this, a0); //Ret: Void
        },
        NextDouble: function() { 
            return CS.Call(4, 280, 4, false, this); //Ret: Double
        },
    },
};
jsb_ReplaceOrPushJsType(System$Random);

// System.Text.RegularExpressions.Regex
var System$Text$RegularExpressions$Regex = 
{
    assemblyName: "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Text.RegularExpressions.Regex",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Runtime.Serialization.ISerializable"],
    staticDefinition: {
        get_CacheSize: function() { return CS.Call(2, 281, 0, true); },
        set_CacheSize: function(v) { return CS.Call(3, 281, 0, true, v); },
        CompileToAssembly$$RegexCompilationInfo$Array$$AssemblyName$$CustomAttributeBuilder$Array$$String: function(a0/*RegexCompilationInfo[]*/, a1/*AssemblyName*/, a2/*CustomAttributeBuilder[]*/, a3/*String*/) { 
            return CS.Call(4, 281, 21, true, a0, a1, a2, a3); //Ret: Void
        },
        CompileToAssembly$$RegexCompilationInfo$Array$$AssemblyName$$CustomAttributeBuilder$Array: function(a0/*RegexCompilationInfo[]*/, a1/*AssemblyName*/, a2/*CustomAttributeBuilder[]*/) { 
            return CS.Call(4, 281, 22, true, a0, a1, a2); //Ret: Void
        },
        CompileToAssembly$$RegexCompilationInfo$Array$$AssemblyName: function(a0/*RegexCompilationInfo[]*/, a1/*AssemblyName*/) { 
            return CS.Call(4, 281, 23, true, a0, a1); //Ret: Void
        },
        Escape: function(a0/*String*/) { 
            return CS.Call(4, 281, 24, true, a0); //Ret: String
        },
        IsMatch$$String$$String$$RegexOptions: function(a0/*String*/, a1/*String*/, a2/*RegexOptions*/) { 
            return CS.Call(4, 281, 25, true, a0, a1, a2); //Ret: Boolean
        },
        IsMatch$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 281, 26, true, a0, a1); //Ret: Boolean
        },
        Match$$String$$String$$RegexOptions: function(a0/*String*/, a1/*String*/, a2/*RegexOptions*/) { 
            return CS.Call(4, 281, 27, true, a0, a1, a2); //Ret: Match
        },
        Match$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 281, 28, true, a0, a1); //Ret: Match
        },
        Matches$$String$$String$$RegexOptions: function(a0/*String*/, a1/*String*/, a2/*RegexOptions*/) { 
            return CS.Call(4, 281, 29, true, a0, a1, a2); //Ret: MatchCollection
        },
        Matches$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 281, 30, true, a0, a1); //Ret: MatchCollection
        },
        Replace$$String$$String$$MatchEvaluator$$RegexOptions: function(a0/*String*/, a1/*String*/, a2/*MatchEvaluator*/, a3/*RegexOptions*/) { 
            return CS.Call(4, 281, 31, true, a0, a1, a2, a3); //Ret: String
        },
        Replace$$String$$String$$String$$RegexOptions: function(a0/*String*/, a1/*String*/, a2/*String*/, a3/*RegexOptions*/) { 
            return CS.Call(4, 281, 32, true, a0, a1, a2, a3); //Ret: String
        },
        Replace$$String$$String$$String: function(a0/*String*/, a1/*String*/, a2/*String*/) { 
            return CS.Call(4, 281, 33, true, a0, a1, a2); //Ret: String
        },
        Replace$$String$$String$$MatchEvaluator: function(a0/*String*/, a1/*String*/, a2/*MatchEvaluator*/) { 
            return CS.Call(4, 281, 34, true, a0, a1, a2); //Ret: String
        },
        Split$$String$$String$$RegexOptions: function(a0/*String*/, a1/*String*/, a2/*RegexOptions*/) { 
            return CS.Call(4, 281, 35, true, a0, a1, a2); //Ret: String[]
        },
        Split$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 281, 36, true, a0, a1); //Ret: String[]
        },
        Unescape: function(a0/*String*/) { 
            return CS.Call(4, 281, 37, true, a0); //Ret: String
        },
    },
    definition: {
        ctor$$String: function(a0) { CS.Call(5, 281, 0, true, this, a0); },
        ctor$$String$$RegexOptions: function(a0, a1) { CS.Call(5, 281, 1, true, this, a0, a1); },
        get_Options: function() { return CS.Call(2, 281, 1, false, this); },
        set_Options: function(v) { return CS.Call(3, 281, 1, false, this, v); },
        get_RightToLeft: function() { return CS.Call(2, 281, 2, false, this); },
        set_RightToLeft: function(v) { return CS.Call(3, 281, 2, false, this, v); },
        GetGroupNames: function() { 
            return CS.Call(4, 281, 0, false, this); //Ret: String[]
        },
        GetGroupNumbers: function() { 
            return CS.Call(4, 281, 1, false, this); //Ret: Int32[]
        },
        GroupNameFromNumber: function(a0/*Int32*/) { 
            return CS.Call(4, 281, 2, false, this, a0); //Ret: String
        },
        GroupNumberFromName: function(a0/*String*/) { 
            return CS.Call(4, 281, 3, false, this, a0); //Ret: Int32
        },
        IsMatch$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 281, 4, false, this, a0, a1); //Ret: Boolean
        },
        IsMatch$$String: function(a0/*String*/) { 
            return CS.Call(4, 281, 5, false, this, a0); //Ret: Boolean
        },
        Match$$String$$Int32$$Int32: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 281, 6, false, this, a0, a1, a2); //Ret: Match
        },
        Match$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 281, 7, false, this, a0, a1); //Ret: Match
        },
        Match$$String: function(a0/*String*/) { 
            return CS.Call(4, 281, 8, false, this, a0); //Ret: Match
        },
        Matches$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 281, 9, false, this, a0, a1); //Ret: MatchCollection
        },
        Matches$$String: function(a0/*String*/) { 
            return CS.Call(4, 281, 10, false, this, a0); //Ret: MatchCollection
        },
        Replace$$String$$MatchEvaluator$$Int32$$Int32: function(a0/*String*/, a1/*MatchEvaluator*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 281, 11, false, this, a0, a1, a2, a3); //Ret: String
        },
        Replace$$String$$String$$Int32$$Int32: function(a0/*String*/, a1/*String*/, a2/*Int32*/, a3/*Int32*/) { 
            return CS.Call(4, 281, 12, false, this, a0, a1, a2, a3); //Ret: String
        },
        Replace$$String$$String$$Int32: function(a0/*String*/, a1/*String*/, a2/*Int32*/) { 
            return CS.Call(4, 281, 13, false, this, a0, a1, a2); //Ret: String
        },
        Replace$$String$$MatchEvaluator$$Int32: function(a0/*String*/, a1/*MatchEvaluator*/, a2/*Int32*/) { 
            return CS.Call(4, 281, 14, false, this, a0, a1, a2); //Ret: String
        },
        Replace$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 281, 15, false, this, a0, a1); //Ret: String
        },
        Replace$$String$$MatchEvaluator: function(a0/*String*/, a1/*MatchEvaluator*/) { 
            return CS.Call(4, 281, 16, false, this, a0, a1); //Ret: String
        },
        Split$$String$$Int32$$Int32: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 281, 17, false, this, a0, a1, a2); //Ret: String[]
        },
        Split$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 281, 18, false, this, a0, a1); //Ret: String[]
        },
        Split$$String: function(a0/*String*/) { 
            return CS.Call(4, 281, 19, false, this, a0); //Ret: String[]
        },
        toString: function() { 
            return CS.Call(4, 281, 20, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(System$Text$RegularExpressions$Regex);

// System.Text.RegularExpressions.Capture
var System$Text$RegularExpressions$Capture = 
{
    assemblyName: "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Text.RegularExpressions.Capture",
    Kind: "Class",
    baseTypeName: "System.Object",
    definition: {
        get_Index: function() { return CS.Call(2, 282, 0, false, this); },
        set_Index: function(v) { return CS.Call(3, 282, 0, false, this, v); },
        get_Length: function() { return CS.Call(2, 282, 1, false, this); },
        set_Length: function(v) { return CS.Call(3, 282, 1, false, this, v); },
        get_Value: function() { return CS.Call(2, 282, 2, false, this); },
        set_Value: function(v) { return CS.Call(3, 282, 2, false, this, v); },
        toString: function() { 
            return CS.Call(4, 282, 0, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(System$Text$RegularExpressions$Capture);

// System.Text.RegularExpressions.Group
var System$Text$RegularExpressions$Group = 
{
    assemblyName: "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Text.RegularExpressions.Group",
    Kind: "Class",
    baseTypeName: "System.Text.RegularExpressions.Capture",
    staticDefinition: {
        Synchronized: function(a0/*Group*/) { 
            return CS.Call(4, 283, 0, true, a0); //Ret: Group
        },
    },
    definition: {
        get_Captures: function() { return CS.Call(2, 283, 0, false, this); },
        set_Captures: function(v) { return CS.Call(3, 283, 0, false, this, v); },
        get_Success: function() { return CS.Call(2, 283, 1, false, this); },
        set_Success: function(v) { return CS.Call(3, 283, 1, false, this, v); },
    },
};
jsb_ReplaceOrPushJsType(System$Text$RegularExpressions$Group);

// System.Text.RegularExpressions.GroupCollection
var System$Text$RegularExpressions$GroupCollection = 
{
    assemblyName: "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Text.RegularExpressions.GroupCollection",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.Collections.ICollection", "System.Collections.IEnumerable"],
    definition: {
        get_Count: function() { return CS.Call(2, 284, 0, false, this); },
        set_Count: function(v) { return CS.Call(3, 284, 0, false, this, v); },
        get_IsReadOnly: function() { return CS.Call(2, 284, 1, false, this); },
        set_IsReadOnly: function(v) { return CS.Call(3, 284, 1, false, this, v); },
        get_IsSynchronized: function() { return CS.Call(2, 284, 2, false, this); },
        set_IsSynchronized: function(v) { return CS.Call(3, 284, 2, false, this, v); },
        get_Item$$Int32: function(ind0) { return CS.Call(2, 284, 3, false, this, ind0); },
        set_Item$$Int32: function(ind0, v) { return CS.Call(3, 284, 3, false, this, ind0, v); },
        get_Item$$String: function(ind0) { return CS.Call(2, 284, 4, false, this, ind0); },
        set_Item$$String: function(ind0, v) { return CS.Call(3, 284, 4, false, this, ind0, v); },
        get_SyncRoot: function() { return CS.Call(2, 284, 5, false, this); },
        set_SyncRoot: function(v) { return CS.Call(3, 284, 5, false, this, v); },
        CopyTo: function(a0/*Array*/, a1/*Int32*/) { 
            return CS.Call(4, 284, 0, false, this, a0, a1); //Ret: Void
        },
        GetEnumerator: function() { 
            return CS.Call(4, 284, 1, false, this); //Ret: IEnumerator
        },
    },
};
jsb_ReplaceOrPushJsType(System$Text$RegularExpressions$GroupCollection);

// System.Text.RegularExpressions.Match
var System$Text$RegularExpressions$Match = 
{
    assemblyName: "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Text.RegularExpressions.Match",
    Kind: "Class",
    baseTypeName: "System.Text.RegularExpressions.Group",
    staticDefinition: {
        get_Empty: function() { return CS.Call(2, 285, 0, true); },
        set_Empty: function(v) { return CS.Call(3, 285, 0, true, v); },
        Synchronized$$Match: function(a0/*Match*/) { 
            return CS.Call(4, 285, 2, true, a0); //Ret: Match
        },
    },
    definition: {
        get_Groups: function() { return CS.Call(2, 285, 1, false, this); },
        set_Groups: function(v) { return CS.Call(3, 285, 1, false, this, v); },
        NextMatch: function() { 
            return CS.Call(4, 285, 0, false, this); //Ret: Match
        },
        Result: function(a0/*String*/) { 
            return CS.Call(4, 285, 1, false, this, a0); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(System$Text$RegularExpressions$Match);

// System.Convert
var System$Convert = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Convert",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticFields: {
        DBNull: {
            get: function() { return CS.Call(0, 286, 0, true); }, 
            set: function(v) { return CS.Call(1, 286, 0, true, v); }
        },
    },
    staticDefinition: {
        ChangeType$$Object$$Type$$IFormatProvider: function(a0/*Object*/, a1/*Type*/, a2/*IFormatProvider*/) { 
            return CS.Call(4, 286, 0, true, a0, a1.get_FullName(), a2); //Ret: Object
        },
        ChangeType$$Object$$TypeCode$$IFormatProvider: function(a0/*Object*/, a1/*TypeCode*/, a2/*IFormatProvider*/) { 
            return CS.Call(4, 286, 1, true, a0, a1, a2); //Ret: Object
        },
        ChangeType$$Object$$Type: function(a0/*Object*/, a1/*Type*/) { 
            return CS.Call(4, 286, 2, true, a0, a1.get_FullName()); //Ret: Object
        },
        ChangeType$$Object$$TypeCode: function(a0/*Object*/, a1/*TypeCode*/) { 
            return CS.Call(4, 286, 3, true, a0, a1); //Ret: Object
        },
        FromBase64CharArray: function(a0/*Char[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 286, 4, true, a0, a1, a2); //Ret: Byte[]
        },
        FromBase64String: function(a0/*String*/) { 
            return CS.Call(4, 286, 5, true, a0); //Ret: Byte[]
        },
        GetTypeCode: function(a0/*Object*/) { 
            return CS.Call(4, 286, 6, true, a0); //Ret: TypeCode
        },
        IsDBNull: function(a0/*Object*/) { 
            return CS.Call(4, 286, 7, true, a0); //Ret: Boolean
        },
        ToBase64CharArray$$Byte$Array$$Int32$$Int32$$Char$Array$$Int32$$Base64FormattingOptions: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/, a3/*Char[]*/, a4/*Int32*/, a5/*Base64FormattingOptions*/) { 
            return CS.Call(4, 286, 8, true, a0, a1, a2, a3, a4, a5); //Ret: Int32
        },
        ToBase64CharArray$$Byte$Array$$Int32$$Int32$$Char$Array$$Int32: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/, a3/*Char[]*/, a4/*Int32*/) { 
            return CS.Call(4, 286, 9, true, a0, a1, a2, a3, a4); //Ret: Int32
        },
        ToBase64String$$Byte$Array$$Int32$$Int32$$Base64FormattingOptions: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/, a3/*Base64FormattingOptions*/) { 
            return CS.Call(4, 286, 10, true, a0, a1, a2, a3); //Ret: String
        },
        ToBase64String$$Byte$Array$$Int32$$Int32: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 286, 11, true, a0, a1, a2); //Ret: String
        },
        ToBase64String$$Byte$Array$$Base64FormattingOptions: function(a0/*Byte[]*/, a1/*Base64FormattingOptions*/) { 
            return CS.Call(4, 286, 12, true, a0, a1); //Ret: String
        },
        ToBase64String$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 286, 13, true, a0); //Ret: String
        },
        ToBoolean$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 14, true, a0, a1); //Ret: Boolean
        },
        ToBoolean$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 15, true, a0, a1); //Ret: Boolean
        },
        ToBoolean$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 16, true, a0); //Ret: Boolean
        },
        ToBoolean$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 17, true, a0); //Ret: Boolean
        },
        ToBoolean$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 18, true, a0); //Ret: Boolean
        },
        ToBoolean$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 19, true, a0); //Ret: Boolean
        },
        ToBoolean$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 20, true, a0); //Ret: Boolean
        },
        ToBoolean$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 21, true, a0); //Ret: Boolean
        },
        ToBoolean$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 22, true, a0); //Ret: Boolean
        },
        ToBoolean$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 23, true, a0); //Ret: Boolean
        },
        ToBoolean$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 24, true, a0); //Ret: Boolean
        },
        ToBoolean$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 25, true, a0); //Ret: Boolean
        },
        ToBoolean$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 26, true, a0); //Ret: Boolean
        },
        ToBoolean$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 27, true, a0); //Ret: Boolean
        },
        ToBoolean$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 28, true, a0); //Ret: Boolean
        },
        ToBoolean$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 29, true, a0); //Ret: Boolean
        },
        ToBoolean$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 30, true, a0); //Ret: Boolean
        },
        ToBoolean$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 31, true, a0); //Ret: Boolean
        },
        ToByte$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 286, 32, true, a0, a1); //Ret: Byte
        },
        ToByte$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 33, true, a0, a1); //Ret: Byte
        },
        ToByte$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 34, true, a0, a1); //Ret: Byte
        },
        ToByte$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 35, true, a0); //Ret: Byte
        },
        ToByte$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 36, true, a0); //Ret: Byte
        },
        ToByte$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 37, true, a0); //Ret: Byte
        },
        ToByte$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 38, true, a0); //Ret: Byte
        },
        ToByte$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 39, true, a0); //Ret: Byte
        },
        ToByte$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 40, true, a0); //Ret: Byte
        },
        ToByte$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 41, true, a0); //Ret: Byte
        },
        ToByte$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 42, true, a0); //Ret: Byte
        },
        ToByte$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 43, true, a0); //Ret: Byte
        },
        ToByte$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 44, true, a0); //Ret: Byte
        },
        ToByte$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 45, true, a0); //Ret: Byte
        },
        ToByte$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 46, true, a0); //Ret: Byte
        },
        ToByte$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 47, true, a0); //Ret: Byte
        },
        ToByte$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 48, true, a0); //Ret: Byte
        },
        ToByte$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 49, true, a0); //Ret: Byte
        },
        ToByte$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 50, true, a0); //Ret: Byte
        },
        ToChar$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 51, true, a0, a1); //Ret: Char
        },
        ToChar$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 52, true, a0, a1); //Ret: Char
        },
        ToChar$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 53, true, a0); //Ret: Char
        },
        ToChar$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 54, true, a0); //Ret: Char
        },
        ToChar$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 55, true, a0); //Ret: Char
        },
        ToChar$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 56, true, a0); //Ret: Char
        },
        ToChar$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 57, true, a0); //Ret: Char
        },
        ToChar$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 58, true, a0); //Ret: Char
        },
        ToChar$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 59, true, a0); //Ret: Char
        },
        ToChar$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 60, true, a0); //Ret: Char
        },
        ToChar$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 61, true, a0); //Ret: Char
        },
        ToChar$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 62, true, a0); //Ret: Char
        },
        ToChar$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 63, true, a0); //Ret: Char
        },
        ToChar$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 64, true, a0); //Ret: Char
        },
        ToChar$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 65, true, a0); //Ret: Char
        },
        ToChar$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 66, true, a0); //Ret: Char
        },
        ToChar$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 67, true, a0); //Ret: Char
        },
        ToChar$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 68, true, a0); //Ret: Char
        },
        ToDateTime$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 69, true, a0, a1); //Ret: DateTime
        },
        ToDateTime$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 70, true, a0, a1); //Ret: DateTime
        },
        ToDateTime$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 71, true, a0); //Ret: DateTime
        },
        ToDateTime$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 72, true, a0); //Ret: DateTime
        },
        ToDateTime$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 73, true, a0); //Ret: DateTime
        },
        ToDateTime$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 74, true, a0); //Ret: DateTime
        },
        ToDateTime$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 75, true, a0); //Ret: DateTime
        },
        ToDateTime$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 76, true, a0); //Ret: DateTime
        },
        ToDateTime$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 77, true, a0); //Ret: DateTime
        },
        ToDateTime$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 78, true, a0); //Ret: DateTime
        },
        ToDateTime$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 79, true, a0); //Ret: DateTime
        },
        ToDateTime$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 80, true, a0); //Ret: DateTime
        },
        ToDateTime$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 81, true, a0); //Ret: DateTime
        },
        ToDateTime$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 82, true, a0); //Ret: DateTime
        },
        ToDateTime$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 83, true, a0); //Ret: DateTime
        },
        ToDateTime$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 84, true, a0); //Ret: DateTime
        },
        ToDateTime$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 85, true, a0); //Ret: DateTime
        },
        ToDateTime$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 86, true, a0); //Ret: DateTime
        },
        ToDecimal$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 87, true, a0, a1); //Ret: Decimal
        },
        ToDecimal$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 88, true, a0, a1); //Ret: Decimal
        },
        ToDecimal$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 89, true, a0); //Ret: Decimal
        },
        ToDecimal$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 90, true, a0); //Ret: Decimal
        },
        ToDecimal$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 91, true, a0); //Ret: Decimal
        },
        ToDecimal$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 92, true, a0); //Ret: Decimal
        },
        ToDecimal$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 93, true, a0); //Ret: Decimal
        },
        ToDecimal$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 94, true, a0); //Ret: Decimal
        },
        ToDecimal$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 95, true, a0); //Ret: Decimal
        },
        ToDecimal$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 96, true, a0); //Ret: Decimal
        },
        ToDecimal$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 97, true, a0); //Ret: Decimal
        },
        ToDecimal$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 98, true, a0); //Ret: Decimal
        },
        ToDecimal$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 99, true, a0); //Ret: Decimal
        },
        ToDecimal$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 100, true, a0); //Ret: Decimal
        },
        ToDecimal$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 101, true, a0); //Ret: Decimal
        },
        ToDecimal$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 102, true, a0); //Ret: Decimal
        },
        ToDecimal$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 103, true, a0); //Ret: Decimal
        },
        ToDecimal$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 104, true, a0); //Ret: Decimal
        },
        ToDouble$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 105, true, a0, a1); //Ret: Double
        },
        ToDouble$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 106, true, a0, a1); //Ret: Double
        },
        ToDouble$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 107, true, a0); //Ret: Double
        },
        ToDouble$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 108, true, a0); //Ret: Double
        },
        ToDouble$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 109, true, a0); //Ret: Double
        },
        ToDouble$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 110, true, a0); //Ret: Double
        },
        ToDouble$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 111, true, a0); //Ret: Double
        },
        ToDouble$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 112, true, a0); //Ret: Double
        },
        ToDouble$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 113, true, a0); //Ret: Double
        },
        ToDouble$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 114, true, a0); //Ret: Double
        },
        ToDouble$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 115, true, a0); //Ret: Double
        },
        ToDouble$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 116, true, a0); //Ret: Double
        },
        ToDouble$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 117, true, a0); //Ret: Double
        },
        ToDouble$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 118, true, a0); //Ret: Double
        },
        ToDouble$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 119, true, a0); //Ret: Double
        },
        ToDouble$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 120, true, a0); //Ret: Double
        },
        ToDouble$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 121, true, a0); //Ret: Double
        },
        ToDouble$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 122, true, a0); //Ret: Double
        },
        ToInt16$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 286, 123, true, a0, a1); //Ret: Int16
        },
        ToInt16$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 124, true, a0, a1); //Ret: Int16
        },
        ToInt16$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 125, true, a0, a1); //Ret: Int16
        },
        ToInt16$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 126, true, a0); //Ret: Int16
        },
        ToInt16$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 127, true, a0); //Ret: Int16
        },
        ToInt16$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 128, true, a0); //Ret: Int16
        },
        ToInt16$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 129, true, a0); //Ret: Int16
        },
        ToInt16$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 130, true, a0); //Ret: Int16
        },
        ToInt16$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 131, true, a0); //Ret: Int16
        },
        ToInt16$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 132, true, a0); //Ret: Int16
        },
        ToInt16$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 133, true, a0); //Ret: Int16
        },
        ToInt16$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 134, true, a0); //Ret: Int16
        },
        ToInt16$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 135, true, a0); //Ret: Int16
        },
        ToInt16$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 136, true, a0); //Ret: Int16
        },
        ToInt16$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 137, true, a0); //Ret: Int16
        },
        ToInt16$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 138, true, a0); //Ret: Int16
        },
        ToInt16$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 139, true, a0); //Ret: Int16
        },
        ToInt16$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 140, true, a0); //Ret: Int16
        },
        ToInt16$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 141, true, a0); //Ret: Int16
        },
        ToInt32$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 286, 142, true, a0, a1); //Ret: Int32
        },
        ToInt32$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 143, true, a0, a1); //Ret: Int32
        },
        ToInt32$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 144, true, a0, a1); //Ret: Int32
        },
        ToInt32$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 145, true, a0); //Ret: Int32
        },
        ToInt32$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 146, true, a0); //Ret: Int32
        },
        ToInt32$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 147, true, a0); //Ret: Int32
        },
        ToInt32$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 148, true, a0); //Ret: Int32
        },
        ToInt32$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 149, true, a0); //Ret: Int32
        },
        ToInt32$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 150, true, a0); //Ret: Int32
        },
        ToInt32$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 151, true, a0); //Ret: Int32
        },
        ToInt32$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 152, true, a0); //Ret: Int32
        },
        ToInt32$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 153, true, a0); //Ret: Int32
        },
        ToInt32$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 154, true, a0); //Ret: Int32
        },
        ToInt32$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 155, true, a0); //Ret: Int32
        },
        ToInt32$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 156, true, a0); //Ret: Int32
        },
        ToInt32$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 157, true, a0); //Ret: Int32
        },
        ToInt32$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 158, true, a0); //Ret: Int32
        },
        ToInt32$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 159, true, a0); //Ret: Int32
        },
        ToInt32$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 160, true, a0); //Ret: Int32
        },
        ToInt64$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 286, 161, true, a0, a1); //Ret: Int64
        },
        ToInt64$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 162, true, a0, a1); //Ret: Int64
        },
        ToInt64$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 163, true, a0, a1); //Ret: Int64
        },
        ToInt64$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 164, true, a0); //Ret: Int64
        },
        ToInt64$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 165, true, a0); //Ret: Int64
        },
        ToInt64$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 166, true, a0); //Ret: Int64
        },
        ToInt64$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 167, true, a0); //Ret: Int64
        },
        ToInt64$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 168, true, a0); //Ret: Int64
        },
        ToInt64$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 169, true, a0); //Ret: Int64
        },
        ToInt64$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 170, true, a0); //Ret: Int64
        },
        ToInt64$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 171, true, a0); //Ret: Int64
        },
        ToInt64$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 172, true, a0); //Ret: Int64
        },
        ToInt64$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 173, true, a0); //Ret: Int64
        },
        ToInt64$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 174, true, a0); //Ret: Int64
        },
        ToInt64$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 175, true, a0); //Ret: Int64
        },
        ToInt64$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 176, true, a0); //Ret: Int64
        },
        ToInt64$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 177, true, a0); //Ret: Int64
        },
        ToInt64$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 178, true, a0); //Ret: Int64
        },
        ToInt64$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 179, true, a0); //Ret: Int64
        },
        ToSByte$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 180, true, a0, a1); //Ret: SByte
        },
        ToSByte$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 286, 181, true, a0, a1); //Ret: SByte
        },
        ToSByte$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 182, true, a0, a1); //Ret: SByte
        },
        ToSByte$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 183, true, a0); //Ret: SByte
        },
        ToSByte$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 184, true, a0); //Ret: SByte
        },
        ToSByte$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 185, true, a0); //Ret: SByte
        },
        ToSByte$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 186, true, a0); //Ret: SByte
        },
        ToSByte$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 187, true, a0); //Ret: SByte
        },
        ToSByte$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 188, true, a0); //Ret: SByte
        },
        ToSByte$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 189, true, a0); //Ret: SByte
        },
        ToSByte$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 190, true, a0); //Ret: SByte
        },
        ToSByte$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 191, true, a0); //Ret: SByte
        },
        ToSByte$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 192, true, a0); //Ret: SByte
        },
        ToSByte$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 193, true, a0); //Ret: SByte
        },
        ToSByte$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 194, true, a0); //Ret: SByte
        },
        ToSByte$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 195, true, a0); //Ret: SByte
        },
        ToSByte$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 196, true, a0); //Ret: SByte
        },
        ToSByte$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 197, true, a0); //Ret: SByte
        },
        ToSByte$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 198, true, a0); //Ret: SByte
        },
        ToSingle$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 199, true, a0, a1); //Ret: Single
        },
        ToSingle$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 200, true, a0, a1); //Ret: Single
        },
        ToSingle$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 201, true, a0); //Ret: Single
        },
        ToSingle$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 202, true, a0); //Ret: Single
        },
        ToSingle$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 203, true, a0); //Ret: Single
        },
        ToSingle$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 204, true, a0); //Ret: Single
        },
        ToSingle$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 205, true, a0); //Ret: Single
        },
        ToSingle$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 206, true, a0); //Ret: Single
        },
        ToSingle$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 207, true, a0); //Ret: Single
        },
        ToSingle$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 208, true, a0); //Ret: Single
        },
        ToSingle$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 209, true, a0); //Ret: Single
        },
        ToSingle$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 210, true, a0); //Ret: Single
        },
        ToSingle$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 211, true, a0); //Ret: Single
        },
        ToSingle$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 212, true, a0); //Ret: Single
        },
        ToSingle$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 213, true, a0); //Ret: Single
        },
        ToSingle$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 214, true, a0); //Ret: Single
        },
        ToSingle$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 215, true, a0); //Ret: Single
        },
        ToSingle$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 216, true, a0); //Ret: Single
        },
        toString$$Int64$$IFormatProvider: function(a0/*Int64*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 217, true, a0, a1); //Ret: String
        },
        toString$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 218, true, a0, a1); //Ret: String
        },
        toString$$SByte$$IFormatProvider: function(a0/*SByte*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 219, true, a0, a1); //Ret: String
        },
        toString$$Int32$$Int32: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 286, 220, true, a0, a1); //Ret: String
        },
        toString$$Int32$$IFormatProvider: function(a0/*Int32*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 221, true, a0, a1); //Ret: String
        },
        toString$$Int64$$Int32: function(a0/*Int64*/, a1/*Int32*/) { 
            return CS.Call(4, 286, 222, true, a0, a1); //Ret: String
        },
        toString$$UInt32$$IFormatProvider: function(a0/*UInt32*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 223, true, a0, a1); //Ret: String
        },
        toString$$UInt64$$IFormatProvider: function(a0/*UInt64*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 224, true, a0, a1); //Ret: String
        },
        toString$$UInt16$$IFormatProvider: function(a0/*UInt16*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 225, true, a0, a1); //Ret: String
        },
        toString$$Int16$$Int32: function(a0/*Int16*/, a1/*Int32*/) { 
            return CS.Call(4, 286, 226, true, a0, a1); //Ret: String
        },
        toString$$Int16$$IFormatProvider: function(a0/*Int16*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 227, true, a0, a1); //Ret: String
        },
        toString$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 228, true, a0, a1); //Ret: String
        },
        toString$$Char$$IFormatProvider: function(a0/*Char*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 229, true, a0, a1); //Ret: String
        },
        toString$$DateTime$$IFormatProvider: function(a0/*DateTime*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 230, true, a0, a1); //Ret: String
        },
        toString$$Decimal$$IFormatProvider: function(a0/*Decimal*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 231, true, a0, a1); //Ret: String
        },
        toString$$Boolean$$IFormatProvider: function(a0/*Boolean*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 232, true, a0, a1); //Ret: String
        },
        toString$$Byte$$IFormatProvider: function(a0/*Byte*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 233, true, a0, a1); //Ret: String
        },
        toString$$Byte$$Int32: function(a0/*Byte*/, a1/*Int32*/) { 
            return CS.Call(4, 286, 234, true, a0, a1); //Ret: String
        },
        toString$$Single$$IFormatProvider: function(a0/*Single*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 235, true, a0, a1); //Ret: String
        },
        toString$$Double$$IFormatProvider: function(a0/*Double*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 236, true, a0, a1); //Ret: String
        },
        toString$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 237, true, a0); //Ret: String
        },
        toString$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 238, true, a0); //Ret: String
        },
        toString$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 239, true, a0); //Ret: String
        },
        toString$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 240, true, a0); //Ret: String
        },
        toString$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 241, true, a0); //Ret: String
        },
        toString$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 242, true, a0); //Ret: String
        },
        toString$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 243, true, a0); //Ret: String
        },
        toString$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 244, true, a0); //Ret: String
        },
        toString$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 245, true, a0); //Ret: String
        },
        toString$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 246, true, a0); //Ret: String
        },
        toString$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 247, true, a0); //Ret: String
        },
        toString$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 248, true, a0); //Ret: String
        },
        toString$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 249, true, a0); //Ret: String
        },
        toString$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 250, true, a0); //Ret: String
        },
        toString$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 251, true, a0); //Ret: String
        },
        toString$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 252, true, a0); //Ret: String
        },
        ToUInt16$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 286, 253, true, a0, a1); //Ret: UInt16
        },
        ToUInt16$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 254, true, a0, a1); //Ret: UInt16
        },
        ToUInt16$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 255, true, a0, a1); //Ret: UInt16
        },
        ToUInt16$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 256, true, a0); //Ret: UInt16
        },
        ToUInt16$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 257, true, a0); //Ret: UInt16
        },
        ToUInt16$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 258, true, a0); //Ret: UInt16
        },
        ToUInt16$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 259, true, a0); //Ret: UInt16
        },
        ToUInt16$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 260, true, a0); //Ret: UInt16
        },
        ToUInt16$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 261, true, a0); //Ret: UInt16
        },
        ToUInt16$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 262, true, a0); //Ret: UInt16
        },
        ToUInt16$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 263, true, a0); //Ret: UInt16
        },
        ToUInt16$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 264, true, a0); //Ret: UInt16
        },
        ToUInt16$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 265, true, a0); //Ret: UInt16
        },
        ToUInt16$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 266, true, a0); //Ret: UInt16
        },
        ToUInt16$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 267, true, a0); //Ret: UInt16
        },
        ToUInt16$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 268, true, a0); //Ret: UInt16
        },
        ToUInt16$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 269, true, a0); //Ret: UInt16
        },
        ToUInt16$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 270, true, a0); //Ret: UInt16
        },
        ToUInt16$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 271, true, a0); //Ret: UInt16
        },
        ToUInt32$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 286, 272, true, a0, a1); //Ret: UInt32
        },
        ToUInt32$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 273, true, a0, a1); //Ret: UInt32
        },
        ToUInt32$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 274, true, a0, a1); //Ret: UInt32
        },
        ToUInt32$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 275, true, a0); //Ret: UInt32
        },
        ToUInt32$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 276, true, a0); //Ret: UInt32
        },
        ToUInt32$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 277, true, a0); //Ret: UInt32
        },
        ToUInt32$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 278, true, a0); //Ret: UInt32
        },
        ToUInt32$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 279, true, a0); //Ret: UInt32
        },
        ToUInt32$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 280, true, a0); //Ret: UInt32
        },
        ToUInt32$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 281, true, a0); //Ret: UInt32
        },
        ToUInt32$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 282, true, a0); //Ret: UInt32
        },
        ToUInt32$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 283, true, a0); //Ret: UInt32
        },
        ToUInt32$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 284, true, a0); //Ret: UInt32
        },
        ToUInt32$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 285, true, a0); //Ret: UInt32
        },
        ToUInt32$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 286, true, a0); //Ret: UInt32
        },
        ToUInt32$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 287, true, a0); //Ret: UInt32
        },
        ToUInt32$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 288, true, a0); //Ret: UInt32
        },
        ToUInt32$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 289, true, a0); //Ret: UInt32
        },
        ToUInt32$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 290, true, a0); //Ret: UInt32
        },
        ToUInt64$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 286, 291, true, a0, a1); //Ret: UInt64
        },
        ToUInt64$$String$$IFormatProvider: function(a0/*String*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 292, true, a0, a1); //Ret: UInt64
        },
        ToUInt64$$Object$$IFormatProvider: function(a0/*Object*/, a1/*IFormatProvider*/) { 
            return CS.Call(4, 286, 293, true, a0, a1); //Ret: UInt64
        },
        ToUInt64$$Object: function(a0/*Object*/) { 
            return CS.Call(4, 286, 294, true, a0); //Ret: UInt64
        },
        ToUInt64$$UInt32: function(a0/*UInt32*/) { 
            return CS.Call(4, 286, 295, true, a0); //Ret: UInt64
        },
        ToUInt64$$UInt16: function(a0/*UInt16*/) { 
            return CS.Call(4, 286, 296, true, a0); //Ret: UInt64
        },
        ToUInt64$$UInt64: function(a0/*UInt64*/) { 
            return CS.Call(4, 286, 297, true, a0); //Ret: UInt64
        },
        ToUInt64$$String: function(a0/*String*/) { 
            return CS.Call(4, 286, 298, true, a0); //Ret: UInt64
        },
        ToUInt64$$DateTime: function(a0/*DateTime*/) { 
            return CS.Call(4, 286, 299, true, a0); //Ret: UInt64
        },
        ToUInt64$$Decimal: function(a0/*Decimal*/) { 
            return CS.Call(4, 286, 300, true, a0); //Ret: UInt64
        },
        ToUInt64$$Char: function(a0/*Char*/) { 
            return CS.Call(4, 286, 301, true, a0); //Ret: UInt64
        },
        ToUInt64$$Boolean: function(a0/*Boolean*/) { 
            return CS.Call(4, 286, 302, true, a0); //Ret: UInt64
        },
        ToUInt64$$Byte: function(a0/*Byte*/) { 
            return CS.Call(4, 286, 303, true, a0); //Ret: UInt64
        },
        ToUInt64$$Double: function(a0/*Double*/) { 
            return CS.Call(4, 286, 304, true, a0); //Ret: UInt64
        },
        ToUInt64$$SByte: function(a0/*SByte*/) { 
            return CS.Call(4, 286, 305, true, a0); //Ret: UInt64
        },
        ToUInt64$$Int16: function(a0/*Int16*/) { 
            return CS.Call(4, 286, 306, true, a0); //Ret: UInt64
        },
        ToUInt64$$Int64: function(a0/*Int64*/) { 
            return CS.Call(4, 286, 307, true, a0); //Ret: UInt64
        },
        ToUInt64$$Single: function(a0/*Single*/) { 
            return CS.Call(4, 286, 308, true, a0); //Ret: UInt64
        },
        ToUInt64$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 286, 309, true, a0); //Ret: UInt64
        },
    },
};
jsb_ReplaceOrPushJsType(System$Convert);

// System.Text.Encoding
var System$Text$Encoding = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Text.Encoding",
    Kind: "Class",
    baseTypeName: "System.Object",
    interfaceNames: ["System.ICloneable"],
    staticDefinition: {
        get_ASCII: function() { return CS.Call(2, 287, 14, true); },
        set_ASCII: function(v) { return CS.Call(3, 287, 14, true, v); },
        get_BigEndianUnicode: function() { return CS.Call(2, 287, 15, true); },
        set_BigEndianUnicode: function(v) { return CS.Call(3, 287, 15, true, v); },
        get_Default: function() { return CS.Call(2, 287, 16, true); },
        set_Default: function(v) { return CS.Call(3, 287, 16, true, v); },
        get_UTF7: function() { return CS.Call(2, 287, 17, true); },
        set_UTF7: function(v) { return CS.Call(3, 287, 17, true, v); },
        get_UTF8: function() { return CS.Call(2, 287, 18, true); },
        set_UTF8: function(v) { return CS.Call(3, 287, 18, true, v); },
        get_Unicode: function() { return CS.Call(2, 287, 19, true); },
        set_Unicode: function(v) { return CS.Call(3, 287, 19, true, v); },
        get_UTF32: function() { return CS.Call(2, 287, 20, true); },
        set_UTF32: function(v) { return CS.Call(3, 287, 20, true, v); },
        Convert$$Encoding$$Encoding$$Byte$Array$$Int32$$Int32: function(a0/*Encoding*/, a1/*Encoding*/, a2/*Byte[]*/, a3/*Int32*/, a4/*Int32*/) { 
            return CS.Call(4, 287, 25, true, a0, a1, a2, a3, a4); //Ret: Byte[]
        },
        Convert$$Encoding$$Encoding$$Byte$Array: function(a0/*Encoding*/, a1/*Encoding*/, a2/*Byte[]*/) { 
            return CS.Call(4, 287, 26, true, a0, a1, a2); //Ret: Byte[]
        },
        GetEncoding$$Int32$$EncoderFallback$$DecoderFallback: function(a0/*Int32*/, a1/*EncoderFallback*/, a2/*DecoderFallback*/) { 
            return CS.Call(4, 287, 27, true, a0, a1, a2); //Ret: Encoding
        },
        GetEncoding$$String$$EncoderFallback$$DecoderFallback: function(a0/*String*/, a1/*EncoderFallback*/, a2/*DecoderFallback*/) { 
            return CS.Call(4, 287, 28, true, a0, a1, a2); //Ret: Encoding
        },
        GetEncoding$$Int32: function(a0/*Int32*/) { 
            return CS.Call(4, 287, 29, true, a0); //Ret: Encoding
        },
        GetEncoding$$String: function(a0/*String*/) { 
            return CS.Call(4, 287, 30, true, a0); //Ret: Encoding
        },
        GetEncodings: function() { 
            return CS.Call(4, 287, 31, true); //Ret: EncodingInfo[]
        },
    },
    definition: {
        get_IsReadOnly: function() { return CS.Call(2, 287, 0, false, this); },
        set_IsReadOnly: function(v) { return CS.Call(3, 287, 0, false, this, v); },
        get_IsSingleByte: function() { return CS.Call(2, 287, 1, false, this); },
        set_IsSingleByte: function(v) { return CS.Call(3, 287, 1, false, this, v); },
        get_DecoderFallback: function() { return CS.Call(2, 287, 2, false, this); },
        set_DecoderFallback: function(v) { return CS.Call(3, 287, 2, false, this, v); },
        get_EncoderFallback: function() { return CS.Call(2, 287, 3, false, this); },
        set_EncoderFallback: function(v) { return CS.Call(3, 287, 3, false, this, v); },
        get_BodyName: function() { return CS.Call(2, 287, 4, false, this); },
        set_BodyName: function(v) { return CS.Call(3, 287, 4, false, this, v); },
        get_CodePage: function() { return CS.Call(2, 287, 5, false, this); },
        set_CodePage: function(v) { return CS.Call(3, 287, 5, false, this, v); },
        get_EncodingName: function() { return CS.Call(2, 287, 6, false, this); },
        set_EncodingName: function(v) { return CS.Call(3, 287, 6, false, this, v); },
        get_HeaderName: function() { return CS.Call(2, 287, 7, false, this); },
        set_HeaderName: function(v) { return CS.Call(3, 287, 7, false, this, v); },
        get_IsBrowserDisplay: function() { return CS.Call(2, 287, 8, false, this); },
        set_IsBrowserDisplay: function(v) { return CS.Call(3, 287, 8, false, this, v); },
        get_IsBrowserSave: function() { return CS.Call(2, 287, 9, false, this); },
        set_IsBrowserSave: function(v) { return CS.Call(3, 287, 9, false, this, v); },
        get_IsMailNewsDisplay: function() { return CS.Call(2, 287, 10, false, this); },
        set_IsMailNewsDisplay: function(v) { return CS.Call(3, 287, 10, false, this, v); },
        get_IsMailNewsSave: function() { return CS.Call(2, 287, 11, false, this); },
        set_IsMailNewsSave: function(v) { return CS.Call(3, 287, 11, false, this, v); },
        get_WebName: function() { return CS.Call(2, 287, 12, false, this); },
        set_WebName: function(v) { return CS.Call(3, 287, 12, false, this, v); },
        get_WindowsCodePage: function() { return CS.Call(2, 287, 13, false, this); },
        set_WindowsCodePage: function(v) { return CS.Call(3, 287, 13, false, this, v); },
        Clone: function() { 
            return CS.Call(4, 287, 0, false, this); //Ret: Object
        },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 287, 1, false, this, a0); //Ret: Boolean
        },
        GetByteCount$$Char$Array$$Int32$$Int32: function(a0/*Char[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 287, 2, false, this, a0, a1, a2); //Ret: Int32
        },
        GetByteCount$$Char$Array: function(a0/*Char[]*/) { 
            return CS.Call(4, 287, 3, false, this, a0); //Ret: Int32
        },
        GetByteCount$$String: function(a0/*String*/) { 
            return CS.Call(4, 287, 4, false, this, a0); //Ret: Int32
        },
        GetBytes$$String$$Int32$$Int32$$Byte$Array$$Int32: function(a0/*String*/, a1/*Int32*/, a2/*Int32*/, a3/*Byte[]*/, a4/*Int32*/) { 
            return CS.Call(4, 287, 5, false, this, a0, a1, a2, a3, a4); //Ret: Int32
        },
        GetBytes$$Char$Array$$Int32$$Int32$$Byte$Array$$Int32: function(a0/*Char[]*/, a1/*Int32*/, a2/*Int32*/, a3/*Byte[]*/, a4/*Int32*/) { 
            return CS.Call(4, 287, 6, false, this, a0, a1, a2, a3, a4); //Ret: Int32
        },
        GetBytes$$Char$Array$$Int32$$Int32: function(a0/*Char[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 287, 7, false, this, a0, a1, a2); //Ret: Byte[]
        },
        GetBytes$$Char$Array: function(a0/*Char[]*/) { 
            return CS.Call(4, 287, 8, false, this, a0); //Ret: Byte[]
        },
        GetBytes$$String: function(a0/*String*/) { 
            return CS.Call(4, 287, 9, false, this, a0); //Ret: Byte[]
        },
        GetCharCount$$Byte$Array$$Int32$$Int32: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 287, 10, false, this, a0, a1, a2); //Ret: Int32
        },
        GetCharCount$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 287, 11, false, this, a0); //Ret: Int32
        },
        GetChars$$Byte$Array$$Int32$$Int32$$Char$Array$$Int32: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/, a3/*Char[]*/, a4/*Int32*/) { 
            return CS.Call(4, 287, 12, false, this, a0, a1, a2, a3, a4); //Ret: Int32
        },
        GetChars$$Byte$Array$$Int32$$Int32: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 287, 13, false, this, a0, a1, a2); //Ret: Char[]
        },
        GetChars$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 287, 14, false, this, a0); //Ret: Char[]
        },
        GetDecoder: function() { 
            return CS.Call(4, 287, 15, false, this); //Ret: Decoder
        },
        GetEncoder: function() { 
            return CS.Call(4, 287, 16, false, this); //Ret: Encoder
        },
        GetHashCode: function() { 
            return CS.Call(4, 287, 17, false, this); //Ret: Int32
        },
        GetMaxByteCount: function(a0/*Int32*/) { 
            return CS.Call(4, 287, 18, false, this, a0); //Ret: Int32
        },
        GetMaxCharCount: function(a0/*Int32*/) { 
            return CS.Call(4, 287, 19, false, this, a0); //Ret: Int32
        },
        GetPreamble: function() { 
            return CS.Call(4, 287, 20, false, this); //Ret: Byte[]
        },
        GetString$$Byte$Array$$Int32$$Int32: function(a0/*Byte[]*/, a1/*Int32*/, a2/*Int32*/) { 
            return CS.Call(4, 287, 21, false, this, a0, a1, a2); //Ret: String
        },
        GetString$$Byte$Array: function(a0/*Byte[]*/) { 
            return CS.Call(4, 287, 22, false, this, a0); //Ret: String
        },
        IsAlwaysNormalized$$NormalizationForm: function(a0/*NormalizationForm*/) { 
            return CS.Call(4, 287, 23, false, this, a0); //Ret: Boolean
        },
        IsAlwaysNormalized: function() { 
            return CS.Call(4, 287, 24, false, this); //Ret: Boolean
        },
    },
};
jsb_ReplaceOrPushJsType(System$Text$Encoding);

// System.IO.File
var System$IO$File = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.IO.File",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        AppendAllText$$String$$String$$Encoding: function(a0/*String*/, a1/*String*/, a2/*Encoding*/) { 
            return CS.Call(4, 288, 0, true, a0, a1, a2); //Ret: Void
        },
        AppendAllText$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 288, 1, true, a0, a1); //Ret: Void
        },
        AppendText: function(a0/*String*/) { 
            return CS.Call(4, 288, 2, true, a0); //Ret: StreamWriter
        },
        Copy$$String$$String$$Boolean: function(a0/*String*/, a1/*String*/, a2/*Boolean*/) { 
            return CS.Call(4, 288, 3, true, a0, a1, a2); //Ret: Void
        },
        Copy$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 288, 4, true, a0, a1); //Ret: Void
        },
        Create$$String$$Int32$$FileOptions$$FileSecurity: function(a0/*String*/, a1/*Int32*/, a2/*FileOptions*/, a3/*FileSecurity*/) { 
            return CS.Call(4, 288, 5, true, a0, a1, a2, a3); //Ret: FileStream
        },
        Create$$String$$Int32$$FileOptions: function(a0/*String*/, a1/*Int32*/, a2/*FileOptions*/) { 
            return CS.Call(4, 288, 6, true, a0, a1, a2); //Ret: FileStream
        },
        Create$$String$$Int32: function(a0/*String*/, a1/*Int32*/) { 
            return CS.Call(4, 288, 7, true, a0, a1); //Ret: FileStream
        },
        Create$$String: function(a0/*String*/) { 
            return CS.Call(4, 288, 8, true, a0); //Ret: FileStream
        },
        CreateText: function(a0/*String*/) { 
            return CS.Call(4, 288, 9, true, a0); //Ret: StreamWriter
        },
        Decrypt: function(a0/*String*/) { 
            return CS.Call(4, 288, 10, true, a0); //Ret: Void
        },
        Delete: function(a0/*String*/) { 
            return CS.Call(4, 288, 11, true, a0); //Ret: Void
        },
        Encrypt: function(a0/*String*/) { 
            return CS.Call(4, 288, 12, true, a0); //Ret: Void
        },
        Exists: function(a0/*String*/) { 
            return CS.Call(4, 288, 13, true, a0); //Ret: Boolean
        },
        GetAccessControl$$String$$AccessControlSections: function(a0/*String*/, a1/*AccessControlSections*/) { 
            return CS.Call(4, 288, 14, true, a0, a1); //Ret: FileSecurity
        },
        GetAccessControl$$String: function(a0/*String*/) { 
            return CS.Call(4, 288, 15, true, a0); //Ret: FileSecurity
        },
        GetAttributes: function(a0/*String*/) { 
            return CS.Call(4, 288, 16, true, a0); //Ret: FileAttributes
        },
        GetCreationTime: function(a0/*String*/) { 
            return CS.Call(4, 288, 17, true, a0); //Ret: DateTime
        },
        GetCreationTimeUtc: function(a0/*String*/) { 
            return CS.Call(4, 288, 18, true, a0); //Ret: DateTime
        },
        GetLastAccessTime: function(a0/*String*/) { 
            return CS.Call(4, 288, 19, true, a0); //Ret: DateTime
        },
        GetLastAccessTimeUtc: function(a0/*String*/) { 
            return CS.Call(4, 288, 20, true, a0); //Ret: DateTime
        },
        GetLastWriteTime: function(a0/*String*/) { 
            return CS.Call(4, 288, 21, true, a0); //Ret: DateTime
        },
        GetLastWriteTimeUtc: function(a0/*String*/) { 
            return CS.Call(4, 288, 22, true, a0); //Ret: DateTime
        },
        Move: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 288, 23, true, a0, a1); //Ret: Void
        },
        Open$$String$$FileMode$$FileAccess$$FileShare: function(a0/*String*/, a1/*FileMode*/, a2/*FileAccess*/, a3/*FileShare*/) { 
            return CS.Call(4, 288, 24, true, a0, a1, a2, a3); //Ret: FileStream
        },
        Open$$String$$FileMode$$FileAccess: function(a0/*String*/, a1/*FileMode*/, a2/*FileAccess*/) { 
            return CS.Call(4, 288, 25, true, a0, a1, a2); //Ret: FileStream
        },
        Open$$String$$FileMode: function(a0/*String*/, a1/*FileMode*/) { 
            return CS.Call(4, 288, 26, true, a0, a1); //Ret: FileStream
        },
        OpenRead: function(a0/*String*/) { 
            return CS.Call(4, 288, 27, true, a0); //Ret: FileStream
        },
        OpenText: function(a0/*String*/) { 
            return CS.Call(4, 288, 28, true, a0); //Ret: StreamReader
        },
        OpenWrite: function(a0/*String*/) { 
            return CS.Call(4, 288, 29, true, a0); //Ret: FileStream
        },
        ReadAllBytes: function(a0/*String*/) { 
            return CS.Call(4, 288, 30, true, a0); //Ret: Byte[]
        },
        ReadAllLines$$String$$Encoding: function(a0/*String*/, a1/*Encoding*/) { 
            return CS.Call(4, 288, 31, true, a0, a1); //Ret: String[]
        },
        ReadAllLines$$String: function(a0/*String*/) { 
            return CS.Call(4, 288, 32, true, a0); //Ret: String[]
        },
        ReadAllText$$String$$Encoding: function(a0/*String*/, a1/*Encoding*/) { 
            return CS.Call(4, 288, 33, true, a0, a1); //Ret: String
        },
        ReadAllText$$String: function(a0/*String*/) { 
            return CS.Call(4, 288, 34, true, a0); //Ret: String
        },
        Replace$$String$$String$$String$$Boolean: function(a0/*String*/, a1/*String*/, a2/*String*/, a3/*Boolean*/) { 
            return CS.Call(4, 288, 35, true, a0, a1, a2, a3); //Ret: Void
        },
        Replace$$String$$String$$String: function(a0/*String*/, a1/*String*/, a2/*String*/) { 
            return CS.Call(4, 288, 36, true, a0, a1, a2); //Ret: Void
        },
        SetAccessControl: function(a0/*String*/, a1/*FileSecurity*/) { 
            return CS.Call(4, 288, 37, true, a0, a1); //Ret: Void
        },
        SetAttributes: function(a0/*String*/, a1/*FileAttributes*/) { 
            return CS.Call(4, 288, 38, true, a0, a1); //Ret: Void
        },
        SetCreationTime: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 288, 39, true, a0, a1); //Ret: Void
        },
        SetCreationTimeUtc: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 288, 40, true, a0, a1); //Ret: Void
        },
        SetLastAccessTime: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 288, 41, true, a0, a1); //Ret: Void
        },
        SetLastAccessTimeUtc: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 288, 42, true, a0, a1); //Ret: Void
        },
        SetLastWriteTime: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 288, 43, true, a0, a1); //Ret: Void
        },
        SetLastWriteTimeUtc: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 288, 44, true, a0, a1); //Ret: Void
        },
        WriteAllBytes: function(a0/*String*/, a1/*Byte[]*/) { 
            return CS.Call(4, 288, 45, true, a0, a1); //Ret: Void
        },
        WriteAllLines$$String$$String$Array$$Encoding: function(a0/*String*/, a1/*String[]*/, a2/*Encoding*/) { 
            return CS.Call(4, 288, 46, true, a0, a1, a2); //Ret: Void
        },
        WriteAllLines$$String$$String$Array: function(a0/*String*/, a1/*String[]*/) { 
            return CS.Call(4, 288, 47, true, a0, a1); //Ret: Void
        },
        WriteAllText$$String$$String$$Encoding: function(a0/*String*/, a1/*String*/, a2/*Encoding*/) { 
            return CS.Call(4, 288, 48, true, a0, a1, a2); //Ret: Void
        },
        WriteAllText$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 288, 49, true, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$IO$File);

// System.IO.Directory
var System$IO$Directory = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.IO.Directory",
    Kind: "Class",
    baseTypeName: "System.Object",
    staticDefinition: {
        CreateDirectory$$String$$DirectorySecurity: function(a0/*String*/, a1/*DirectorySecurity*/) { 
            return CS.Call(4, 289, 0, true, a0, a1); //Ret: DirectoryInfo
        },
        CreateDirectory$$String: function(a0/*String*/) { 
            return CS.Call(4, 289, 1, true, a0); //Ret: DirectoryInfo
        },
        Delete$$String$$Boolean: function(a0/*String*/, a1/*Boolean*/) { 
            return CS.Call(4, 289, 2, true, a0, a1); //Ret: Void
        },
        Delete$$String: function(a0/*String*/) { 
            return CS.Call(4, 289, 3, true, a0); //Ret: Void
        },
        Exists: function(a0/*String*/) { 
            return CS.Call(4, 289, 4, true, a0); //Ret: Boolean
        },
        GetAccessControl$$String$$AccessControlSections: function(a0/*String*/, a1/*AccessControlSections*/) { 
            return CS.Call(4, 289, 5, true, a0, a1); //Ret: DirectorySecurity
        },
        GetAccessControl$$String: function(a0/*String*/) { 
            return CS.Call(4, 289, 6, true, a0); //Ret: DirectorySecurity
        },
        GetCreationTime: function(a0/*String*/) { 
            return CS.Call(4, 289, 7, true, a0); //Ret: DateTime
        },
        GetCreationTimeUtc: function(a0/*String*/) { 
            return CS.Call(4, 289, 8, true, a0); //Ret: DateTime
        },
        GetCurrentDirectory: function() { 
            return CS.Call(4, 289, 9, true); //Ret: String
        },
        GetDirectories$$String$$String$$SearchOption: function(a0/*String*/, a1/*String*/, a2/*SearchOption*/) { 
            return CS.Call(4, 289, 10, true, a0, a1, a2); //Ret: String[]
        },
        GetDirectories$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 289, 11, true, a0, a1); //Ret: String[]
        },
        GetDirectories$$String: function(a0/*String*/) { 
            return CS.Call(4, 289, 12, true, a0); //Ret: String[]
        },
        GetDirectoryRoot: function(a0/*String*/) { 
            return CS.Call(4, 289, 13, true, a0); //Ret: String
        },
        GetFiles$$String$$String$$SearchOption: function(a0/*String*/, a1/*String*/, a2/*SearchOption*/) { 
            return CS.Call(4, 289, 14, true, a0, a1, a2); //Ret: String[]
        },
        GetFiles$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 289, 15, true, a0, a1); //Ret: String[]
        },
        GetFiles$$String: function(a0/*String*/) { 
            return CS.Call(4, 289, 16, true, a0); //Ret: String[]
        },
        GetFileSystemEntries$$String$$String: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 289, 17, true, a0, a1); //Ret: String[]
        },
        GetFileSystemEntries$$String: function(a0/*String*/) { 
            return CS.Call(4, 289, 18, true, a0); //Ret: String[]
        },
        GetLastAccessTime: function(a0/*String*/) { 
            return CS.Call(4, 289, 19, true, a0); //Ret: DateTime
        },
        GetLastAccessTimeUtc: function(a0/*String*/) { 
            return CS.Call(4, 289, 20, true, a0); //Ret: DateTime
        },
        GetLastWriteTime: function(a0/*String*/) { 
            return CS.Call(4, 289, 21, true, a0); //Ret: DateTime
        },
        GetLastWriteTimeUtc: function(a0/*String*/) { 
            return CS.Call(4, 289, 22, true, a0); //Ret: DateTime
        },
        GetLogicalDrives: function() { 
            return CS.Call(4, 289, 23, true); //Ret: String[]
        },
        GetParent: function(a0/*String*/) { 
            return CS.Call(4, 289, 24, true, a0); //Ret: DirectoryInfo
        },
        Move: function(a0/*String*/, a1/*String*/) { 
            return CS.Call(4, 289, 25, true, a0, a1); //Ret: Void
        },
        SetAccessControl: function(a0/*String*/, a1/*DirectorySecurity*/) { 
            return CS.Call(4, 289, 26, true, a0, a1); //Ret: Void
        },
        SetCreationTime: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 289, 27, true, a0, a1); //Ret: Void
        },
        SetCreationTimeUtc: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 289, 28, true, a0, a1); //Ret: Void
        },
        SetCurrentDirectory: function(a0/*String*/) { 
            return CS.Call(4, 289, 29, true, a0); //Ret: Void
        },
        SetLastAccessTime: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 289, 30, true, a0, a1); //Ret: Void
        },
        SetLastAccessTimeUtc: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 289, 31, true, a0, a1); //Ret: Void
        },
        SetLastWriteTime: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 289, 32, true, a0, a1); //Ret: Void
        },
        SetLastWriteTimeUtc: function(a0/*String*/, a1/*DateTime*/) { 
            return CS.Call(4, 289, 33, true, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$IO$Directory);

// System.ICloneable
var System$ICloneable = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.ICloneable",
    Kind: "Interface",
    definition: {
        Clone: function() { 
            return CS.Call(4, 290, 0, false, this); //Ret: Object
        },
    },
};
jsb_ReplaceOrPushJsType(System$ICloneable);

// System.Collections.IEnumerable
var System$Collections$IEnumerable = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Collections.IEnumerable",
    Kind: "Interface",
    definition: {
        GetEnumerator: function() { 
            return CS.Call(4, 291, 0, false, this); //Ret: IEnumerator
        },
    },
};
jsb_ReplaceOrPushJsType(System$Collections$IEnumerable);

// System.Runtime.Serialization.IDeserializationCallback
var System$Runtime$Serialization$IDeserializationCallback = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Runtime.Serialization.IDeserializationCallback",
    Kind: "Interface",
    definition: {
        OnDeserialization: function(a0/*Object*/) { 
            return CS.Call(4, 292, 0, false, this, a0); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Runtime$Serialization$IDeserializationCallback);

// System.Runtime.Serialization.ISerializable
var System$Runtime$Serialization$ISerializable = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Runtime.Serialization.ISerializable",
    Kind: "Interface",
    definition: {
        GetObjectData: function(a0/*SerializationInfo*/, a1/*StreamingContext*/) { 
            return CS.Call(4, 293, 0, false, this, a0, a1); //Ret: Void
        },
    },
};
jsb_ReplaceOrPushJsType(System$Runtime$Serialization$ISerializable);

// System.Runtime.InteropServices._Exception
var System$Runtime$InteropServices$_Exception = 
{
    assemblyName: "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    fullname: "System.Runtime.InteropServices._Exception",
    Kind: "Interface",
    definition: {
        get_HelpLink: function() { return CS.Call(2, 294, 0, false, this); },
        set_HelpLink: function(v) { return CS.Call(3, 294, 0, false, this, v); },
        get_InnerException: function() { return CS.Call(2, 294, 1, false, this); },
        set_InnerException: function(v) { return CS.Call(3, 294, 1, false, this, v); },
        get_Message: function() { return CS.Call(2, 294, 2, false, this); },
        set_Message: function(v) { return CS.Call(3, 294, 2, false, this, v); },
        get_Source: function() { return CS.Call(2, 294, 3, false, this); },
        set_Source: function(v) { return CS.Call(3, 294, 3, false, this, v); },
        get_StackTrace: function() { return CS.Call(2, 294, 4, false, this); },
        set_StackTrace: function(v) { return CS.Call(3, 294, 4, false, this, v); },
        get_TargetSite: function() { return CS.Call(2, 294, 5, false, this); },
        set_TargetSite: function(v) { return CS.Call(3, 294, 5, false, this, v); },
        Equals: function(a0/*Object*/) { 
            return CS.Call(4, 294, 0, false, this, a0); //Ret: Boolean
        },
        GetBaseException: function() { 
            return CS.Call(4, 294, 1, false, this); //Ret: Exception
        },
        GetHashCode: function() { 
            return CS.Call(4, 294, 2, false, this); //Ret: Int32
        },
        GetObjectData: function(a0/*SerializationInfo*/, a1/*StreamingContext*/) { 
            return CS.Call(4, 294, 3, false, this, a0, a1); //Ret: Void
        },
        GetType: function() { 
            return CS.Call(4, 294, 4, false, this); //Ret: Type
        },
        toString: function() { 
            return CS.Call(4, 294, 5, false, this); //Ret: String
        },
    },
};
jsb_ReplaceOrPushJsType(System$Runtime$InteropServices$_Exception);

// DG.Tweening.IDOTweenInit
var DG$Tweening$IDOTweenInit = 
{
    assemblyName: "DOTween, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
    fullname: "DG.Tweening.IDOTweenInit",
    Kind: "Interface",
    definition: {
        SetCapacity: function(a0/*Int32*/, a1/*Int32*/) { 
            return CS.Call(4, 295, 0, false, this, a0, a1); //Ret: IDOTweenInit
        },
    },
};
jsb_ReplaceOrPushJsType(DG$Tweening$IDOTweenInit);
